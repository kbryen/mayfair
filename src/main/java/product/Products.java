/*
 * Mayfair Stock Control.
 *
 */
package main.java.product;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.INFORMATION_MESSAGE;
import static javax.swing.JOptionPane.WARNING_MESSAGE;
import javax.swing.table.DefaultTableModel;
import main.java.MayfairStatic;
import static main.java.MayfairStatic.POD_ORDNUM;
import static main.java.MayfairStatic.POD_PRODNUM;
import static main.java.MayfairStatic.POD_QUANTITY;
import static main.java.MayfairStatic.PO_DELIVERED;
import static main.java.MayfairStatic.PO_DISPATCHED;
import static main.java.MayfairStatic.PO_ORDNUM;
import static main.java.MayfairStatic.PRODUCTS_TABLE;
import static main.java.MayfairStatic.PRODUCT_CODE;
import static main.java.MayfairStatic.PRODUCT_DISCON;
import static main.java.MayfairStatic.PRODUCT_INORDER;
import static main.java.MayfairStatic.PRODUCT_INSTOCK;
import static main.java.MayfairStatic.PRODUCT_PRODNUM;
import static main.java.MayfairStatic.PRODUCT_PURCHASEPRICE;
import static main.java.MayfairStatic.PRODUCT_SALESPRICE;
import static main.java.MayfairStatic.PRODUCT_SSAW;
import static main.java.MayfairStatic.PRODUCT_TOTAL;
import static main.java.MayfairStatic.PURCHASE_ORDER_DETAILS_TABLE;
import static main.java.MayfairStatic.PURCHASE_ORDER_TABLE;
import static main.java.MayfairStatic.SALES_ORDER_DETAILS_TABLE;
import static main.java.MayfairStatic.SALES_ORDER_TABLE;
import static main.java.MayfairStatic.SOD_FROMSTOCK;
import static main.java.MayfairStatic.SOD_ORDNUM;
import static main.java.MayfairStatic.SOD_PRODNUM;
import static main.java.MayfairStatic.SOD_QUANTITY;
import static main.java.MayfairStatic.SO_DELIVERED;
import static main.java.MayfairStatic.SO_DISPATCHED;
import static main.java.MayfairStatic.SO_ORDNUM;

/**
 *
 * @author kian_bryen
 */
public class Products extends javax.swing.JInternalFrame
{

    private final JDesktopPane desktop;

    public Products(JDesktopPane pane)
    {
        setUpGUI();
        desktop = pane;
        btnFindActionPerformed(null);
    }

    private void setUpGUI()
    {
        initComponents();
        table.setAutoCreateRowSorter(true);
    }

    private void enableButtons(boolean enable)
    {
        btnDiscontinue.setVisible(enable);
        btnView.setEnabled(enable);
        btnDelete.setEnabled(enable);
        btnEdit.setEnabled(enable);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        fieldProdCode = new javax.swing.JTextField();
        btnFind = new javax.swing.JButton();
        scrollPane = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        comboSeason = new javax.swing.JComboBox();
        btnDiscontinue = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        Add = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Products");

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        jLabel1.setText("Products");

        jLabel2.setText("Product Code : ");

        btnFind.setText("Find");
        btnFind.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnFindActionPerformed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String []
            {
                "Product Number", "Code", "Purchase Price", "Sales Price", "Avaliable Stock", "PO Stock", "Potential Stock", "Warehouse Stock", "Season", "Discontinued"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.Integer.class, java.lang.String.class, java.lang.Float.class, java.lang.Float.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        table.setCellSelectionEnabled(false);
        table.setRowSelectionAllowed(true);
        table.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                tableMouseClicked(evt);
            }
        });
        scrollPane.setViewportView(table);
        table.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (table.getColumnModel().getColumnCount() > 0)
        {
            table.getColumnModel().getColumn(9).setResizable(false);
        }

        jLabel3.setText("Season : ");

        comboSeason.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "SS", "AW", "Discontinued" }));
        comboSeason.setToolTipText("");

        btnDiscontinue.setText("Discontinue");
        btnDiscontinue.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnDiscontinueActionPerformed(evt);
            }
        });

        btnView.setText("View Product");
        btnView.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnViewActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnDeleteActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnClearActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnEditActionPerformed(evt);
            }
        });

        Add.setText("Add New Product");
        Add.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                AddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(fieldProdCode, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboSeason, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 162, Short.MAX_VALUE)
                        .addComponent(btnClear)
                        .addGap(18, 18, 18)
                        .addComponent(btnFind)
                        .addGap(44, 44, 44))
                    .addComponent(jSeparator2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(btnDelete)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnDiscontinue)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnEdit))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnView)))
                            .addComponent(Add, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addComponent(scrollPane))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(fieldProdCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFind)
                    .addComponent(jLabel3)
                    .addComponent(comboSeason, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear))
                .addGap(18, 18, 18)
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Add)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEdit)
                    .addComponent(btnDelete)
                    .addComponent(btnDiscontinue))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnView)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionPerformed
        try (Statement statement = MayfairStatic.getConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE))
        {
            List<String> prod_nums = new ArrayList();
            String sql = "SELECT " + PRODUCT_PRODNUM + " "
                    + "FROM " + PRODUCTS_TABLE + " "
                    + "WHERE " + PRODUCT_CODE + " LIKE '%" + fieldProdCode.getText() + "%' ";
            if (comboSeason.getSelectedItem().equals("Discontinued"))
            {
                sql += "AND " + PRODUCT_DISCON + " = true ";
            }
            else
            {
                sql += "AND " + PRODUCT_SSAW + " LIKE '%" + comboSeason.getSelectedItem() + "%' ";
            }
            sql += "ORDER BY " + PRODUCT_DISCON + ", "
                    + PRODUCT_TOTAL + " DESC, "
                    + PRODUCT_CODE;

            ResultSet rs = statement.executeQuery(sql);
            while (rs.next())
            {
                prod_nums.add(rs.getString(PRODUCT_PRODNUM));
            }

            DefaultTableModel model = (DefaultTableModel) table.getModel();
            int rowNum = 0;
            for (String prod_num : prod_nums)
            {
                rs = statement.executeQuery("SELECT " + PRODUCT_PRODNUM + ", "
                        + PRODUCT_CODE + ", "
                        + PRODUCT_PURCHASEPRICE + ", "
                        + PRODUCT_SALESPRICE + ", "
                        + PRODUCT_INSTOCK + ", "
                        + PRODUCT_INORDER + ", "
                        + PRODUCT_TOTAL + ", "
                        + "(IFNULL(SUM(" + SOD_FROMSTOCK + "), 0)  + " + PRODUCT_INSTOCK + ") AS warehouseStock, "
                        + PRODUCT_SSAW + ", "
                        + PRODUCT_DISCON + " "
                        + "FROM " + SALES_ORDER_DETAILS_TABLE + " "
                        + "LEFT JOIN " + SALES_ORDER_TABLE + " "
                        + "ON " + SOD_ORDNUM + "=" + SO_ORDNUM + " "
                        + "RIGHT JOIN " + PRODUCTS_TABLE + " "
                        + "ON " + SOD_PRODNUM + "=" + PRODUCT_PRODNUM + " "
                        + "WHERE " + SOD_PRODNUM + " = " + prod_num + " "
                        + "AND " + SO_DISPATCHED + " = false "
                        + "AND " + SO_DELIVERED + " = false "
                        + "AND " + PRODUCT_PRODNUM + " = " + prod_num);

                int columns = rs.getMetaData().getColumnCount();
                while (rs.next())
                {
                    Object[] row = new Object[columns];
                    for (int i = 1; i <= columns; i++)
                    {
                        row[i - 1] = rs.getObject(i);
                    }
                    model.insertRow(rowNum++, row);
                }
            }
            enableButtons(false);
        }
        catch (SQLException ex)
        {
            MayfairStatic.outputMessage(this, ex);
        }
    }//GEN-LAST:event_btnFindActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        fieldProdCode.setText((String) table.getValueAt(table.getSelectedRow(), 1));
        if ((boolean) table.getValueAt(table.getSelectedRow(), 9))
        {
            btnDiscontinue.setText("Undiscontinue");
        }
        else
        {
            btnDiscontinue.setText("Discontinue");
        }
        enableButtons(true);
    }//GEN-LAST:event_tableMouseClicked

    private void btnDiscontinueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDiscontinueActionPerformed
        String code = fieldProdCode.getText();
        String action = btnDiscontinue.getText();
        boolean discon = action.equals("Discontinue");
        if (MayfairStatic.outputConfirm(this, action, "Are you sure you want to " + action.toLowerCase() + " " + code + "?") == JOptionPane.YES_OPTION)
        {
            try (Statement statement = MayfairStatic.getConnection().createStatement())
            {
                if (discon && (int) table.getValueAt(table.getSelectedRow(), 5) > 0)
                {
                    MayfairStatic.outputMessage(this, "Active Purchase Order", code + " cannot be discontinued as a Purchase Order has been placed for it.", WARNING_MESSAGE);
                }
                else
                {
                    MayfairStatic.writeToLog(action.toUpperCase() + " PRODUCT " + code);
                    String sql = "UPDATE " + PRODUCTS_TABLE + " "
                            + "SET " + PRODUCT_DISCON + " = " + discon + " "
                            + "WHERE " + PRODUCT_CODE + " = '" + code + "'";
                    statement.executeUpdate(sql);
                    MayfairStatic.writeToLog(sql);
                    MayfairStatic.writeToLog(MayfairStatic.LOG_SEPERATOR);
                    JOptionPane.showMessageDialog(this, code + " marked as " + action.toLowerCase() + "d.");

                    fieldProdCode.setText("");
                    btnFindActionPerformed(null);
                }
            }
            catch (SQLException ex)
            {
                MayfairStatic.outputMessage(this, ex);
            }
        }
    }//GEN-LAST:event_btnDiscontinueActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        ViewProduct jFrame = new ViewProduct(desktop, (int) table.getValueAt(table.getSelectedRow(), 0));
        desktop.add(jFrame);
        jFrame.show();
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        String code = fieldProdCode.getText();
        if (MayfairStatic.outputConfirm(this, "Delete Product", "Are you sure you want to delete " + code + "?") == JOptionPane.YES_OPTION)
        {
            try (Statement statement = MayfairStatic.getConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE))
            {
                ResultSet rs = statement.executeQuery("SELECT " + PRODUCT_PRODNUM + " "
                        + "FROM " + PRODUCTS_TABLE + " "
                        + "WHERE " + PRODUCT_CODE + " = '" + code + "'");
                rs.next();
                int prod_num = rs.getInt(PRODUCT_PRODNUM);

                rs = statement.executeQuery("SELECT SUM(" + SOD_QUANTITY + ") AS total "
                        + "FROM " + SALES_ORDER_DETAILS_TABLE + " "
                        + "JOIN " + SALES_ORDER_TABLE + " "
                        + "ON " + SOD_ORDNUM + "=" + SO_ORDNUM + " "
                        + "WHERE " + SOD_PRODNUM + " = " + prod_num + " "
                        + "AND " + SO_DISPATCHED + " = false "
                        + "AND " + SO_DELIVERED + " = false");
                rs.next();
                int on_sales_order = rs.getInt("total");

                rs = statement.executeQuery("SELECT SUM(" + POD_QUANTITY + ") AS total "
                        + "FROM " + PURCHASE_ORDER_DETAILS_TABLE + " "
                        + "JOIN " + PURCHASE_ORDER_TABLE + " "
                        + "ON " + POD_ORDNUM + "=" + PO_ORDNUM + " "
                        + "WHERE " + POD_PRODNUM + " = " + prod_num + " "
                        + "AND " + PO_DISPATCHED + " = false "
                        + "AND " + PO_DELIVERED + " = false");
                rs.next();
                int on_purchase_order = rs.getInt("total");

                if ((on_sales_order + on_purchase_order) == 0)
                {
                    try (Statement statement2 = MayfairStatic.getConnection().createStatement())
                    {
                        MayfairStatic.writeToLog("DELETE PRODUCT " + code);
                        String sql = "DELETE FROM " + PRODUCTS_TABLE + " "
                                + "WHERE " + PRODUCT_CODE + " = '" + code + "'";
                        statement2.executeUpdate(sql);
                        MayfairStatic.writeToLog(sql);
                        MayfairStatic.writeToLog(MayfairStatic.LOG_SEPERATOR);

                        MayfairStatic.outputMessage(this, "Delete Product", "Product Deleted.", INFORMATION_MESSAGE);
                        fieldProdCode.setText("");
                        btnFindActionPerformed(null);
                    }
                }
                else
                {
                    MayfairStatic.outputMessage(this, "Delete Product", "Cannot delete " + code + ":\n" + on_sales_order + " - on Sales Orders\n" + on_purchase_order + " - on Purchase Orders", WARNING_MESSAGE);
                }
            }
            catch (SQLException ex)
            {
                MayfairStatic.outputMessage(this, ex);
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        fieldProdCode.setText("");
        enableButtons(false);
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        EditProduct jFrame = new EditProduct((int) table.getValueAt(table.getSelectedRow(), 0));
        desktop.add(jFrame);
        jFrame.show();
    }//GEN-LAST:event_btnEditActionPerformed

    private void AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddActionPerformed
        AddProduct jFrame = new AddProduct();
        desktop.add(jFrame);
        jFrame.show();
    }//GEN-LAST:event_AddActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDiscontinue;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnFind;
    private javax.swing.JButton btnView;
    private javax.swing.JComboBox comboSeason;
    private javax.swing.JTextField fieldProdCode;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
