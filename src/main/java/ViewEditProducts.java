/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Mayfair;

import static Mayfair.Main.seperator;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.util.Pair;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.usermodel.CellStyle;

/**
 *
 * @author kian_bryen
 */
public class ViewEditProducts extends javax.swing.JInternalFrame
{

    private final JDesktopPane desktop;
    private final Database db = new Database();
    private String sql;

    /**
     * Creates new form ViewEditProducts
     *
     * @param pane Desktop Pane
     */
    public ViewEditProducts(JDesktopPane pane)
    {
        desktop = pane;
        initComponents();
        btnFindActionPerformed(null);
        btnDiscontinue.setVisible(false);
        btnQuant.setEnabled(false);
        btnSeason.setEnabled(false);
        btnPurchase.setEnabled(false);
        btnSales.setEnabled(false);
        btnView.setEnabled(false);
        btnShowSales.setEnabled((false));
        btnDelete.setEnabled(false);
        btnOrderReport.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        fieldProdCode = new javax.swing.JTextField();
        btnFind = new javax.swing.JButton();
        scrollPane = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        comboSeason = new javax.swing.JComboBox();
        btnDiscontinue = new javax.swing.JButton();
        btnQuant = new javax.swing.JButton();
        btnPurchase = new javax.swing.JButton();
        btnSales = new javax.swing.JButton();
        btnSeason = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        btnShowSales = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnStock = new javax.swing.JButton();
        scrollPane1 = new javax.swing.JScrollPane();
        table2 = new javax.swing.JTable();
        btnOrderReport = new javax.swing.JButton();
        OOSReport = new javax.swing.JButton();
        btnSalesReport = new javax.swing.JButton();
        btnOrdersReport = new javax.swing.JButton();
        btnChangeCode = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("View All Products");

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        jLabel1.setText("View Products");

        jLabel2.setText("Product Code : ");

        btnFind.setText("Find");
        btnFind.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnFindActionPerformed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null, null, null, null, null, null, null, null}
            },
            new String []
            {
                "Prod Num", "Code", "Purchase Price", "Sales Price", "Avaliable Stock", "PO Stock", "Potential (Avaliable + PO)", "Season", "Discontinued"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.Integer.class, java.lang.String.class, java.lang.Float.class, java.lang.Float.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        table.setColumnSelectionAllowed(true);
        table.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                tableMouseClicked(evt);
            }
        });
        scrollPane.setViewportView(table);
        table.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (table.getColumnModel().getColumnCount() > 0)
        {
            table.getColumnModel().getColumn(8).setResizable(false);
        }

        jLabel3.setText("Season : ");

        comboSeason.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "SS", "AW", "Discontinued" }));
        comboSeason.setToolTipText("");

        btnDiscontinue.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnDiscontinueActionPerformed(evt);
            }
        });

        btnQuant.setText("Override Stock Count");
        btnQuant.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnQuantActionPerformed(evt);
            }
        });

        btnPurchase.setText("Update Purchase Price");
        btnPurchase.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnPurchaseActionPerformed(evt);
            }
        });

        btnSales.setText("Update Sales Price");
        btnSales.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnSalesActionPerformed(evt);
            }
        });

        btnSeason.setText("Change Season");
        btnSeason.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnSeasonActionPerformed(evt);
            }
        });

        btnView.setText("View Summary");
        btnView.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnViewActionPerformed(evt);
            }
        });

        btnShowSales.setText("Show Sales");
        btnShowSales.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnShowSalesActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnDeleteActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnClearActionPerformed(evt);
            }
        });

        btnStock.setText("Stock Report");
        btnStock.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnStockActionPerformed(evt);
            }
        });

        table2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null}
            },
            new String []
            {
                "Prod Num", "Warehouse"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        table2.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        table2.setColumnSelectionAllowed(true);
        table2.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                table2MouseClicked(evt);
            }
        });
        scrollPane1.setViewportView(table2);
        table2.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        btnOrderReport.setText("Order Report");
        btnOrderReport.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnOrderReportActionPerformed(evt);
            }
        });

        OOSReport.setText("Out of Stock Report");
        OOSReport.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                OOSReportActionPerformed(evt);
            }
        });

        btnSalesReport.setText("Sales Report");
        btnSalesReport.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnSalesReportActionPerformed(evt);
            }
        });

        btnOrdersReport.setText("Orders Report");
        btnOrdersReport.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnOrdersReportActionPerformed(evt);
            }
        });

        btnChangeCode.setText("Change Code");
        btnChangeCode.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnChangeCodeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(fieldProdCode, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboSeason, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 144, Short.MAX_VALUE)
                        .addComponent(btnClear)
                        .addGap(18, 18, 18)
                        .addComponent(btnFind)
                        .addGap(44, 44, 44))
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(scrollPane)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnOrderReport)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(OOSReport)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnStock)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnView))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnChangeCode)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSeason)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnQuant)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnPurchase)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSales))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 297, Short.MAX_VALUE)
                        .addComponent(btnOrdersReport)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSalesReport)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnShowSales)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDiscontinue)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(fieldProdCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFind)
                    .addComponent(jLabel3)
                    .addComponent(comboSeason, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
                    .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnDiscontinue, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnDelete)
                        .addComponent(btnShowSales)
                        .addComponent(btnSalesReport)
                        .addComponent(btnOrdersReport)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSales)
                    .addComponent(btnPurchase)
                    .addComponent(btnSeason)
                    .addComponent(btnQuant)
                    .addComponent(btnChangeCode))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnView)
                    .addComponent(btnStock)
                    .addComponent(btnOrderReport)
                    .addComponent(OOSReport))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionPerformed
        Connection con = db.getConnection();
        try
        {
            ArrayList<Integer> prod_nums = new ArrayList();
            ArrayList<Integer> in_stocks = new ArrayList();

            Statement statement = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
            ResultSet rs;
            if (!comboSeason.getSelectedItem().equals("Discontinued"))
            {
                rs = statement.executeQuery("SELECT prod_num, code, purchase_price, sales_price, in_stock, in_order, total, SSAW, discon FROM products WHERE code LIKE '%" + fieldProdCode.getText() + "%' AND SSAW LIKE '%" + comboSeason.getSelectedItem() + "%' ORDER BY discon ASC, code");
            }
            else
            {
                rs = statement.executeQuery("SELECT prod_num, code, purchase_price, sales_price, in_stock, in_order, total, SSAW, discon FROM products WHERE code LIKE '%" + fieldProdCode.getText() + "%' AND discon = true ORDER BY discon ASC, code");
            }

            scrollPane.setVisible(true);
            getContentPane().validate();
            getContentPane().repaint();
            while (table.getRowCount() > 0)
            {
                ((DefaultTableModel) table.getModel()).removeRow(0);
            }
            int columns = rs.getMetaData().getColumnCount();
            while (rs.next())
            {
                int prod_num = rs.getInt("prod_num");
                int in_stock = rs.getInt("in_stock");
                prod_nums.add(prod_num);
                in_stocks.add(in_stock);

                Object[] row = new Object[columns];
                for (int i = 1; i <= columns; i++)
                {
                    row[i - 1] = rs.getObject(i);
                }
                ((DefaultTableModel) table.getModel()).insertRow(rs.getRow() - 1, row);
            }

            DefaultTableModel model = (DefaultTableModel) table2.getModel();
            model.setRowCount(0);

            for (int i = 0; i < prod_nums.size(); i++)
            {
                int prod_num = prod_nums.get(i);

                rs = statement.executeQuery("SELECT SUM(sales_order_details.fromStock) AS total FROM sales_order_details JOIN sales_order ON sales_order_details.ord_num=sales_order.ord_num WHERE sales_order_details.prod_num = " + prod_num + " AND sales_order.dispatched = false AND sales_order.delivered = false");
                rs.next();

                int in_stock = in_stocks.get(i);
                int total = rs.getInt("total");

                int stock = in_stock + total;
                Object[] row =
                {
                    prod_num, stock
                };
                //table2.setValueAt(stock, i, 0);
                model.insertRow(i, row);
            }

            btnDiscontinue.setVisible(false);
            btnQuant.setEnabled(false);
            btnSeason.setEnabled(false);
            btnPurchase.setEnabled(false);
            btnSales.setEnabled(false);
            btnView.setEnabled(false);
            btnShowSales.setEnabled((false));
            btnDelete.setEnabled(false);
            btnOrderReport.setEnabled(false);
        }
        catch (SQLException e)
        {
            JOptionPane.showMessageDialog(ViewEditProducts.this, e.getMessage());
        }
        finally
        {
            try
            {
                con.close();
            }
            catch (Exception e)
            { /* ignored */ }
        }
    }//GEN-LAST:event_btnFindActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        fieldProdCode.setText((String) table.getValueAt(table.getSelectedRow(), 1));

        btnDiscontinue.setVisible(true);
        if ((boolean) table.getValueAt(table.getSelectedRow(), 8))
        {
            btnDiscontinue.setText("Undiscontinue");
            btnQuant.setEnabled(false);
            btnSeason.setEnabled(false);
        }
        else
        {
            btnDiscontinue.setText("Discontinue");
            btnQuant.setEnabled(true);
            btnSeason.setEnabled(true);
        }
        btnPurchase.setEnabled(true);
        btnSales.setEnabled(true);
        btnView.setEnabled(true);
        btnShowSales.setEnabled(true);
        btnDelete.setEnabled(true);
        btnOrderReport.setEnabled(true);
    }//GEN-LAST:event_tableMouseClicked

    private void btnDiscontinueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDiscontinueActionPerformed
        int selectedOption;
        if (btnDiscontinue.getText().equals("Discontinue"))
        {
            selectedOption = JOptionPane.showConfirmDialog(null, "Are you sure you want to discontinue this product?", "Discontinue", JOptionPane.YES_NO_OPTION);
        }
        else
        {
            selectedOption = JOptionPane.showConfirmDialog(null, "Are you sure you want to undiscontinue this product?", "Undiscontinue", JOptionPane.YES_NO_OPTION);
        }
        if (selectedOption == JOptionPane.YES_OPTION)
        {
            Connection con = db.getConnection();
            try
            {
                Statement statement = con.createStatement();

                if (btnDiscontinue.getText().equals("Discontinue"))
                {
                    int number = (int) table.getValueAt(table.getSelectedRow(), 5);

                    if (number > 0)
                    {
                        JOptionPane.showMessageDialog(ViewEditProducts.this, "Product cannot be discontinued as a Purchase Order has been placed.");
                    }
                    else
                    {
                        db.writeToLog("DISCONTINUE PRODUCT " + fieldProdCode.getText());
                        sql = "UPDATE products SET discon = true WHERE code = '" + fieldProdCode.getText() + "'";
                        statement.executeUpdate(sql);
                        db.writeToLog(sql);
                        db.writeToLog(seperator);
                        JOptionPane.showMessageDialog(ViewEditProducts.this, "State of product has been updated.");
                    }
                }
                else
                {
                    db.writeToLog("UNDISCONTINUE PRODUCT " + fieldProdCode.getText());
                    sql = "UPDATE products SET discon = false WHERE code = '" + fieldProdCode.getText() + "'";
                    statement.executeUpdate(sql);
                    db.writeToLog(sql);
                    db.writeToLog(seperator);
                    JOptionPane.showMessageDialog(ViewEditProducts.this, "State of product has been updated.");
                }

                fieldProdCode.setText("");
                btnFindActionPerformed(null);
            }
            catch (SQLException e)
            {
                JOptionPane.showMessageDialog(ViewEditProducts.this, e.getMessage());
            }
            finally
            {
                try
                {
                    con.close();
                }
                catch (Exception e)
                { /* ignored */ }
            }
        }
    }//GEN-LAST:event_btnDiscontinueActionPerformed

    private void btnQuantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuantActionPerformed
        try
        {
            int quant = Integer.valueOf(JOptionPane.showInputDialog("Please input updated number in stock for " + fieldProdCode.getText() + ":"));
            if (quant >= 0)
            {
                Connection con = db.getConnection();
                try
                {
                    db.writeToLog("OVERRIDE STOCK COUNT " + fieldProdCode.getText());
                    Statement statement = con.createStatement();
                    sql = "UPDATE products SET in_stock = " + quant + " WHERE code = '" + fieldProdCode.getText() + "'";
                    statement.executeUpdate(sql);
                    db.writeToLog(sql);
                    db.writeToLog(seperator);

                    JOptionPane.showMessageDialog(ViewEditProducts.this, "State of product has been updated.");
                    fieldProdCode.setText("");
                    btnFindActionPerformed(null);
                }
                catch (SQLException e)
                {
                    JOptionPane.showMessageDialog(ViewEditProducts.this, e.getMessage());
                }
                finally
                {
                    try
                    {
                        con.close();
                    }
                    catch (Exception e)
                    { /* ignored */ }
                }
            }
            else
            {
                JOptionPane.showMessageDialog(ViewEditProducts.this, "Stock cannot be negative");
            }
        }
        catch (NumberFormatException e)
        {
            JOptionPane.showMessageDialog(ViewEditProducts.this, "Please enter a valid value");
        }
    }//GEN-LAST:event_btnQuantActionPerformed

    private void btnPurchaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPurchaseActionPerformed
        try
        {
            double price = Double.valueOf(JOptionPane.showInputDialog("Please input update purchase price for " + fieldProdCode.getText() + ":"));
            if (price >= 0)
            {
                Connection con = db.getConnection();
                try
                {
                    Statement statement = con.createStatement();
                    db.writeToLog("OVERRIDE PURCHASE PRICE " + fieldProdCode.getText());
                    sql = "UPDATE products SET purchase_price = " + price + " WHERE code = '" + fieldProdCode.getText() + "'";
                    statement.executeUpdate(sql);
                    db.writeToLog(sql);
                    db.writeToLog(seperator);

                    JOptionPane.showMessageDialog(ViewEditProducts.this, "Purchase price of product has been updated.");
                    fieldProdCode.setText("");
                    btnFindActionPerformed(null);
                }
                catch (SQLException e)
                {
                    JOptionPane.showMessageDialog(ViewEditProducts.this, e.getMessage());
                }
                finally
                {
                    try
                    {
                        con.close();
                    }
                    catch (Exception e)
                    { /* ignored */ }
                }
            }
            else
            {
                JOptionPane.showMessageDialog(ViewEditProducts.this, "Price cannot be negative");
            }
        }
        catch (NumberFormatException e)
        {
            JOptionPane.showMessageDialog(ViewEditProducts.this, "Please enter a valid value");
        }
    }//GEN-LAST:event_btnPurchaseActionPerformed

    private void btnSalesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalesActionPerformed
        try
        {
            double price = Double.valueOf(JOptionPane.showInputDialog("Please input update sales price for " + fieldProdCode.getText() + ":"));
            if (price >= 0)
            {
                Connection con = db.getConnection();
                try
                {
                    Statement statement = con.createStatement();
                    db.writeToLog("OVERRIDE SALES PRICE " + fieldProdCode.getText());
                    sql = "UPDATE products SET sales_price = " + price + " WHERE code = '" + fieldProdCode.getText() + "'";
                    statement.executeUpdate(sql);
                    db.writeToLog(sql);
                    db.writeToLog(seperator);

                    JOptionPane.showMessageDialog(ViewEditProducts.this, "Sales price of product has been updated.");
                    fieldProdCode.setText("");
                    btnFindActionPerformed(null);
                }
                catch (SQLException e)
                {
                    JOptionPane.showMessageDialog(ViewEditProducts.this, e.getMessage());
                }
                finally
                {
                    try
                    {
                        con.close();
                    }
                    catch (Exception e)
                    { /* ignored */ }
                }
            }
            else
            {
                JOptionPane.showMessageDialog(ViewEditProducts.this, "Price cannot be negative");
            }
        }
        catch (NumberFormatException e)
        {
            JOptionPane.showMessageDialog(ViewEditProducts.this, "Please enter a valid value");
        }
    }//GEN-LAST:event_btnSalesActionPerformed

    private void btnSeasonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeasonActionPerformed
        String[] ssaw =
        {
            "SS", "AW"
        };
        String season = (String) JOptionPane.showInputDialog(ViewEditProducts.this, "Please input season for " + fieldProdCode.getText() + ":", "Enter Season", JOptionPane.QUESTION_MESSAGE, null, ssaw, ssaw[0]);

        if (season != null)
        {
            Connection con = db.getConnection();
            try
            {
                Statement statement = con.createStatement();
                db.writeToLog("UPDATE SEASON " + fieldProdCode.getText());
                sql = "UPDATE products SET SSAW = '" + season + "' WHERE code = '" + fieldProdCode.getText() + "'";
                statement.executeUpdate(sql);
                db.writeToLog(sql);
                db.writeToLog(seperator);

                JOptionPane.showMessageDialog(ViewEditProducts.this, "Season of product has been updated.");
                fieldProdCode.setText("");
                btnFindActionPerformed(null);
            }
            catch (SQLException e)
            {
                JOptionPane.showMessageDialog(ViewEditProducts.this, e.getMessage());
            }
            finally
            {
                try
                {
                    con.close();
                }
                catch (Exception e)
                { /* ignored */ }
            }
        }
    }//GEN-LAST:event_btnSeasonActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        ViewProduct prod = new ViewProduct((int) table.getValueAt(table.getSelectedRow(), 0));
        desktop.add(prod);
        prod.show();
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnShowSalesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowSalesActionPerformed
        ShowSales sales = new ShowSales(fieldProdCode.getText(), (int) table.getValueAt(table.getSelectedRow(), 0));
        desktop.add(sales);
        sales.show();
    }//GEN-LAST:event_btnShowSalesActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int selectedOption = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this product?", "Delete", JOptionPane.YES_NO_OPTION);
        if (selectedOption == JOptionPane.YES_OPTION)
        {
            Connection con = db.getConnection();
            try
            {
                Statement statement = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
                ResultSet rs = statement.executeQuery("SELECT prod_num FROM products WHERE code = '" + fieldProdCode.getText() + "'");
                rs.next();
                int prod_num = rs.getInt("prod_num");

                rs = statement.executeQuery("SELECT SUM(sales_order_details.quantity) AS total FROM sales_order_details JOIN sales_order ON sales_order_details.ord_num=sales_order.ord_num WHERE sales_order_details.prod_num = " + prod_num + " AND sales_order.dispatched = false AND sales_order.delivered = false");
                rs.next();
                int on_sales_order = rs.getInt("total");

                rs = statement.executeQuery("SELECT SUM(purchase_order_details.quantity) AS total FROM purchase_order_details JOIN purchase_order ON purchase_order_details.ord_num=purchase_order.ord_num WHERE purchase_order_details.prod_num = " + prod_num + " AND purchase_order.dispatched = false AND purchase_order.delivered = false");
                rs.next();
                int on_purchase_order = rs.getInt("total");

                if ((on_sales_order + on_purchase_order) == 0)
                {
                    Statement statement2 = con.createStatement();
                    db.writeToLog("DELETE PRODUCT " + fieldProdCode.getText());
                    sql = "DELETE FROM products WHERE code = '" + fieldProdCode.getText() + "'";
                    statement2.executeUpdate(sql);
                    db.writeToLog(sql);
                    db.writeToLog(seperator);

                    JOptionPane.showMessageDialog(ViewEditProducts.this, "Product Deleted.");

                    fieldProdCode.setText("");
                    btnFindActionPerformed(null);
                }
                else
                {
                    JOptionPane.showMessageDialog(ViewEditProducts.this, "Cannot delete product:\n" + on_sales_order + " - on Sales Orders\n" + on_purchase_order + " - on Purchase Orders");
                }

            }
            catch (SQLException e)
            {
                JOptionPane.showMessageDialog(ViewEditProducts.this, e.getMessage());
            }
            finally
            {
                try
                {
                    con.close();
                }
                catch (Exception e)
                { /* ignored */ }
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        fieldProdCode.setText("");
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStockActionPerformed
        int selectedOption = JOptionPane.showConfirmDialog(null, "Are you sure you want to Create a Stock Report?", "Stock Report", JOptionPane.YES_NO_OPTION);
        if (selectedOption == JOptionPane.YES_OPTION)
        {
            try
            {
                DateFormat df = new SimpleDateFormat("MM-dd-yy");
                Date d = new Date();
                String date = df.format(d);
                FileOutputStream fileOut;
                fileOut = new FileOutputStream("S:/Stock Reports/Stock Report " + date + ".xls");

                HSSFWorkbook wb = new HSSFWorkbook();
                HSSFSheet worksheet = wb.createSheet(date);
                CellStyle editableStyle = wb.createCellStyle();
                editableStyle.setLocked(false);

                // Fonts
                HSSFFont row1font = wb.createFont();
                row1font.setFontHeightInPoints((short) 10);
                row1font.setFontName("Arial");
                row1font.setBold(true);
                row1font.setUnderline(HSSFFont.U_SINGLE);

                HSSFFont row4fontblack = wb.createFont();
                row4fontblack.setFontHeightInPoints((short) 11);
                row4fontblack.setFontName("Calibri");
                row4fontblack.setBold(true);

                // Styles
                HSSFCellStyle style0 = wb.createCellStyle();
                style0.setFont(row1font);

                HSSFCellStyle style1 = wb.createCellStyle();
                style1.setFont(row4fontblack);
                style1.setFillForegroundColor(HSSFColor.GREY_40_PERCENT.index);
                style1.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);

                HSSFRow row = worksheet.createRow(0);
                HSSFCell cell = row.createCell(0);
                cell.setCellValue("Stock Report");
                cell.setCellStyle(style0);

                int rowCount = 3;
                int cellCount = 0;

                Connection con = db.getConnection();
                try
                {
                    Statement statement = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
                    ResultSet rs;

                    row = worksheet.createRow(rowCount++);
                    cell = row.createCell(cellCount++);
                    cell.setCellValue("Product Code");
                    cell.setCellStyle(style1);

                    cell = row.createCell(cellCount++);
                    cell.setCellValue("In Stock");
                    cell.setCellStyle(style1);

                    rs = statement.executeQuery("SELECT ord_num FROM purchase_order WHERE delivered = false");
                    ArrayList<String> ord_nums = new ArrayList();
                    while (rs.next())
                    {
                        String ord_num = rs.getString("ord_num");
                        ord_nums.add(ord_num);

                        cell = row.createCell(cellCount++);
                        cell.setCellValue(ord_num);
                        cell.setCellStyle(style1);
                    }
                    
                    cell = row.createCell(cellCount++);
                    cell.setCellValue("Total");
                    cell.setCellStyle(style1);

                    rs = statement.executeQuery("SELECT prod_num, code, in_stock FROM products");
                    HashMap<Integer, Pair<String, Integer>> products = new HashMap();
                    while (rs.next())
                    {
                        products.put(rs.getInt("prod_num"), new Pair(rs.getString("code"), rs.getInt("in_stock")));
                    }

                    for (Map.Entry<Integer, Pair<String, Integer>> product : products.entrySet())
                    {
                        int prod_num = product.getKey();
                        String code = product.getValue().getKey();
                        int in_stock = product.getValue().getValue();

                        cellCount = 0;
                        row = worksheet.createRow(rowCount++);
                        cell = row.createCell(cellCount++);
                        cell.setCellValue(code);
                        cell = row.createCell(cellCount++);
                        cell.setCellValue(in_stock);

                        int total = in_stock;
                        for (String ord_num : ord_nums)
                        {
                            rs = statement.executeQuery("SELECT avaliable FROM purchase_order_details WHERE prod_num = " + prod_num + " AND ord_num = '" + ord_num + "'");

                            int avaliable = 0;
                            if (rs.next())
                            {
                                avaliable = rs.getInt("avaliable");
                            }

                            cell = row.createCell(cellCount++);
                            cell.setCellValue(avaliable);

                            total = total + avaliable;
                        }
                        cell = row.createCell(cellCount++);
                        cell.setCellValue(total);
                    }
                }
                catch (SQLException e)
                {
                    JOptionPane.showMessageDialog(ViewEditProducts.this, e.getMessage());
                }
                finally
                {
                    try
                    {
                        con.close();
                    }
                    catch (Exception e)
                    { /* ignored */ }
                }

                // Auto Size Columns
                for (int k = 0; k < 2; k++)
                {
                    worksheet.autoSizeColumn(k);
                    worksheet.setDefaultColumnStyle(rowCount, editableStyle);
                }

                wb.write(fileOut);
                fileOut.flush();
                fileOut.close();

                JOptionPane.showMessageDialog(ViewEditProducts.this, "Stock Report Created.");
            }
            catch (FileNotFoundException e)
            {
            }
            catch (IOException e)
            {
            }
        }
    }//GEN-LAST:event_btnStockActionPerformed

    private void table2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table2MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_table2MouseClicked

    private void btnOrderReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrderReportActionPerformed
        int selectedOption = JOptionPane.showConfirmDialog(null, "Are you sure you want to Create an Order Report?", "Order Report", JOptionPane.YES_NO_OPTION);
        if (selectedOption == JOptionPane.YES_OPTION)
        {
            try
            {
                int prod_num = (int) table.getValueAt(table.getSelectedRow(), 0);
                FileOutputStream fileOut;
                fileOut = new FileOutputStream("S:/Order Reports/Order Report - Prod num " + prod_num + ".xls");

                HSSFWorkbook wb = new HSSFWorkbook();
                HSSFSheet worksheet = wb.createSheet(String.valueOf(prod_num));
                CellStyle editableStyle = wb.createCellStyle();
                editableStyle.setLocked(false);

                HSSFRow row = worksheet.createRow((short) 0);
                HSSFCell cell = row.createCell(0);
                cell.setCellValue("Product Code");

                cell = row.createCell(1);
                cell.setCellValue(fieldProdCode.getText());

                row = worksheet.createRow((short) 2);
                cell = row.createCell(0);
                cell.setCellValue("Orders");

                row = worksheet.createRow((short) 3);
                cell = row.createCell(0);
                cell.setCellValue("Order Number");
                cell = row.createCell(1);
                cell.setCellValue("Customer Name");
                cell = row.createCell(2);
                cell.setCellValue("Order Date");
                cell = row.createCell(3);
                cell.setCellValue("Delivery Date");
                cell = row.createCell(4);
                cell.setCellValue("Dispatched");
                cell = row.createCell(5);
                cell.setCellValue("Delivered");
                cell = row.createCell(6);
                cell.setCellValue("Quantity");

                int i = 4;
                Connection con = db.getConnection();
                try
                {
                    Statement statement = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
                    ResultSet rs = statement.executeQuery("SELECT sales_order_details.ord_num, sales_order_details.quantity, sales_order.cust_num, customers.name, sales_order.ord_date, sales_order.del_date, sales_order.dispatched, sales_order.delivered FROM sales_order JOIN sales_order_details ON sales_order.ord_num=sales_order_details.ord_num JOIN customers ON sales_order.cust_num=customers.cust_num WHERE sales_order_details.prod_num = " + prod_num);

                    while (rs.next())
                    {
                        row = worksheet.createRow((short) i);
                        cell = row.createCell(0);
                        cell.setCellValue(rs.getString("ord_num"));
                        cell = row.createCell(1);
                        cell.setCellValue(rs.getString("name"));
                        cell = row.createCell(2);
                        cell.setCellValue(rs.getString("ord_date"));
                        cell = row.createCell(3);
                        cell.setCellValue(rs.getString("del_date"));
                        cell = row.createCell(4);
                        if (rs.getInt("dispatched") == 1)
                        {
                            cell.setCellValue("yes");
                        }
                        else
                        {
                            cell.setCellValue("no");
                        }
                        cell = row.createCell(5);
                        if (rs.getInt("delivered") == 1)
                        {
                            cell.setCellValue("yes");
                        }
                        else
                        {
                            cell.setCellValue("no");
                        }
                        cell = row.createCell(6);
                        cell.setCellValue(rs.getString("quantity"));
                        i++;
                    }
                }
                catch (SQLException e)
                {
                    JOptionPane.showMessageDialog(ViewEditProducts.this, e.getMessage());
                }
                finally
                {
                    try
                    {
                        con.close();
                    }
                    catch (Exception e)
                    { /* ignored */ }
                }

                // Auto Size Columns
                for (int k = 0; k < 5; k++)
                {
                    worksheet.autoSizeColumn(k);
                    worksheet.setDefaultColumnStyle(i, editableStyle);
                }

                wb.write(fileOut);
                fileOut.flush();
                fileOut.close();

                JOptionPane.showMessageDialog(ViewEditProducts.this, "Order Report Created.");
            }
            catch (FileNotFoundException e)
            {
            }
            catch (IOException e)
            {
            }
        }
    }//GEN-LAST:event_btnOrderReportActionPerformed

    private void OOSReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OOSReportActionPerformed
        int selectedOption = JOptionPane.showConfirmDialog(null, "Are you sure you want to Create an Out of Stock Order Report?", "Out of Stock Report", JOptionPane.YES_NO_OPTION);
        if (selectedOption == JOptionPane.YES_OPTION)
        {
            try
            {
                DateFormat df = new SimpleDateFormat("MM-dd-yy");
                Date d = new Date();
                String date = df.format(d);
                FileOutputStream fileOut;
                fileOut = new FileOutputStream("S:/Stock Reports/Out of Stock Report " + date + ".xls");

                HSSFWorkbook wb = new HSSFWorkbook();
                HSSFSheet worksheet = wb.createSheet(date);
                CellStyle editableStyle = wb.createCellStyle();
                editableStyle.setLocked(false);

                // Fonts
                HSSFFont row1font = wb.createFont();
                row1font.setFontHeightInPoints((short) 10);
                row1font.setFontName("Arial");
                row1font.setBold(true);
                row1font.setUnderline(HSSFFont.U_SINGLE);

                HSSFFont row4fontblack = wb.createFont();
                row4fontblack.setFontHeightInPoints((short) 11);
                row4fontblack.setFontName("Calibri");
                row4fontblack.setBold(true);

                // Styles
                HSSFCellStyle style0 = wb.createCellStyle();
                style0.setFont(row1font);

                HSSFCellStyle style1 = wb.createCellStyle();
                style1.setFont(row4fontblack);
                style1.setFillForegroundColor(HSSFColor.GREY_40_PERCENT.index);
                style1.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);

                // Row 4
                HSSFRow row4 = worksheet.createRow((short) 3);
                HSSFCell cell1 = row4.createCell(0);
                cell1.setCellValue("Product Code");
                cell1.setCellStyle(style1);

                int i = 4;
                Connection con = db.getConnection();
                try
                {
                    Statement statement = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
                    ResultSet rs = statement.executeQuery("SELECT code FROM products WHERE in_stock = 0");

                    // Main Rows
                    while (rs.next())
                    {
                        HSSFRow main = worksheet.createRow((short) i);
                        HSSFCell code = main.createCell(0);
                        code.setCellValue(rs.getString("code"));
                        i++;
                    }
                }
                catch (SQLException e)
                {
                    JOptionPane.showMessageDialog(ViewEditProducts.this, e.getMessage());
                }
                finally
                {
                    try
                    {
                        con.close();
                    }
                    catch (Exception e)
                    { /* ignored */ }
                }

                // Auto Size Columns
                for (int k = 0; k < 2; k++)
                {
                    worksheet.autoSizeColumn(k);
                    worksheet.setDefaultColumnStyle(i, editableStyle);
                }

                // Row 1
                HSSFRow row1 = worksheet.createRow((short) 0);
                HSSFCell cell = row1.createCell(0);
                cell.setCellValue("Out of Stock Report");
                cell.setCellStyle(style0);

                wb.write(fileOut);
                fileOut.flush();
                fileOut.close();

                JOptionPane.showMessageDialog(ViewEditProducts.this, "Out of Stock Report Created.");
            }
            catch (FileNotFoundException e)
            {
            }
            catch (IOException e)
            {
            }
        }
    }//GEN-LAST:event_OOSReportActionPerformed

    private void btnSalesReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalesReportActionPerformed
        Connection con = db.getConnection();
        try
        {
            String startdate = JOptionPane.showInputDialog("Please enter the start date of Report \nIn format: YYYY-MM-DD").trim();
            String enddate = JOptionPane.showInputDialog("Please enter the end date of Report \nIn format: YYYY-MM-DD").trim();
            String reportName = JOptionPane.showInputDialog("Please give the report a name \nFor example: Nov 30 - Spring Sales").trim();

            Statement statement = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
            ResultSet rs = statement.executeQuery("SELECT products.code, sales_order_details.fromOrder, sales_order_details.fromStock FROM sales_order_details JOIN sales_order ON sales_order_details.ord_num = sales_order.ord_num JOIN products ON sales_order_details.prod_num = products.prod_num WHERE del_date >= '" + startdate + "' AND del_date <= '" + enddate + "'");

            try (FileWriter writer = new FileWriter("S:/Sales & Orders Reports/" + reportName + ".csv"))
            {
                HashMap<String, Integer> map = new HashMap();

                writer.append("Product,Quantity");
                writer.append('\n');

                while (rs.next())
                {
                    String code = rs.getString("code");
                    int quant = rs.getInt("fromOrder") + rs.getInt("fromStock");
                    if (map.containsKey(code))
                    {
                        int num = map.get(code);
                        int newquant = num + quant;

                        map.remove(code);
                        map.put(code, newquant);
                    }
                    else
                    {
                        map.put(code, quant);
                    }
                }

                for (String code : map.keySet())
                {
                    int quant = map.get(code);
                    writer.append(code + "," + String.valueOf(quant) + "\n");
                }

                writer.flush();
            }

            JOptionPane.showMessageDialog(ViewEditProducts.this, new Date().toString().substring(3, 10) + " Report created.");
        }
        catch (SQLException e)
        {
            JOptionPane.showMessageDialog(ViewEditProducts.this, e.getMessage());
        }
        catch (IOException ex)
        {
            Logger.getLogger(ViewEditProducts.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally
        {
            try
            {
                con.close();
            }
            catch (Exception e)
            { /* ignored */ }
        }
    }//GEN-LAST:event_btnSalesReportActionPerformed

    private void btnOrdersReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrdersReportActionPerformed
        Connection con = db.getConnection();
        try
        {
            String startdate = JOptionPane.showInputDialog("Please enter the start date of Report \nIn format: YYYY-MM-DD").trim();
            String enddate = JOptionPane.showInputDialog("Please enter the end date of Report \nIn format: YYYY-MM-DD").trim();
            String reportName = JOptionPane.showInputDialog("Please give the report a name \nFor example: Nov 30 - Spring Orders").trim();

            Statement statement = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
            ResultSet rs = statement.executeQuery("SELECT products.code, purchase_order_details.quantity FROM purchase_order_details JOIN purchase_order ON purchase_order_details.ord_num = purchase_order.ord_num JOIN products ON purchase_order_details.prod_num = products.prod_num WHERE del_date >= '" + startdate + "' AND del_date <= '" + enddate + "'");

            try (FileWriter writer = new FileWriter("S:/Sales & Orders Reports/" + reportName + ".csv"))
            {
                HashMap<String, Integer> map = new HashMap();

                writer.append("Product,Quantity");
                writer.append('\n');

                while (rs.next())
                {
                    String code = rs.getString("code");
                    int quant = rs.getInt("quantity");
                    if (map.containsKey(code))
                    {
                        int num = map.get(code);
                        int newquant = num + quant;

                        map.remove(code);
                        map.put(code, newquant);
                    }
                    else
                    {
                        map.put(code, quant);
                    }
                }

                for (String code : map.keySet())
                {
                    int quant = map.get(code);
                    writer.append(code + "," + String.valueOf(quant) + "\n");
                }

                writer.flush();
            }

            JOptionPane.showMessageDialog(ViewEditProducts.this, new Date().toString().substring(3, 10) + " Report created.");
        }
        catch (SQLException e)
        {
            JOptionPane.showMessageDialog(ViewEditProducts.this, e.getMessage());
        }
        catch (IOException ex)
        {
            Logger.getLogger(ViewEditProducts.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally
        {
            try
            {
                con.close();
            }
            catch (Exception e)
            { /* ignored */ }
        }
    }//GEN-LAST:event_btnOrdersReportActionPerformed

    private void btnChangeCodeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnChangeCodeActionPerformed
    {//GEN-HEADEREND:event_btnChangeCodeActionPerformed

        String code = JOptionPane.showInputDialog("Please input new Product Code for " + fieldProdCode.getText() + ":");
        if (code != null)
        {
            Connection con = db.getConnection();
            try
            {
                Statement statement = con.createStatement();
                db.writeToLog("OVERRIDE PRODUCT CODE " + fieldProdCode.getText());
                sql = "UPDATE products SET code = '" + code + "' WHERE code = '" + fieldProdCode.getText() + "'";
                statement.executeUpdate(sql);
                db.writeToLog(sql);
                db.writeToLog(seperator);

                JOptionPane.showMessageDialog(ViewEditProducts.this, "Product Code of product has been updated.");
                fieldProdCode.setText("");
                btnFindActionPerformed(null);
            }
            catch (SQLException e)
            {
                JOptionPane.showMessageDialog(ViewEditProducts.this, e.getMessage());
            }
            finally
            {
                try
                {
                    con.close();
                }
                catch (Exception e)
                { /* ignored */ }
            }
        }
    }//GEN-LAST:event_btnChangeCodeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton OOSReport;
    private javax.swing.JButton btnChangeCode;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDiscontinue;
    private javax.swing.JButton btnFind;
    private javax.swing.JButton btnOrderReport;
    private javax.swing.JButton btnOrdersReport;
    private javax.swing.JButton btnPurchase;
    private javax.swing.JButton btnQuant;
    private javax.swing.JButton btnSales;
    private javax.swing.JButton btnSalesReport;
    private javax.swing.JButton btnSeason;
    private javax.swing.JButton btnShowSales;
    private javax.swing.JButton btnStock;
    private javax.swing.JButton btnView;
    private javax.swing.JComboBox comboSeason;
    private javax.swing.JTextField fieldProdCode;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JScrollPane scrollPane1;
    private javax.swing.JTable table;
    private javax.swing.JTable table2;
    // End of variables declaration//GEN-END:variables
}
