/*
 * Mayfair Stock Control.
 *
 */
package main.java.order.sales;

import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import javafx.util.Pair;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import static javax.swing.JOptionPane.INFORMATION_MESSAGE;
import static javax.swing.JOptionPane.YES_NO_OPTION;
import javax.swing.table.DefaultTableModel;
import main.java.Database;
import main.java.MayfairConstants;
import static main.java.MayfairConstants.DISPATCH_NOTES_DIR;
import static main.java.MayfairConstants.DISPATCH_NOTE_TEMPLATE;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFDataFormat;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.CellStyle;

/**
 *
 * @author kian_bryen
 */
public class Current extends javax.swing.JInternalFrame
{

    private final Database db = new Database();
    private final JDesktopPane desktop;
    private String sql;

    public Current(JDesktopPane desktop)
    {
        initComponents();
        this.setTitle("Current Sales Orders");
        this.desktop = desktop;

        table.getColumnModel().getColumn(1).setHeaderValue("Customer");
        labelName.setText("Customer Name");

        scrollPane.setVisible(false);
        btnViewSummary.setVisible(false);
        btnEdit.setVisible(false);
        btnCancel.setVisible(false);
        btnMarkDispatched.setVisible(false);
        btnMarkDelivered.setVisible(false);
        btnDispatch.setVisible(false);
        btnExcelSummary.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnViewSummary = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        btnFind = new javax.swing.JButton();
        scrollPane = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        fieldOrderNumber = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        labelName = new javax.swing.JLabel();
        fieldName = new javax.swing.JTextField();
        btnCancel = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnMarkDispatched = new javax.swing.JButton();
        btnMarkDelivered = new javax.swing.JButton();
        btnDispatch = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnExcelSummary = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        jLabel1.setText("View Order");

        btnViewSummary.setBackground(new java.awt.Color(153, 204, 255));
        btnViewSummary.setText("View Summary");
        btnViewSummary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewSummaryActionPerformed(evt);
            }
        });

        btnFind.setText("Find");
        btnFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindActionPerformed(evt);
            }
        });

        scrollPane.setBorder(null);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Number", "", "Ordered", "Expected Delivery", "Total (Â£)", "Dispatched", "Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Boolean.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setColumnSelectionAllowed(true);
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        scrollPane.setViewportView(table);
        table.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        jLabel3.setText("Order Number");

        fieldOrderNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldOrderNumberActionPerformed(evt);
            }
        });

        jLabel4.setText("OR");

        btnCancel.setText("Cancel Order");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit Order");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnMarkDispatched.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMarkDispatchedActionPerformed(evt);
            }
        });

        btnMarkDelivered.setText("Mark Delivered");
        btnMarkDelivered.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMarkDeliveredActionPerformed(evt);
            }
        });

        btnDispatch.setText("Create Dispatch Note");
        btnDispatch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDispatchActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnExcelSummary.setText("Create Summary File");
        btnExcelSummary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcelSummaryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jSeparator2))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(btnFind)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3)
                                            .addComponent(labelName))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(fieldName, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(fieldOrderNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 210, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(btnMarkDispatched)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnMarkDelivered))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(btnExcelSummary, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnDispatch))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(btnCancel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnEdit)))))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnClear)
                        .addGap(47, 47, 47))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnViewSummary)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(fieldOrderNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(btnClear))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelName)
                    .addComponent(fieldName, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnFind)
                .addGap(18, 18, 18)
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnMarkDispatched)
                    .addComponent(btnMarkDelivered))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnViewSummary)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEdit)
                    .addComponent(btnCancel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDispatch)
                    .addComponent(btnExcelSummary))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewSummaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewSummaryActionPerformed
        ViewSalesSummary salesOrder = new ViewSalesSummary(Integer.parseInt(fieldOrderNumber.getText()));
        desktop.add(salesOrder);
        salesOrder.show();
    }//GEN-LAST:event_btnViewSummaryActionPerformed

    private void btnFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionPerformed
        try (Statement statement = db.getConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE))
        {
            ResultSet rs;
            if (!fieldOrderNumber.getText().equals(""))
            {
                rs = statement.executeQuery("SELECT sales_order.ord_num, customers.name, sales_order.ord_date, sales_order.del_date, sales_order.price, sales_order.dispatched, sales_order.dispatched_date FROM sales_order INNER JOIN customers ON sales_order.cust_num=customers.cust_num WHERE sales_order.ord_num LIKE '%" + fieldOrderNumber.getText() + "%' and delivered = false ORDER BY sales_order.ord_num DESC");
            }
            else
            {
                rs = statement.executeQuery("SELECT sales_order.ord_num, customers.name, sales_order.ord_date, sales_order.del_date, sales_order.price, sales_order.dispatched, sales_order.dispatched_date FROM sales_order INNER JOIN customers ON sales_order.cust_num=customers.cust_num WHERE customers.name LIKE '%" + fieldName.getText() + "%' and delivered = false ORDER BY sales_order.ord_num DESC");
            }

            scrollPane.setVisible(true);
            getContentPane().validate();
            getContentPane().repaint();

            while (table.getRowCount() > 0)
            {
                ((DefaultTableModel) table.getModel()).removeRow(0);
            }

            int columns = rs.getMetaData().getColumnCount();

            while (rs.next())
            {
                Object[] row = new Object[columns];

                for (int i = 1; i <= columns; i++)
                {
                    row[i - 1] = rs.getObject(i);
                }

                ((DefaultTableModel) table.getModel()).insertRow(rs.getRow() - 1, row);
            }

            btnViewSummary.setVisible(false);
            btnEdit.setVisible(false);
            btnCancel.setVisible(false);
            btnMarkDispatched.setVisible(false);
            btnMarkDelivered.setVisible(false);
            btnDispatch.setVisible(false);
            btnExcelSummary.setVisible(false);
        }
        catch (SQLException e)
        {
            JOptionPane.showMessageDialog(Current.this, e.getMessage());
        }
    }//GEN-LAST:event_btnFindActionPerformed

    private void fieldOrderNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldOrderNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldOrderNumberActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        fieldOrderNumber.setText(String.valueOf((int) table.getValueAt(table.getSelectedRow(), 0)));
        fieldName.setText((String) table.getValueAt(table.getSelectedRow(), 1));
        btnViewSummary.setVisible(true);
        btnEdit.setVisible(true);
        btnCancel.setVisible(true);
        btnMarkDispatched.setVisible(true);
        btnExcelSummary.setVisible(true);
        if ((boolean) table.getValueAt(table.getSelectedRow(), 5))
        {
            btnMarkDispatched.setText("Mark Undispatched");
        }
        else
        {
            btnMarkDispatched.setText("Mark Dispatched");
        }
        btnMarkDelivered.setVisible(true);
        btnDispatch.setVisible(true);

    }//GEN-LAST:event_tableMouseClicked

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        int selectedOption = JOptionPane.showConfirmDialog(null, "Are you sure you want to cancel this order?", "Cancel order", JOptionPane.YES_NO_OPTION);
        if (selectedOption == JOptionPane.YES_OPTION)
        {
            int ord_num = (int) table.getValueAt(table.getSelectedRow(), 0);

            try (Connection con = db.getConnection())
            {
                Statement statement = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
                Statement statement2 = con.createStatement();
                ResultSet rs;

                db.writeToLog("CANCEL SALES ORDER " + ord_num);
                ArrayList<Integer> prod_nums = new ArrayList();
                rs = statement.executeQuery("SELECT prod_num FROM sales_order_details WHERE ord_num = " + ord_num);
                while (rs.next())
                {
                    prod_nums.add(rs.getInt("prod_num"));
                }

                for (int prod_num : prod_nums)
                {
                    rs = statement.executeQuery("SELECT in_stock, in_order FROM products WHERE prod_num = " + prod_num);
                    rs.next();

                    int in_stock = rs.getInt("in_stock");
                    int in_order = rs.getInt("in_order");

                    rs = statement.executeQuery("SELECT fromStock, fromOrder FROM sales_order_details WHERE prod_num = " + prod_num + " AND ord_num = " + ord_num);
                    rs.next();
                    int fromStock = rs.getInt("fromStock");
                    int fromOrder = rs.getInt("fromOrder");

                    int newStock = in_stock + fromStock;
                    int newOrder = in_order + fromOrder;

                    // UPDATE PRODUCTS 
                    sql = "UPDATE products SET in_stock = " + newStock + ", in_order = " + newOrder + " WHERE prod_num = " + prod_num;
                    statement2.executeUpdate(sql);
                    db.writeToLog(sql);

                    // UPDATE PURCHASE_SALES_ORDER
                    ArrayList<Pair<String, Integer>> purchaseOrders = new ArrayList();
                    ArrayList<String> codes = new ArrayList();
                    rs = statement.executeQuery("SELECT code, po_num, quantity FROM purchase_sales_order WHERE prod_num = " + prod_num + " AND so_num = " + ord_num);
                    while (rs.next())
                    {
                        int quantity = rs.getInt("quantity");
                        String orderNum = rs.getString("po_num");
                        purchaseOrders.add(new Pair(orderNum, quantity));
                        codes.add(rs.getString("code"));
                    }
                    for (String code : codes)
                    {
                        sql = "DELETE FROM purchase_sales_order WHERE code = " + code;
                        statement2.executeUpdate(sql);
                        db.writeToLog(sql);
                    }

                    // UPDATE PURCHASE ORDER DETAILS
                    for (Pair<String, Integer> purchaseOrder : purchaseOrders)
                    {
                        rs = statement.executeQuery("SELECT avaliable FROM purchase_order_details WHERE prod_num = " + prod_num + " AND ord_num = '" + purchaseOrder.getKey() + "'");
                        rs.next();
                        int avaliable = rs.getInt("avaliable");

                        sql = "UPDATE purchase_order_details SET avaliable = " + (avaliable + purchaseOrder.getValue()) + " WHERE prod_num = " + prod_num + " AND ord_num = '" + purchaseOrder.getKey() + "'";
                        statement2.executeUpdate(sql);
                        db.writeToLog(sql);
                    }

                    // DELETE FROM SALES ORDER DETAILS
                    sql = "DELETE FROM sales_order_details WHERE prod_num = " + prod_num + " AND ord_num = " + ord_num;
                    statement2.executeUpdate(sql);
                    db.writeToLog(sql);

                }

                // DELETE FROM SALES ORDER
                sql = "DELETE FROM sales_order WHERE ord_num = " + ord_num;
                statement2.executeUpdate(sql);
                db.writeToLog(sql);
                db.writeToLog(MayfairConstants.LOG_SEPERATOR);

                JOptionPane.showMessageDialog(Current.this, "Order cancelled");
                fieldOrderNumber.setText("");
                fieldName.setText("");
                btnFindActionPerformed(null);

            }
            catch (SQLException e)
            {
                JOptionPane.showMessageDialog(Current.this, e.getMessage());
            }
        }
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        EditMain salesOrder = new EditMain(Integer.parseInt(fieldOrderNumber.getText()), desktop);
        desktop.add(salesOrder);
        salesOrder.show();

        this.dispose();
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnMarkDispatchedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMarkDispatchedActionPerformed
        int selectedOption;
        if (btnMarkDispatched.getText().equals("Mark Dispatched"))
        {
            selectedOption = JOptionPane.showConfirmDialog(null, "Are you sure you want to Mark as Dispatched?", "Mark Dispatched", JOptionPane.YES_NO_OPTION);
        }
        else
        {
            selectedOption = JOptionPane.showConfirmDialog(null, "Are you sure you want to Mark as Undispatched?", "Mark Undispatched", JOptionPane.YES_NO_OPTION);
        }

        if (selectedOption == JOptionPane.YES_OPTION)
        {
            try (Statement statement = db.getConnection().createStatement())
            {
                if (btnMarkDispatched.getText().equals("Mark Dispatched"))
                {
//                    // CHECK FOR UNDELIVERED PURCHASE ORDER
//                    StringBuilder message = new StringBuilder();
//                    boolean onPO = false;
//                    ResultSet rs = statement2.executeQuery("SELECT po_num, quantity FROM purchase_sales_order WHERE so_num = " + fieldOrderNumber.getText());
//                    while (rs.next())
//                    {
//                        onPO = true;
//                        message.append("Order Num - ").append(rs.getString("po_num")).append(" Product Number - ").append(rs.getString("po_num")).append(" Quantity - ").append(rs.getInt("quantity")).append("\n");
//                    }
//
//                    if (onPO)
//                    {
//                        JOptionPane.showMessageDialog(Current.this, "Cannot mark as dispatched as Order takes from the following undelivered Purchase Order(s):\n" + message.toString());
//                    }
//                    else
//                    {
                    db.writeToLog("MARK DISPATCHED " + fieldOrderNumber.getText());
                    sql = "UPDATE sales_order SET dispatched = true, dispatched_date = CURRENT_TIMESTAMP WHERE ord_num = " + fieldOrderNumber.getText();
                    statement.executeUpdate(sql);
                    db.writeToLog(sql);
                    db.writeToLog(MayfairConstants.LOG_SEPERATOR);

                    JOptionPane.showMessageDialog(Current.this, "State of order has been updated.");
                    fieldOrderNumber.setText("");
                    fieldName.setText("");
//                    }
                }
                else
                {
                    db.writeToLog("MARK UNDISPATCHED " + fieldOrderNumber.getText());
                    sql = "UPDATE sales_order SET dispatched = false, dispatched_date = null WHERE ord_num = " + fieldOrderNumber.getText();
                    statement.executeUpdate(sql);
                    db.writeToLog(sql);
                    db.writeToLog(MayfairConstants.LOG_SEPERATOR);

                    JOptionPane.showMessageDialog(Current.this, "State of order has been updated.");
                    fieldOrderNumber.setText("");
                    fieldName.setText("");
                }

                btnFindActionPerformed(null);
            }
            catch (SQLException e)
            {
                JOptionPane.showMessageDialog(Current.this, e.getMessage());
            }
        }
    }//GEN-LAST:event_btnMarkDispatchedActionPerformed

    private void btnMarkDeliveredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMarkDeliveredActionPerformed
        int selectedOption = JOptionPane.showConfirmDialog(null, "Are you sure you want to Mark as Delivered?", "Mark Delivered", JOptionPane.YES_NO_OPTION);
        if (selectedOption == JOptionPane.YES_OPTION)
        {
            boolean mark = true;

            if (mark)
            {
                try (Connection con = db.getConnection())
                {
                    Statement statement = con.createStatement();
                    Statement statement2 = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);

                    // CHECK FOR UNDELIVERED PURCHASE ORDER
                    StringBuilder message = new StringBuilder();
                    boolean onPO = false;
                    ResultSet rs = statement2.executeQuery("SELECT po_num, prod_num, quantity FROM purchase_sales_order WHERE so_num = " + fieldOrderNumber.getText());
                    while (rs.next())
                    {
                        onPO = true;
                        message.append("Order Num - ").append(rs.getString("po_num")).append(" Product Number - ").append(rs.getString("prod_num")).append(" Quantity - ").append(rs.getInt("quantity")).append("\n");
                    }

                    if (onPO)
                    {
                        JOptionPane.showMessageDialog(Current.this, "Cannot mark as delivered as Order takes from the following undelivered Purchase Order(s):\n" + message.toString());
                    }
                    else
                    {
                        sql = ("UPDATE sales_order SET delivered = true, dispatched = true, del_date = CURRENT_TIMESTAMP WHERE ord_num = " + fieldOrderNumber.getText());
                        statement.executeUpdate(sql);

                        db.writeToLog("MARK SALES DELIVERED " + fieldOrderNumber.getText());
                        db.writeToLog(sql);

                        db.writeToLog(MayfairConstants.LOG_SEPERATOR);
                        fieldOrderNumber.setText("");
                        fieldName.setText("");
                    }
                    btnFindActionPerformed(null);
                }
                catch (SQLException e)
                {
                    JOptionPane.showMessageDialog(Current.this, e.getMessage());
                }
            }
        }
    }//GEN-LAST:event_btnMarkDeliveredActionPerformed

    private void btnDispatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDispatchActionPerformed
        int ordNum = (int) table.getValueAt(table.getSelectedRow(), 0);
        int selectedOption = JOptionPane.showConfirmDialog(null, "<html> Are you sure you want to create a dispatch note for order <b>" + ordNum + "</b>?", "Dispatch Note", YES_NO_OPTION);
        if (selectedOption == JOptionPane.YES_OPTION)
        {
            String custName = (String) table.getValueAt(table.getSelectedRow(), 1);
            String custRef = "";
            String custEmail = "";
            String custTel = "";
            String custCountry = "";
            String temp[];
            String ordDate = "";
            String delDate = "";
            String address[] = new String[5];
            String postCode = "";
            String delIns = "";
            Boolean pro;
            String instructions = "";

            try (Statement statement = db.getConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE))
            {
                ResultSet rs = statement.executeQuery("SELECT reference, del_address, country, email, tel, delivery, proforma FROM customers WHERE name = '" + custName + "'");
                rs.next();
                // Customer
                custRef = rs.getString("reference");
                custEmail = rs.getString("email");
                custTel = rs.getString("tel");
                custCountry = rs.getString("country");
                delIns = rs.getString("delivery");
                pro = rs.getBoolean("proforma");
                // Address
                temp = rs.getString("del_address").split(",");
                int length = temp.length;
                postCode = temp[length - 1];
                System.arraycopy(temp, 0, address, 0, length - 1);
                // Date
                rs = statement.executeQuery("SELECT ord_date, del_date FROM sales_order WHERE ord_num = " + ordNum);
                rs.next();
                temp = rs.getString("ord_date").split(" ");
                ordDate = temp[0];
                delDate = rs.getString("del_date");
                // Delivery Instructions
                if (pro)
                {
                    instructions = delDate + " - Please pick and pack. Await delivery instructions.";
                }
                else
                {
                    instructions = delDate + " - " + delIns;
                }
            }
            catch (SQLException e)
            {
                JOptionPane.showMessageDialog(Current.this, "<html> Error while creating dispatch note, please try again.\n<html> <i> If error continues to happen please contact Kian. </i>", "Error", ERROR_MESSAGE);
                JOptionPane.showMessageDialog(Current.this, e);
            }
            
            String fileName = DISPATCH_NOTES_DIR + "RIF ORDER " + ordNum + " - " + custRef + " " + ordDate + ".xls";
            try (FileOutputStream fileOut = new FileOutputStream(fileName))
            {
                HSSFWorkbook wb = db.getHSSFWorkbook(DISPATCH_NOTE_TEMPLATE);
                HSSFSheet worksheet = wb.getSheet("Order Details");
                
                HSSFDataFormat format = wb.createDataFormat();
                HSSFCellStyle numberStyle = wb.createCellStyle();
                numberStyle.setDataFormat(format.getFormat("0"));

                int i = 1;
                try (Statement statement = db.getConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE))
                {
                    ResultSet rs = statement.executeQuery("SELECT products.code, sales_order_details.quantity FROM sales_order_details JOIN products ON sales_order_details.prod_num = products.prod_num WHERE sales_order_details.ord_num = " + ordNum);
                    // Main Rows
                    while (rs.next())
                    {
                        HSSFRow main = worksheet.createRow(i++);
                         
                        HSSFCell customer = main.createCell(0);
                        customer.setCellValue("MTC");
                        
                        HSSFCell prefix = main.createCell(1);
                        prefix.setCellValue("J");

                        HSSFCell orderRef = main.createCell(2);
                        orderRef.setCellValue(ordNum);
                        orderRef.setCellStyle(numberStyle);
                        
                        HSSFCell customerRef = main.createCell(3);
                        customerRef.setCellValue(custRef);
                        
                        HSSFCell addName = main.createCell(4);
                        addName.setCellValue(custName);
                        
                        HSSFCell add1 = main.createCell(5);
                        add1.setCellValue(address[0]);

                        HSSFCell add2 = main.createCell(6);
                        add2.setCellValue(address[1]);

                        HSSFCell add3 = main.createCell(7);
                        add3.setCellValue(address[2]);

                        HSSFCell add4 = main.createCell(8);
                        add4.setCellValue(address[3]);
                        
                        // add5
                        
                        HSSFCell postcode = main.createCell(10);
                        postcode.setCellValue(postCode);
                        
                        HSSFCell country = main.createCell(11);
                        country.setCellValue(custCountry.isEmpty() ? "GB" : custCountry);
                        
                        HSSFCell ins = main.createCell(12);
                        ins.setCellValue(instructions);
                        
                        HSSFCell lineNum = main.createCell(13);
                        lineNum.setCellValue(i - 1);
                        lineNum.setCellStyle(numberStyle);
                        
                        HSSFCell prod = main.createCell(14);
                        prod.setCellValue(rs.getString("code"));
                        
                        HSSFCell quant = main.createCell(15);
                        quant.setCellValue(String.valueOf(rs.getInt("quantity")));
                        quant.setCellStyle(numberStyle);
                        
                        HSSFCell email = main.createCell(16);
                        email.setCellValue(custEmail);
                        
                        HSSFCell tell = main.createCell(17);
                        tell.setCellValue(custTel);
                    }
                }
                catch (Exception e)
                {
                    JOptionPane.showMessageDialog(Current.this, "<html> Error while creating dispatch note, please try again.\n<html> <i> If error continues to happen please contact Kian. </i>", "Error", ERROR_MESSAGE);
                    JOptionPane.showMessageDialog(Current.this, e.getStackTrace());
                }

//                // Quant total
//                i++;
//                HSSFRow quantRow = worksheet.getRow(i);
//                HSSFCell quantCell = quantRow.getCell(16);
//                quantCell.setCellValue(String.valueOf(total));

                // Auto Size Columns
                for (int k = 0; k < 17; k++)
                {
                    worksheet.autoSizeColumn(k);
                }
                
                wb.write(fileOut);
                fileOut.flush();
                fileOut.close();

                JOptionPane.showMessageDialog(Current.this, "<html> <b>Dispatch note created successfully.</b> \n<html> <i> " + fileName + " </i>", "Dispatch Note Created", INFORMATION_MESSAGE);
            }
            catch (IOException e) 
            {
                JOptionPane.showMessageDialog(Current.this, "<html> Error while creating dispatch note, please try again.\n<html> <i> If error continues to happen please contact Kian. </i>", "Error", ERROR_MESSAGE);
                JOptionPane.showMessageDialog(Current.this, e);
            }
        }
    }//GEN-LAST:event_btnDispatchActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        fieldOrderNumber.setText("");
        fieldName.setText("");
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnExcelSummaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcelSummaryActionPerformed
        int ordNum = (int) table.getValueAt(table.getSelectedRow(), 0);
        int selectedOption = JOptionPane.showConfirmDialog(null, "<html> Are you sure you want to create an excel summary for order <b>" + ordNum + "</b>?", "Excel Summary", YES_NO_OPTION);
        if (selectedOption == JOptionPane.YES_OPTION)
        {
            int cust_num;
            String name;
            String del_date;
            double price;

            try (Statement statement = db.getConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE))
            {
                ResultSet rs;

                rs = statement.executeQuery("SELECT cust_num, del_date, price FROM sales_order WHERE ord_num = " + ordNum);
                rs.next();
                cust_num = rs.getInt("cust_num");
                String[] date = rs.getString("del_date").split(" ");
                del_date = date[0];

                price = rs.getDouble("price");

                rs = statement.executeQuery("SELECT name, del_address FROM customers WHERE cust_num = " + cust_num);
                rs.next();
                name = rs.getString("name");

                String fileName = "S://SALES ORDERS/SALES ORDER - " + ordNum + ".xls";
                try (FileOutputStream fileOut = new FileOutputStream(fileName)) 
                {
                    HSSFWorkbook wb = new HSSFWorkbook();
                    HSSFSheet worksheet = wb.createSheet(String.valueOf(ordNum));
                    CellStyle editableStyle = wb.createCellStyle();
                    editableStyle.setLocked(false);
                    
                    HSSFRow row = worksheet.createRow((short) 0);
                    HSSFCell cell = row.createCell(0);
                    cell.setCellValue("Order Number");
                    cell = row.createCell(1);
                    cell.setCellValue(ordNum);
                    
                    row = worksheet.createRow((short) 1);
                    cell = row.createCell(0);
                    cell.setCellValue("Delivery Date");
                    cell = row.createCell(1);
                    cell.setCellValue(del_date);
                    
                    row = worksheet.createRow((short) 3);
                    cell = row.createCell(0);
                    cell.setCellValue("Customer Number");
                    cell = row.createCell(1);
                    cell.setCellValue(cust_num);
                    
                    row = worksheet.createRow((short) 4);
                    cell = row.createCell(0);
                    cell.setCellValue("Customer Name");
                    cell = row.createCell(1);
                    cell.setCellValue(name);
                    
                    row = worksheet.createRow((short) 6);
                    cell = row.createCell(0);
                    cell.setCellValue("Product Code");
                    cell = row.createCell(1);
                    cell.setCellValue("Quantity");
                    
                    int i = 7;
                    rs = statement.executeQuery("SELECT products.code, sales_order_details.quantity FROM sales_order_details JOIN products ON sales_order_details.prod_num=products.prod_num WHERE sales_order_details.ord_num = " + ordNum);
                    while (rs.next())
                    {
                        String code = rs.getString("code");
                        int quantity = rs.getInt("quantity");
                        
                        row = worksheet.createRow((short) i);
                        cell = row.createCell(0);
                        cell.setCellValue(code);
                        cell = row.createCell(1);
                        cell.setCellValue(quantity);
                        
                        i++;
                    }
                    
                    row = worksheet.createRow((short) i + 1);
                    cell = row.createCell(0);
                    cell.setCellValue("Order Price");
                    cell = row.createCell(1);
                    cell.setCellValue(price);
                    
                    rs = statement.executeQuery("SELECT SUM(quantity) as total FROM sales_order_details WHERE ord_num = " + ordNum);
                    rs.next();
                    
                    row = worksheet.createRow((short) i + 2);
                    cell = row.createCell(0);
                    cell.setCellValue("Total Units");
                    cell = row.createCell(1);
                    cell.setCellValue(rs.getInt("total"));
                    
                    // Auto Size Columns
                    for (int k = 0; k < 2; k++)
                    {
                        worksheet.autoSizeColumn(k);
                        worksheet.setDefaultColumnStyle(i + 4, editableStyle);
                    }
                    
                    wb.write(fileOut);
                    fileOut.flush();
                    
                    JOptionPane.showMessageDialog(Current.this, "<html> <b>Excel summary created successfully.</b> \n<html> <i> " + fileName + " </i>", "Excel Summary Created", INFORMATION_MESSAGE);
                }
            }
            catch (SQLException | IOException e)
            {
                JOptionPane.showMessageDialog(Current.this, "<html> Error while creating dispatch note, please try again.\n<html> <i> If error continues to happen please contact Kian. </i>", "Error", ERROR_MESSAGE);
                JOptionPane.showMessageDialog(Current.this, e);
            }
        }
    }//GEN-LAST:event_btnExcelSummaryActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDispatch;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnExcelSummary;
    private javax.swing.JButton btnFind;
    private javax.swing.JButton btnMarkDelivered;
    private javax.swing.JButton btnMarkDispatched;
    private javax.swing.JButton btnViewSummary;
    private javax.swing.JTextField fieldName;
    private javax.swing.JTextField fieldOrderNumber;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel labelName;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
