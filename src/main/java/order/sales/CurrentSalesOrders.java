/*
 * Mayfair Stock Control.
 *
 */
package main.java.order.sales;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Map;
import javafx.util.Pair;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.INFORMATION_MESSAGE;
import main.java.MayfairStatic;
import static main.java.MayfairStatic.CUSTOMERS_TABLE;
import static main.java.MayfairStatic.CUSTOMER_CUSTNUM;
import static main.java.MayfairStatic.CUSTOMER_NAME;
import static main.java.MayfairStatic.POD_AVALIABLE;
import static main.java.MayfairStatic.POD_ORDNUM;
import static main.java.MayfairStatic.POD_PRODNUM;
import static main.java.MayfairStatic.PRODUCTS_TABLE;
import static main.java.MayfairStatic.PRODUCT_CODE;
import static main.java.MayfairStatic.PRODUCT_INORDER;
import static main.java.MayfairStatic.PRODUCT_INSTOCK;
import static main.java.MayfairStatic.PRODUCT_PRODNUM;
import static main.java.MayfairStatic.PS_PONUM;
import static main.java.MayfairStatic.PS_PRODNUM;
import static main.java.MayfairStatic.PS_QUANTITY;
import static main.java.MayfairStatic.PS_SONUM;
import static main.java.MayfairStatic.PURCHASE_ORDER_DETAILS_TABLE;
import static main.java.MayfairStatic.PURCHASE_SALES_ORDER_TABLE;
import static main.java.MayfairStatic.SALES_ORDER_DETAILS_TABLE;
import static main.java.MayfairStatic.SALES_ORDER_TABLE;
import static main.java.MayfairStatic.SOD_FROMORDER;
import static main.java.MayfairStatic.SOD_FROMSTOCK;
import static main.java.MayfairStatic.SOD_ORDNUM;
import static main.java.MayfairStatic.SOD_PRODNUM;
import static main.java.MayfairStatic.SO_CUSTNUM;
import static main.java.MayfairStatic.SO_DELDATE;
import static main.java.MayfairStatic.SO_DELIVERED;
import static main.java.MayfairStatic.SO_DISPATCHDATE;
import static main.java.MayfairStatic.SO_DISPATCHED;
import static main.java.MayfairStatic.SO_ORDDATE;
import static main.java.MayfairStatic.SO_ORDNUM;
import static main.java.MayfairStatic.SO_PRICE;
import static main.java.MayfairStatic.SO_TOTALUNITS;
import main.java.report.ReportGenerator;

/**
 *
 * @author kian_bryen
 */
public class CurrentSalesOrders extends javax.swing.JInternalFrame
{

    private final JDesktopPane desktop;

    public CurrentSalesOrders(JDesktopPane desktop)
    {
        setUpGUI();
        this.desktop = desktop;
        btnFindActionPerformed(null);
    }

    private void setUpGUI()
    {
        initComponents();
        enableButtons(false);
        table.setAutoCreateRowSorter(true);
        MayfairStatic.addDateSorter(table, new int[]
        {
            2, 3, 7
        });
    }

    private void enableButtons(boolean enable)
    {
        btnViewSummary.setVisible(enable);
        btnEdit.setVisible(enable);
        btnCancel.setVisible(enable);
        btnMark.setVisible(enable);
        btnMarkDelivered.setVisible(enable);
        btnDispatch.setVisible(enable);
        btnSummaryReport.setVisible(enable);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jLabel1 = new javax.swing.JLabel();
        btnViewSummary = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        btnFind = new javax.swing.JButton();
        scrollPane = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        fieldOrderNumber = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        labelName = new javax.swing.JLabel();
        fieldName = new javax.swing.JTextField();
        btnCancel = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnMark = new javax.swing.JButton();
        btnMarkDelivered = new javax.swing.JButton();
        btnDispatch = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnSummaryReport = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Current Sales Orders");

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        jLabel1.setText("Sales Orders");

        btnViewSummary.setBackground(new java.awt.Color(153, 204, 255));
        btnViewSummary.setText("View Summary");
        btnViewSummary.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnViewSummaryActionPerformed(evt);
            }
        });

        btnFind.setText("Find");
        btnFind.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnFindActionPerformed(evt);
            }
        });

        scrollPane.setBorder(null);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String []
            {
                "Number", "Customer", "Ordered", "Expected Delivery", "Total Units", "Total (Â£)", "Dispatched", "Dispatched Date"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Float.class, java.lang.Boolean.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        table.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                tableMouseClicked(evt);
            }
        });
        scrollPane.setViewportView(table);
        table.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        jLabel3.setText("Order Number");

        jLabel4.setText("OR");

        labelName.setText("Customer Name");

        btnCancel.setText("Cancel Order");
        btnCancel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnCancelActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit Order");
        btnEdit.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnEditActionPerformed(evt);
            }
        });

        btnMark.setText("Mark");
        btnMark.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnMarkActionPerformed(evt);
            }
        });

        btnMarkDelivered.setText("Mark Delivered");
        btnMarkDelivered.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnMarkDeliveredActionPerformed(evt);
            }
        });

        btnDispatch.setText("Create Dispatch Note");
        btnDispatch.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnDispatchActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnClearActionPerformed(evt);
            }
        });

        btnSummaryReport.setText("Create Summary Report");
        btnSummaryReport.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnSummaryReportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPane, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jSeparator2))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnMark)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnMarkDelivered))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnSummaryReport, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDispatch))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnCancel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnEdit))
                            .addComponent(btnViewSummary, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(fieldOrderNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(labelName)
                                .addGap(18, 18, 18)
                                .addComponent(fieldName, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnFind)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnClear)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(fieldOrderNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelName)
                    .addComponent(fieldName, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(btnFind)
                    .addComponent(btnClear))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnMark)
                    .addComponent(btnMarkDelivered))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnViewSummary)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEdit)
                    .addComponent(btnCancel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDispatch)
                    .addComponent(btnSummaryReport))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewSummaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewSummaryActionPerformed
        ViewSalesOrderSummary jFrame = new ViewSalesOrderSummary(Integer.parseInt(fieldOrderNumber.getText()));
        desktop.add(jFrame);
        jFrame.show();
    }//GEN-LAST:event_btnViewSummaryActionPerformed

    private void btnFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionPerformed
        try (Statement statement = MayfairStatic.getConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE))
        {
            String sql = "SELECT " + SO_ORDNUM + ", "
                    + CUSTOMER_NAME + ", "
                    + MayfairStatic.sqlDateFormat(SO_ORDDATE) + ", "
                    + MayfairStatic.sqlDateFormat(SO_DELDATE) + ", "
                    + SO_TOTALUNITS + ", "
                    + SO_PRICE + ", "
                    + SO_DISPATCHED + ", "
                    + MayfairStatic.sqlDateFormat(SO_DISPATCHDATE) + " "
                    + "FROM " + SALES_ORDER_TABLE + " "
                    + "JOIN " + CUSTOMERS_TABLE + " "
                    + "ON " + SO_CUSTNUM + "=" + CUSTOMER_CUSTNUM + " "
                    + "WHERE " + SO_DELIVERED + " = false ";
            if (fieldOrderNumber.getText().isEmpty())
            {
                sql += "AND " + CUSTOMER_NAME + " LIKE '%" + fieldName.getText() + "%' ";
            }
            else
            {
                sql += "AND " + SO_ORDNUM + " LIKE '%" + fieldOrderNumber.getText() + "%' ";
            }
            sql += "ORDER BY " + SO_DELDATE + ", " + SO_ORDNUM + " DESC";

            MayfairStatic.fillTable(table, statement.executeQuery(sql));
            enableButtons(false);
        }
        catch (Exception ex)
        {
            MayfairStatic.outputMessage(this, ex);
        }
    }//GEN-LAST:event_btnFindActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        fieldOrderNumber.setText(String.valueOf((int) table.getValueAt(table.getSelectedRow(), 0)));
        fieldName.setText(String.valueOf(table.getValueAt(table.getSelectedRow(), 1)));
        if ((boolean) table.getValueAt(table.getSelectedRow(), 6))
        {
            btnMark.setText("Mark Undispatched");
        }
        else
        {
            btnMark.setText("Mark Dispatched");
        }
        enableButtons(true);
    }//GEN-LAST:event_tableMouseClicked

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        int ord_num = (int) table.getValueAt(table.getSelectedRow(), 0);
        if (MayfairStatic.outputConfirm(this, "Cancel Order", "Are you sure you want to cancel order " + ord_num + "?") == JOptionPane.YES_OPTION)
        {
            try (Statement selectStatement = MayfairStatic.getConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE))
            {
                Map<Integer, Pair<Integer, Integer>> productCounts = new HashMap();
                ResultSet rs = selectStatement.executeQuery("SELECT " + SOD_PRODNUM + ", " 
                        + SOD_FROMSTOCK + ", " 
                        + SOD_FROMORDER + ", " 
                        + PRODUCT_INSTOCK + ", " 
                        + PRODUCT_INORDER + " "
                        + "FROM " + SALES_ORDER_DETAILS_TABLE + " "
                        + "JOIN " + PRODUCTS_TABLE + " "
                        + "ON " + SOD_PRODNUM + "=" + PRODUCT_PRODNUM + " "
                        + "WHERE " + SOD_ORDNUM + " = " + ord_num);
                while (rs.next())
                {
                    int in_stock = rs.getInt(PRODUCT_INSTOCK) + rs.getInt(SOD_FROMSTOCK);
                    int in_order = rs.getInt(PRODUCT_INORDER) + rs.getInt(SOD_FROMORDER);
                    productCounts.put(rs.getInt(SOD_PRODNUM), new Pair(in_stock, in_order));
                }

                Map<String, Pair<Integer, Integer>> purchaseOrders = new HashMap();
                rs = selectStatement.executeQuery("SELECT " + PS_PONUM + ", " 
                        + PS_PRODNUM + ", " 
                        + PS_QUANTITY + ", " 
                        + POD_AVALIABLE + " "
                        + "FROM " + PURCHASE_SALES_ORDER_TABLE + " "
                        + "JOIN " + PURCHASE_ORDER_DETAILS_TABLE + " "
                        + "ON " + PS_PONUM + "=" + POD_ORDNUM + ""
                        + "WHERE " + PS_SONUM + " = " + ord_num);
                while (rs.next())
                {
                    int avaliable = rs.getInt(POD_AVALIABLE) + rs.getInt(PS_QUANTITY);
                    purchaseOrders.put(rs.getString(PS_PONUM), new Pair(rs.getInt(PS_PRODNUM), avaliable));
                }

                try (Statement updateStatement = MayfairStatic.getConnection().createStatement())
                {
                    MayfairStatic.writeToLog("CANCEL SALES ORDER " + ord_num);
                    String sql;

                    // UPDATE PRODUCTS 
                    for (Map.Entry<Integer, Pair<Integer, Integer>> entry : productCounts.entrySet())
                    {
                        sql = "UPDATE " + PRODUCTS_TABLE + " "
                                + "SET " + PRODUCT_INSTOCK + " = " + entry.getValue().getKey() + ", "
                                + PRODUCT_INORDER + " = " + entry.getValue().getValue() + " "
                                + "WHERE " + PRODUCT_PRODNUM + " = " + entry.getKey();
                        updateStatement.executeUpdate(sql);
                        MayfairStatic.writeToLog(sql);
                    }

                    // DELETE FROM PURCHASE_SALES_ORDER
                    sql = "DELETE FROM " + PURCHASE_SALES_ORDER_TABLE + " WHERE " + PS_SONUM + " = " + ord_num;
                    updateStatement.executeUpdate(sql);
                    MayfairStatic.writeToLog(sql);

                    // UPDATE PURCHASE ORDER DETAILS
                    for (Map.Entry<String, Pair<Integer, Integer>> entry : purchaseOrders.entrySet())
                    {
                        sql = "UPDATE " + PURCHASE_ORDER_DETAILS_TABLE + " "
                                + "SET " + POD_AVALIABLE + " = " + entry.getValue().getValue() + " "
                                + "WHERE " + POD_PRODNUM + " = " + entry.getValue().getKey() + " "
                                + "AND " + POD_ORDNUM + " = '" + entry.getKey() + "'";
                        updateStatement.executeUpdate(sql);
                        MayfairStatic.writeToLog(sql);
                    }

                    // DELETE FROM SALES ORDER DETAILS
                    sql = "DELETE FROM " + SALES_ORDER_DETAILS_TABLE + " WHERE " + SOD_ORDNUM + " = " + ord_num;
                    updateStatement.executeUpdate(sql);
                    MayfairStatic.writeToLog(sql);

                    // DELETE FROM SALES ORDER
                    sql = "DELETE FROM " + SALES_ORDER_TABLE + " WHERE " + SO_ORDNUM + " = " + ord_num;
                    updateStatement.executeUpdate(sql);
                    MayfairStatic.writeToLog(sql);
                    MayfairStatic.writeToLog(MayfairStatic.LOG_SEPERATOR);

                    MayfairStatic.outputMessage(this, "Order Cancelled", "Order number " + ord_num + " cancelled.", INFORMATION_MESSAGE);
                    btnClearActionPerformed(null);
                    btnFindActionPerformed(null);
                }
            }
            catch (Exception ex)
            {
                MayfairStatic.outputMessage(this, ex);
            }
        }
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        EditSalesOrderStep1 jFrame = new EditSalesOrderStep1(Integer.parseInt(fieldOrderNumber.getText()), desktop);
        desktop.add(jFrame);
        jFrame.show();
        this.dispose();
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnMarkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMarkActionPerformed
        String status = btnMark.getText().substring(btnMark.getText().indexOf(' ') + 1);
        if (MayfairStatic.outputConfirm(this, "Mark " + status, "Are you sure you want to Mark as " + status) == JOptionPane.YES_OPTION)
        {
            try (Statement statement = MayfairStatic.getConnection().createStatement())
            {
                String ord_num = fieldOrderNumber.getText();
                String sql = "UPDATE " + SALES_ORDER_TABLE + " ";
                if (status.equals("Dispatched"))
                {
                    sql += "SET " + SO_DISPATCHED + " = true, "
                            + SO_DISPATCHDATE + " = CURRENT_TIMESTAMP ";
                }
                else
                {
                    sql += "SET " + SO_DISPATCHED + " = false, "
                            + SO_DISPATCHDATE + " = null ";
                }
                sql += "WHERE " + SO_ORDNUM + " = " + ord_num;
                statement.executeUpdate(sql);

                MayfairStatic.writeToLog("MARK " + status.toUpperCase() + " " + ord_num);
                MayfairStatic.writeToLog(sql);
                MayfairStatic.writeToLog(MayfairStatic.LOG_SEPERATOR);

                MayfairStatic.outputMessage(this, "Order Updated", ord_num + " marked as " + status, INFORMATION_MESSAGE);
                btnClearActionPerformed(null);
            }
            catch (Exception ex)
            {
                MayfairStatic.outputMessage(this, ex);
            }
        }
    }//GEN-LAST:event_btnMarkActionPerformed

    private void btnMarkDeliveredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMarkDeliveredActionPerformed
        if (MayfairStatic.outputConfirm(this, "Mark Delivered", "Are you sure you want to Mark as Delivered") == JOptionPane.YES_OPTION)
        {
            try (Statement selectStatement = MayfairStatic.getConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE))
            {
                String ord_num = fieldOrderNumber.getText();
                StringBuilder message = new StringBuilder();
                boolean onPurchaseOrder = false;

                ResultSet rs = selectStatement.executeQuery("SELECT " + PS_PONUM + ", " + PS_QUANTITY + ", " + PRODUCT_CODE + " "
                        + "FROM " + PURCHASE_SALES_ORDER_TABLE + " "
                        + "JOIN " + PRODUCTS_TABLE + " "
                        + "ON " + PS_PRODNUM + "=" + PRODUCT_PRODNUM + " "
                        + "WHERE " + PS_SONUM + " = " + ord_num);
                while (rs.next())
                {
                    onPurchaseOrder = true;
                    message.append(rs.getInt(PS_QUANTITY)).append(" x ").append(rs.getString(PRODUCT_CODE)).append(" on ").append(rs.getString(PS_PONUM));
                }

                if (onPurchaseOrder)
                {
                    JOptionPane.showMessageDialog(CurrentSalesOrders.this, "Cannot mark as delivered as order takes from the following undelivered Purchase Order(s):\n" + message.toString());
                }
                else
                {
                    try (Statement updateStatement = MayfairStatic.getConnection().createStatement())
                    {
                        String sql = ("UPDATE " + SALES_ORDER_TABLE + " "
                                + "SET " + SO_DELIVERED + " = true, "
                                + SO_DISPATCHED + " = true, "
                                + SO_DELDATE + " = CURRENT_TIMESTAMP "
                                + "WHERE " + SO_ORDNUM + " = " + ord_num);
                        updateStatement.executeUpdate(sql);

                        MayfairStatic.writeToLog("MARK SALES DELIVERED " + ord_num);
                        MayfairStatic.writeToLog(sql);
                        MayfairStatic.writeToLog(MayfairStatic.LOG_SEPERATOR);

                        btnClearActionPerformed(null);
                        btnFindActionPerformed(null);
                        MayfairStatic.outputMessage(this, "Order Delivered", ord_num + " marked as delivered.", INFORMATION_MESSAGE);
                    }
                }
            }
            catch (Exception ex)
            {
                MayfairStatic.outputMessage(this, ex);
            }
        }
    }//GEN-LAST:event_btnMarkDeliveredActionPerformed

    private void btnDispatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDispatchActionPerformed
        int ord_num = (Integer) table.getValueAt(table.getSelectedRow(), 0);
        String cust_name = (String) table.getValueAt(table.getSelectedRow(), 1);
        ReportGenerator.createDispatchNote(this, ord_num, cust_name);
    }//GEN-LAST:event_btnDispatchActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        fieldOrderNumber.setText("");
        fieldName.setText("");
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnSummaryReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSummaryReportActionPerformed
        int ord_num = (int) table.getValueAt(table.getSelectedRow(), 0);
        ReportGenerator.createSalesOrderSummaryReport(this, ord_num);
    }//GEN-LAST:event_btnSummaryReportActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDispatch;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnFind;
    private javax.swing.JButton btnMark;
    private javax.swing.JButton btnMarkDelivered;
    private javax.swing.JButton btnSummaryReport;
    private javax.swing.JButton btnViewSummary;
    private javax.swing.JTextField fieldName;
    private javax.swing.JTextField fieldOrderNumber;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel labelName;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
