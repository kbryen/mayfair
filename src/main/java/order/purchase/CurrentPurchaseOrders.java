/*
 * Mayfair Stock Control.
 *
 */
package main.java.order.purchase;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javafx.util.Pair;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.INFORMATION_MESSAGE;
import static javax.swing.JOptionPane.WARNING_MESSAGE;
import static javax.swing.JOptionPane.YES_OPTION;
import main.java.MayfairStatic;
import static main.java.MayfairStatic.POD_AVALIABLE;
import static main.java.MayfairStatic.POD_ORDNUM;
import static main.java.MayfairStatic.POD_PRICE;
import static main.java.MayfairStatic.POD_PRODNUM;
import static main.java.MayfairStatic.POD_QUANTITY;
import static main.java.MayfairStatic.PURCHASE_ORDER_TABLE;
import static main.java.MayfairStatic.PURCHASE_SALES_ORDER_TABLE;
import static main.java.MayfairStatic.SUPPLIERS_TABLE;
import static main.java.MayfairStatic.SUPPLIER_NAME;
import static main.java.MayfairStatic.SUPPLIER_SUPPNUM;
import static main.java.MayfairStatic.PO_ORDNUM;
import static main.java.MayfairStatic.PO_ORDDATE;
import static main.java.MayfairStatic.PO_DELIVERED;
import static main.java.MayfairStatic.PO_DELDATE;
import static main.java.MayfairStatic.PO_PRICE;
import static main.java.MayfairStatic.PO_DISPATCHED;
import static main.java.MayfairStatic.PO_DISPATCHDATE;
import static main.java.MayfairStatic.PO_SUPPNUM;
import static main.java.MayfairStatic.PO_TOTALUNITS;
import static main.java.MayfairStatic.PRODUCTS_TABLE;
import static main.java.MayfairStatic.PRODUCT_CODE;
import static main.java.MayfairStatic.PRODUCT_INORDER;
import static main.java.MayfairStatic.PRODUCT_INSTOCK;
import static main.java.MayfairStatic.PRODUCT_PRODNUM;
import static main.java.MayfairStatic.PS_PONUM;
import static main.java.MayfairStatic.PS_SONUM;
import static main.java.MayfairStatic.PS_PRODNUM;
import static main.java.MayfairStatic.PS_QUANTITY;
import static main.java.MayfairStatic.PURCHASE_ORDER_DETAILS_TABLE;
import static main.java.MayfairStatic.SALES_ORDER_DETAILS_TABLE;
import static main.java.MayfairStatic.SOD_FROMORDER;
import static main.java.MayfairStatic.SOD_FROMSTOCK;
import static main.java.MayfairStatic.SOD_ORDNUM;
import static main.java.MayfairStatic.SOD_PRODNUM;
import main.java.report.xls.PurchaseOrderSummaryReportXls;

/**
 *
 * @author kian_bryen
 */
public class CurrentPurchaseOrders extends javax.swing.JInternalFrame
{

    private final JDesktopPane desktop;

    public CurrentPurchaseOrders(JDesktopPane desktop)
    {
        setUpGUI();
        this.desktop = desktop;
        btnFindActionPerformed(null);
    }

    private void setUpGUI()
    {
        initComponents();
        enableButtons(false);
        scrollPane.setVisible(false);
        table.setAutoCreateRowSorter(true);
        MayfairStatic.addDateSorter(table, new int[]
        {
            2, 3, 7
        });
    }

    private void enableButtons(boolean enable)
    {
        btnViewSummary.setVisible(enable);
        btnEdit.setVisible(enable);
        btnCancel.setVisible(enable);
        btnMark.setVisible(enable);
        btnMarkDelivered.setVisible(enable);
        btnSummaryReport.setVisible(enable);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jLabel1 = new javax.swing.JLabel();
        btnViewSummary = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        btnFind = new javax.swing.JButton();
        scrollPane = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        fieldOrderNumber = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        labelName = new javax.swing.JLabel();
        fieldName = new javax.swing.JTextField();
        btnCancel = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnMark = new javax.swing.JButton();
        btnMarkDelivered = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnSummaryReport = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Current Purchase Orders");
        setToolTipText("");

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        jLabel1.setText("Purchase Orders");

        btnViewSummary.setBackground(new java.awt.Color(153, 204, 255));
        btnViewSummary.setText("View Summary");
        btnViewSummary.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnViewSummaryActionPerformed(evt);
            }
        });

        btnFind.setText("Find");
        btnFind.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnFindActionPerformed(evt);
            }
        });

        scrollPane.setBorder(null);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String []
            {
                "Number", "Supplier", "Ordered", "Expected Delivery", "Total Units", "Total (Â£)", "Dispatched", "Dispatched Date"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Float.class, java.lang.Boolean.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        table.setColumnSelectionAllowed(true);
        table.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                tableMouseClicked(evt);
            }
        });
        scrollPane.setViewportView(table);
        table.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (table.getColumnModel().getColumnCount() > 0)
        {
            table.getColumnModel().getColumn(4).setResizable(false);
        }

        jLabel3.setText("Order Number");

        jLabel4.setText("OR");

        labelName.setText("Supplier Name");

        btnCancel.setText("Cancel Order");
        btnCancel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnCancelActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit Order");
        btnEdit.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnEditActionPerformed(evt);
            }
        });

        btnMark.setText("Mark ");
        btnMark.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnMarkActionPerformed(evt);
            }
        });

        btnMarkDelivered.setText("Mark Delivered");
        btnMarkDelivered.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnMarkDeliveredActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnClearActionPerformed(evt);
            }
        });

        btnSummaryReport.setText("Create Summary Report");
        btnSummaryReport.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnSummaryReportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPane, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jSeparator2))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(fieldOrderNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(labelName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(fieldName, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnFind)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnClear)))
                        .addGap(0, 42, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnMark)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnMarkDelivered))
                            .addComponent(btnSummaryReport, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnCancel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnEdit))
                            .addComponent(btnViewSummary, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(fieldOrderNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(labelName)
                    .addComponent(fieldName, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFind)
                    .addComponent(btnClear))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnMark)
                    .addComponent(btnMarkDelivered))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnViewSummary)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEdit)
                    .addComponent(btnCancel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSummaryReport)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewSummaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewSummaryActionPerformed
        ViewPurchaseOrderSummary jFrame = new ViewPurchaseOrderSummary(fieldOrderNumber.getText());
        desktop.add(jFrame);
        jFrame.show();
    }//GEN-LAST:event_btnViewSummaryActionPerformed

    private void btnFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionPerformed
        try (Statement statement = MayfairStatic.getConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE))
        {
            String sql = "SELECT " + PO_ORDNUM + ", "
                    + SUPPLIER_NAME + ", "
                    + MayfairStatic.sqlDateFormat(PO_ORDDATE) + ", "
                    + MayfairStatic.sqlDateFormat(PO_DELDATE) + ", "
                    + PO_TOTALUNITS + ", "
                    + PO_PRICE + ", "
                    + PO_DISPATCHED + ", "
                    + MayfairStatic.sqlDateFormat(PO_DISPATCHDATE) + " "
                    + "FROM " + PURCHASE_ORDER_TABLE + " "
                    + "JOIN " + SUPPLIERS_TABLE + " "
                    + "ON " + PO_SUPPNUM + "=" + SUPPLIER_SUPPNUM + " ";
            if (!fieldOrderNumber.getText().isEmpty())
            {
                sql += "WHERE " + PO_ORDNUM + " "
                        + "LIKE '%" + fieldOrderNumber.getText() + "%' ";
            }
            else
            {
                sql += "WHERE " + SUPPLIER_NAME + " "
                        + "LIKE '%" + fieldName.getText() + "%' ";
            }
            sql += "AND " + PO_DELIVERED + " = false "
                    + "ORDER BY " + PO_DELDATE + ", " + PO_ORDNUM + " DESC";

            scrollPane.setVisible(true);
            getContentPane().validate();
            getContentPane().repaint();
            MayfairStatic.fillTable(table, statement.executeQuery(sql));
            enableButtons(false);
        }
        catch (SQLException ex)
        {
            MayfairStatic.outputMessage(this, ex);
        }
    }//GEN-LAST:event_btnFindActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        fieldOrderNumber.setText(String.valueOf(table.getValueAt(table.getSelectedRow(), 0)));
        fieldName.setText(String.valueOf(table.getValueAt(table.getSelectedRow(), 1)));
        enableButtons(true);
        if ((boolean) table.getValueAt(table.getSelectedRow(), 6))
        {
            btnMark.setText("Mark Undispatched");
        }
        else
        {
            btnMark.setText("Mark Dispatched");
        }
    }//GEN-LAST:event_tableMouseClicked

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        if (MayfairStatic.outputConfirm(this, "Cancel Order", "Are you sure you want to cancel this order?") == YES_OPTION)
        {
            try (Statement selectStatement = MayfairStatic.getConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE))
            {
                String ord_num = fieldOrderNumber.getText();

                // CHECK PURCHASE_SALES_ORDER 
                Map<Integer, Pair<String, Integer>> prodsOnSales = new HashMap();
                ResultSet rs = selectStatement.executeQuery("SELECT " + PS_SONUM + ", " + PRODUCT_CODE + ", " + PS_QUANTITY + " "
                        + "FROM " + PURCHASE_SALES_ORDER_TABLE + " "
                        + "JOIN " + PRODUCTS_TABLE + " "
                        + "ON " + PS_PRODNUM + "=" + PRODUCT_PRODNUM + " "
                        + "WHERE " + PS_PONUM + " = '" + ord_num + "'");
                while (rs.next())
                {
                    int so_num = rs.getInt(PS_SONUM);
                    String code = rs.getString(PRODUCT_CODE);
                    int quantity = rs.getInt(PS_QUANTITY);

                    prodsOnSales.put(so_num, new Pair(code, quantity));
                }

                if (prodsOnSales.isEmpty())
                {
                    // Calculate in_order change for Products Table
                    rs = selectStatement.executeQuery("SELECT " + POD_PRODNUM + ", " + POD_QUANTITY + ", " + PRODUCT_INORDER + " "
                            + "FROM " + PURCHASE_ORDER_DETAILS_TABLE + " "
                            + "JOIN " + PRODUCTS_TABLE + " "
                            + "ON " + POD_PRODNUM + "=" + PRODUCT_PRODNUM + " "
                            + "WHERE " + POD_ORDNUM + " = '" + ord_num + "'");
                    Map<Integer, Integer> prodsQuantChange = new HashMap();
                    while (rs.next())
                    {
                        int prod_num = rs.getInt(POD_PRODNUM);
                        int quantity = rs.getInt(POD_QUANTITY);
                        int in_order = rs.getInt(PRODUCT_INORDER);

                        prodsQuantChange.put(prod_num, (in_order - quantity));
                    }

                    // Cancel Order
                    try (Statement updateStatement = MayfairStatic.getConnection().createStatement())
                    {
                        MayfairStatic.writeToLog("CANCEL PO " + ord_num);

                        // UPDATE PURCHASE ORDER DETAILS
                        String sql = ("DELETE FROM " + PURCHASE_ORDER_DETAILS_TABLE + " "
                                + "WHERE " + POD_ORDNUM + " = '" + ord_num + "'");
                        updateStatement.executeUpdate(sql);
                        MayfairStatic.writeToLog(sql);

                        // UPDATE PURCHASE_ORDER
                        sql = ("DELETE FROM " + PURCHASE_ORDER_TABLE + " "
                                + "WHERE " + PO_ORDNUM + " = '" + ord_num + "'");
                        updateStatement.executeUpdate(sql);
                        MayfairStatic.writeToLog(sql);

                        // UPDATE PRODUCTS
                        for (Map.Entry<Integer, Integer> entry : prodsQuantChange.entrySet())
                        {
                            sql = ("UPDATE " + PRODUCTS_TABLE + " "
                                    + "SET " + PRODUCT_INORDER + " = " + entry.getValue() + " "
                                    + "WHERE " + PRODUCT_PRODNUM + " = " + entry.getKey());
                            updateStatement.executeUpdate(sql);
                            MayfairStatic.writeToLog(sql);
                        }
                    }

                    MayfairStatic.writeToLog(MayfairStatic.LOG_SEPERATOR);
                    MayfairStatic.outputMessage(this, "Order Cancelled", ord_num + " cancelled.", INFORMATION_MESSAGE);

                    btnClearActionPerformed(null);
                    btnFindActionPerformed(null);
                }
                else
                {
                    StringBuilder message = new StringBuilder();
                    message.append("Can not cancel Purchase Order ").append(ord_num).append(" due to the below Products being on Sales Orders:");
                    for (Map.Entry<Integer, Pair<String, Integer>> entry : prodsOnSales.entrySet())
                    {
                        int so_num = entry.getKey();
                        String code = entry.getValue().getKey();
                        int quantity = entry.getValue().getValue();
                        message.append("\n").append(quantity).append(" x ").append(code).append(" on Sales Order ").append(so_num);
                    }
                    MayfairStatic.outputMessage(this, "Warning", message.toString(), WARNING_MESSAGE);
                }
            }
            catch (SQLException ex)
            {
                MayfairStatic.outputMessage(this, ex);
            }
        }
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        EditPurchaseOrderStep1 jFrame = new EditPurchaseOrderStep1(fieldOrderNumber.getText(), desktop);
        desktop.add(jFrame);
        MayfairStatic.setMaximum(jFrame);
        jFrame.show();
        this.dispose();
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnMarkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMarkActionPerformed
        String status = btnMark.getText().substring(btnMark.getText().indexOf(' ') + 1);
        if (MayfairStatic.outputConfirm(this, "Mark " + status, "Are you sure you want to Mark as " + status) == JOptionPane.YES_OPTION)
        {
            try (Statement statement = MayfairStatic.getConnection().createStatement())
            {
                String ord_num = fieldOrderNumber.getText();
                String sql = "UPDATE " + PURCHASE_ORDER_TABLE + " ";
                if (status.equals("Dispatched"))
                {

                    sql += "SET " + PO_DISPATCHED + " = true, " + PO_DISPATCHDATE + " = CURRENT_TIMESTAMP ";
                }
                else
                {
                    sql += "SET " + PO_DISPATCHED + " = false, " + PO_DISPATCHDATE + " = null ";
                }
                sql += "WHERE " + PO_ORDNUM + " = '" + ord_num + "'";
                statement.executeUpdate(sql);

                MayfairStatic.writeToLog("MARK " + status.toUpperCase() + " " + ord_num);
                MayfairStatic.writeToLog(sql);
                MayfairStatic.writeToLog(MayfairStatic.LOG_SEPERATOR);

                MayfairStatic.outputMessage(this, "Order Updated", ord_num + " marked as " + status, INFORMATION_MESSAGE);
                btnClearActionPerformed(null);
            }
            catch (SQLException ex)
            {
                MayfairStatic.outputMessage(this, ex);
            }
        }
    }//GEN-LAST:event_btnMarkActionPerformed

    private void btnMarkDeliveredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMarkDeliveredActionPerformed
        if (MayfairStatic.outputConfirm(this, "Mark Delivered", "Are you sure you want to Mark as Delivered?") == JOptionPane.YES_OPTION)
        {
            if (MayfairStatic.outputConfirm(this, "Mark Delivered", "Are you certain you want to mark this Purchase Order as delivered?\nNo going back once you choose yes...") == JOptionPane.YES_OPTION)
            {
                String ord_num = fieldOrderNumber.getText();
                Map<Integer, Map<Integer, Pair<Integer, Integer>>> prodsOnSales = new HashMap();
                Map<Integer, Pair<Integer, Integer>> prods = new HashMap();

                // Select Order info needed to mark order delivered
                try (Statement statement = MayfairStatic.getConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE))
                {
                    // SELECT fromStock, fromOrder FROM sales_order_details WHERE prod_num = " + prod_num + " AND ord_num = " + so_num
                    ResultSet rs = statement.executeQuery("SELECT " + PS_SONUM + ", " + PS_PRODNUM + ", " + PS_QUANTITY + ", "
                            + SOD_FROMSTOCK + ", " + SOD_FROMORDER + " "
                            + "FROM " + PURCHASE_SALES_ORDER_TABLE + " "
                            + "JOIN " + SALES_ORDER_DETAILS_TABLE + " "
                            + "ON " + PS_SONUM + "=" + SOD_ORDNUM + " "
                            + "AND " + PS_PRODNUM + "=" + SOD_PRODNUM + " "
                            + "WHERE " + PS_PONUM + " = '" + ord_num + "'");
                    while (rs.next())
                    {
                        int so_num = rs.getInt(PS_SONUM);
                        int prod_num = rs.getInt(PS_PRODNUM);
                        int quantity = rs.getInt(PS_QUANTITY);
                        int fromStock = rs.getInt(SOD_FROMSTOCK);
                        int fromOrder = rs.getInt(SOD_FROMORDER);

                        fromStock += quantity;
                        fromOrder -= quantity;

                        Map<Integer, Pair<Integer, Integer>> sales;
                        if (prodsOnSales.containsKey(so_num))
                        {
                            sales = prodsOnSales.get(so_num);
                        }
                        else
                        {
                            sales = new HashMap();
                            prodsOnSales.put(so_num, sales);
                        }
                        sales.put(prod_num, new Pair(fromStock, fromOrder));
                    }

                    // SELECT in_stock, in_order FROM products WHERE prod_num = " + prod_num
                    rs = statement.executeQuery("SELECT " + POD_PRODNUM + ", " + POD_AVALIABLE + ", "
                            + PRODUCT_INSTOCK + ", " + PRODUCT_INORDER + " "
                            + "FROM " + PURCHASE_ORDER_DETAILS_TABLE + " "
                            + "JOIN " + PRODUCTS_TABLE + " "
                            + "ON " + POD_PRODNUM + "=" + PRODUCT_PRODNUM + " "
                            + "WHERE " + POD_ORDNUM + " = '" + ord_num + "'");
                    while (rs.next())
                    {
                        int prod_num = rs.getInt(POD_PRODNUM);
                        int avaliable = rs.getInt(POD_AVALIABLE);
                        int in_stock = rs.getInt(PRODUCT_INSTOCK);
                        int in_order = rs.getInt(PRODUCT_INORDER);

                        in_stock += avaliable;
                        in_order -= avaliable;

                        prods.put(prod_num, new Pair(in_stock, in_order));
                    }
                }
                catch (SQLException ex)
                {
                    MayfairStatic.outputMessage(this, ex);
                }

                // Mark delivered
                try (Statement statement = MayfairStatic.getConnection().createStatement())
                {
                    MayfairStatic.writeToLog("MARK PO DELIVERED " + ord_num);
                    // PURCHASE SALES ORDER
                    String sql = ("DELETE FROM " + PURCHASE_SALES_ORDER_TABLE + " "
                            + "WHERE " + PS_PONUM + " = '" + ord_num + "'");
                    statement.executeUpdate(sql);
                    MayfairStatic.writeToLog(sql);

                    // SALES ORDER DETAILS
                    for (Map.Entry<Integer, Map<Integer, Pair<Integer, Integer>>> sales : prodsOnSales.entrySet())
                    {
                        int so_num = sales.getKey();
                        for (Map.Entry<Integer, Pair<Integer, Integer>> prod : sales.getValue().entrySet())
                        {
                            int prod_num = prod.getKey();
                            int fromStock = prod.getValue().getKey();
                            int fromOrder = prod.getValue().getValue();

                            sql = ("UPDATE " + SALES_ORDER_DETAILS_TABLE + " "
                                    + "SET " + SOD_FROMSTOCK + " = " + fromStock + ", "
                                    + SOD_FROMORDER + " = " + fromOrder + " "
                                    + "WHERE " + SOD_PRODNUM + " = " + prod_num + " "
                                    + "AND " + SOD_ORDNUM + " = " + so_num);
                            statement.executeUpdate(sql);
                            MayfairStatic.writeToLog(sql);
                        }
                    }

                    // PURCHASE ORDER DETAILS
                    sql = ("UPDATE " + PURCHASE_ORDER_DETAILS_TABLE + " "
                            + "SET " + POD_AVALIABLE + " = 0 "
                            + "WHERE " + POD_ORDNUM + " = '" + ord_num + "'");
                    statement.executeUpdate(sql);
                    MayfairStatic.writeToLog(sql);

                    // PRODUCTS
                    for (Map.Entry<Integer, Pair<Integer, Integer>> prod : prods.entrySet())
                    {
                        int prod_num = prod.getKey();
                        int in_stock = prod.getValue().getKey();
                        int in_order = prod.getValue().getValue();

                        sql = ("UPDATE " + PRODUCTS_TABLE + " "
                                + "SET " + PRODUCT_INSTOCK + " = " + in_stock + ", "
                                + PRODUCT_INORDER + " = " + in_order + " "
                                + "WHERE " + PRODUCT_PRODNUM + " = " + prod_num);
                        statement.executeUpdate(sql);
                        MayfairStatic.writeToLog(sql);
                    }

                    // PURCHASE ORDER
                    sql = ("UPDATE " + PURCHASE_ORDER_TABLE + " "
                            + "SET " + PO_DELIVERED + " = true, "
                            + PO_DELDATE + " = CURRENT_TIMESTAMP, "
                            + PO_DISPATCHED + " = true "
                            + "WHERE " + PO_ORDNUM + " = '" + ord_num + "'");
                    statement.executeUpdate(sql);
                    MayfairStatic.writeToLog(sql);

                    MayfairStatic.writeToLog(MayfairStatic.LOG_SEPERATOR);

                    MayfairStatic.outputMessage(this, "Order Delivered", ord_num + " marked as delivered.", INFORMATION_MESSAGE);
                }
                catch (SQLException ex)
                {
                    MayfairStatic.outputMessage(this, ex);
                }

                btnClearActionPerformed(null);
                btnFindActionPerformed(null);
            }
        }
    }//GEN-LAST:event_btnMarkDeliveredActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        fieldOrderNumber.setText("");
        fieldName.setText("");
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnSummaryReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSummaryReportActionPerformed
        String ord_num = String.valueOf(table.getValueAt(table.getSelectedRow(), 0));
        if (MayfairStatic.outputConfirm(this, "Summary Report", "Are you sure you want to create a Summary Report for " + ord_num + "?") == JOptionPane.YES_OPTION)
        {
            try (Statement statement = MayfairStatic.getConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE))
            {
                PurchaseOrderSummaryReportXls summaryReport = new PurchaseOrderSummaryReportXls();
                summaryReport.setLoggingComponent(this);
                summaryReport.setReportName("Purchase Order Summary");
                summaryReport.setOrd_num(ord_num);

                ResultSet rs = statement.executeQuery("SELECT " + PO_DELDATE + ", " + PO_PRICE + ", " + PO_TOTALUNITS + " "
                        + "FROM " + PURCHASE_ORDER_TABLE + " "
                        + "WHERE " + PO_ORDNUM + " = '" + ord_num + "'");
                rs.next();
                summaryReport.setOrd_num(MayfairStatic.sqlDateFormat(rs.getString(PO_DELDATE), "%d/%m/%Y"));
                summaryReport.setTotal_price(rs.getDouble(PO_PRICE));
                summaryReport.setTotal_units(rs.getInt(PO_TOTALUNITS));

                List<String[]> products = new ArrayList();
                rs = statement.executeQuery("SELECT " + PRODUCT_CODE + ", "
                        + POD_QUANTITY + ", "
                        + POD_AVALIABLE + ", "
                        + "(" + POD_QUANTITY + " - " + POD_AVALIABLE + ") AS SOLD "
                        + POD_PRICE + " "
                        + "FROM " + PURCHASE_ORDER_DETAILS_TABLE + " "
                        + "JOIN " + PRODUCTS_TABLE + " "
                        + "ON " + POD_PRODNUM + "=" + PRODUCT_PRODNUM + " "
                        + "WHERE " + POD_ORDNUM + " = '" + ord_num + "'");
                while (rs.next())
                {
                    String[] entry = new String[4];
                    entry[0] = rs.getString(PRODUCT_CODE);
                    entry[1] = rs.getString(POD_QUANTITY);
                    entry[2] = rs.getString("SOLD");
                    entry[3] = rs.getString(POD_AVALIABLE);
                    entry[4] = rs.getString(POD_PRICE);
                    products.add(entry);
                }
                summaryReport.setProducts(products);

                summaryReport.populateWorkbook();
                summaryReport.save(summaryReport.getFilename());
            }
            catch (SQLException ex)
            {
                MayfairStatic.outputMessage(this, ex);
            }
        }
    }//GEN-LAST:event_btnSummaryReportActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnFind;
    private javax.swing.JButton btnMark;
    private javax.swing.JButton btnMarkDelivered;
    private javax.swing.JButton btnSummaryReport;
    private javax.swing.JButton btnViewSummary;
    private javax.swing.JTextField fieldName;
    private javax.swing.JTextField fieldOrderNumber;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel labelName;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
