/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Mayfair.order.purchase;

import Mayfair.Database;
import static Mayfair.Main.seperator;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.util.Pair;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.ss.usermodel.CellStyle;

/**
 *
 * @author kian_bryen
 */
public class Current extends javax.swing.JInternalFrame
{

    private final Database db = new Database();
    private final JDesktopPane desktop;
    private String sql;

    public Current(JDesktopPane pane)
    {
        initComponents();
        this.setTitle("Current Purchase Orders");
        this.desktop = pane;

        table.getColumnModel().getColumn(1).setHeaderValue("Supplier");
        labelName.setText("Supplier Name");

        scrollPane.setVisible(false);
        btnViewSummary.setVisible(false);
        btnEdit.setVisible(false);
        btnCancel.setVisible(false);
        btnMarkDispatched.setVisible(false);
        btnMarkDelivered.setVisible(false);
        btnExcelSummary.setVisible(false);
        btnPOStatus.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jLabel1 = new javax.swing.JLabel();
        btnViewSummary = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        btnFind = new javax.swing.JButton();
        scrollPane = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        fieldOrderNumber = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        labelName = new javax.swing.JLabel();
        fieldName = new javax.swing.JTextField();
        btnCancel = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnMarkDispatched = new javax.swing.JButton();
        btnMarkDelivered = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnExcelSummary = new javax.swing.JButton();
        btnPOStatus = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        jLabel1.setText("View Order");

        btnViewSummary.setBackground(new java.awt.Color(153, 204, 255));
        btnViewSummary.setText("View Summary");
        btnViewSummary.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnViewSummaryActionPerformed(evt);
            }
        });

        btnFind.setText("Find");
        btnFind.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnFindActionPerformed(evt);
            }
        });

        scrollPane.setBorder(null);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String []
            {
                "Number", "", "Ordered", "Expected Delivery", "Total (Â£)", "Dispatched", "Date"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Boolean.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        table.setColumnSelectionAllowed(true);
        table.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                tableMouseClicked(evt);
            }
        });
        scrollPane.setViewportView(table);
        table.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        jLabel3.setText("Order Number");

        fieldOrderNumber.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                fieldOrderNumberActionPerformed(evt);
            }
        });

        jLabel4.setText("OR");

        btnCancel.setText("Cancel Order");
        btnCancel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnCancelActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit Order");
        btnEdit.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnEditActionPerformed(evt);
            }
        });

        btnMarkDispatched.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnMarkDispatchedActionPerformed(evt);
            }
        });

        btnMarkDelivered.setText("Mark Delivered");
        btnMarkDelivered.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnMarkDeliveredActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnClearActionPerformed(evt);
            }
        });

        btnExcelSummary.setText("Create Summary File");
        btnExcelSummary.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnExcelSummaryActionPerformed(evt);
            }
        });

        btnPOStatus.setText("Create PO Avaliability");
        btnPOStatus.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnPOStatusActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jSeparator2))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(btnFind)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3)
                                            .addComponent(labelName))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(fieldName, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(fieldOrderNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 206, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(btnMarkDispatched)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnMarkDelivered))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(btnCancel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnEdit))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(btnExcelSummary, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnPOStatus)))))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnClear)
                        .addGap(47, 47, 47))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnViewSummary)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(fieldOrderNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(btnClear))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelName)
                    .addComponent(fieldName, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnFind)
                .addGap(18, 18, 18)
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnMarkDispatched)
                    .addComponent(btnMarkDelivered))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnViewSummary)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEdit)
                    .addComponent(btnCancel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExcelSummary)
                    .addComponent(btnPOStatus))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewSummaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewSummaryActionPerformed

        ViewPurchaseSummary purchaseOrder = new ViewPurchaseSummary(fieldOrderNumber.getText());
        desktop.add(purchaseOrder);
        purchaseOrder.show();

    }//GEN-LAST:event_btnViewSummaryActionPerformed

    private void btnFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionPerformed
        Connection con = db.getConnection();
        try
        {
            Statement statement = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
            ResultSet rs;
            if (!fieldOrderNumber.getText().equals(""))
            {
                rs = statement.executeQuery("SELECT purchase_order.ord_num, suppliers.name, purchase_order.ord_date, purchase_order.del_date, purchase_order.price, purchase_order.dispatched, purchase_order.dispatched_date FROM purchase_order INNER JOIN suppliers ON purchase_order.supp_num=suppliers.supp_num WHERE purchase_order.ord_num LIKE '%" + fieldOrderNumber.getText() + "%' and delivered = false ORDER BY purchase_order.ord_num DESC");
            }
            else
            {
                rs = statement.executeQuery("SELECT purchase_order.ord_num, suppliers.name, purchase_order.ord_date, purchase_order.del_date, purchase_order.price, purchase_order.dispatched, purchase_order.dispatched_date FROM purchase_order INNER JOIN suppliers ON purchase_order.supp_num=suppliers.supp_num WHERE suppliers.name LIKE '%" + fieldName.getText() + "%' and delivered = false ORDER BY purchase_order.ord_num DESC");
            }

            scrollPane.setVisible(true);
            getContentPane().validate();
            getContentPane().repaint();

            while (table.getRowCount() > 0)
            {
                ((DefaultTableModel) table.getModel()).removeRow(0);
            }

            int columns = rs.getMetaData().getColumnCount();

            while (rs.next())
            {
                Object[] row = new Object[columns];

                for (int i = 1; i <= columns; i++)
                {
                    row[i - 1] = rs.getObject(i);
                }

                ((DefaultTableModel) table.getModel()).insertRow(rs.getRow() - 1, row);
            }

            btnViewSummary.setVisible(false);
            btnEdit.setVisible(false);
            btnCancel.setVisible(false);
            btnMarkDispatched.setVisible(false);
            btnMarkDelivered.setVisible(false);
            btnExcelSummary.setVisible(false);
            btnPOStatus.setVisible(false);
        }
        catch (SQLException e)
        {
            JOptionPane.showMessageDialog(Current.this, e.getMessage());
        }
        finally
        {
            try
            {
                con.close();
            }
            catch (Exception e)
            { /* ignored */ }
        }
    }//GEN-LAST:event_btnFindActionPerformed

    private void fieldOrderNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldOrderNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldOrderNumberActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        fieldOrderNumber.setText((String) table.getValueAt(table.getSelectedRow(), 0));
        fieldName.setText((String) table.getValueAt(table.getSelectedRow(), 1));
        btnViewSummary.setVisible(true);
        btnMarkDelivered.setVisible(true);
        btnCancel.setVisible(true);
        btnPOStatus.setVisible(true);
        btnExcelSummary.setVisible(true);
        btnEdit.setVisible(true);
        btnMarkDispatched.setVisible(true);
        if ((boolean) table.getValueAt(table.getSelectedRow(), 5))
        {
            btnMarkDispatched.setText("Mark Undispatched");
        }
        else
        {
            btnMarkDispatched.setText("Mark Dispatched");
        }
    }//GEN-LAST:event_tableMouseClicked

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        int selectedOption = JOptionPane.showConfirmDialog(null, "Are you sure you want to cancel this order?", "Cancel order", JOptionPane.YES_NO_OPTION);
        if (selectedOption == JOptionPane.YES_OPTION)
        {
            Connection con = db.getConnection();
            try
            {
                String ord_num = fieldOrderNumber.getText();

                Statement statement = con.createStatement();
                Statement statement2 = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);

                db.writeToLog("CANCEL PO " + ord_num);

                // CHECK PURCHASE_SALES_ORDER 
                ArrayList<Pair<Integer, Pair<Integer, Integer>>> prodsOnSales = new ArrayList();
                ResultSet rs = statement2.executeQuery("SELECT so_num, prod_num, quantity FROM purchase_sales_order WHERE po_num = '" + ord_num + "'");
                while (rs.next())
                {
                    int so_num = rs.getInt("so_num");
                    int prod_num = rs.getInt("prod_num");
                    int quantity = rs.getInt("quantity");

                    prodsOnSales.add(new Pair(so_num, new Pair(prod_num, quantity)));
                }

                if (prodsOnSales.isEmpty())
                {
                    // UPDATE PURCHASE_ORDER_DETAILS
                    HashMap<Integer, Integer> prodsOnPurchase = new HashMap();
                    rs = statement2.executeQuery("SELECT prod_num, quantity FROM purchase_order_details WHERE ord_num = '" + ord_num + "'");
                    while (rs.next())
                    {
                        int prod_num = rs.getInt("prod_num");
                        int quantity = rs.getInt("quantity");

                        prodsOnPurchase.put(prod_num, quantity);
                    }

                    sql = ("DELETE FROM purchase_order_details WHERE ord_num = '" + ord_num + "'");
                    statement.executeUpdate(sql);
                    db.writeToLog(sql);

                    // UPDATE PRODUCTS
                    for (Map.Entry<Integer, Integer> prodsOnPurch : prodsOnPurchase.entrySet())
                    {
                        int prod_num = prodsOnPurch.getKey();
                        int quantity = prodsOnPurch.getValue();

                        rs = statement2.executeQuery("SELECT in_order FROM products WHERE prod_num = " + prod_num);
                        rs.next();

                        int in_order = rs.getInt("in_order");

                        sql = ("UPDATE products SET in_order = " + (in_order - quantity) + " WHERE prod_num = " + prod_num);
                        statement.executeUpdate(sql);
                        db.writeToLog(sql);
                    }

                    // UPDATE PURCHASE_ORDER
                    sql = ("DELETE FROM purchase_order WHERE ord_num = '" + ord_num + "'");
                    statement.executeUpdate(sql);
                    db.writeToLog(sql);

                    db.writeToLog(seperator);
                    fieldOrderNumber.setText("");
                    fieldName.setText("");
                    btnFindActionPerformed(null);
                    JOptionPane.showMessageDialog(Current.this, "Order Cancelled - " + ord_num);
                }
                else
                {
                    StringBuilder message = new StringBuilder();
                    for (Pair<Integer, Pair<Integer, Integer>> products : prodsOnSales)
                    {
                        int so_num = products.getKey();
                        int prod_num = products.getValue().getKey();
                        int quantity = products.getValue().getValue();

                        rs = statement2.executeQuery("SELECT code FROM products WHERE prod_num = " + prod_num);
                        rs.next();
                        String code = rs.getString("code");

                        message.append("\n").append(quantity).append(" x ").append(code).append(" on Sales Order ").append(so_num);
                    }

                    db.writeToLog("UNABLE TO CANCEL ORDER" + message);
                    db.writeToLog(seperator);
                    JOptionPane.showMessageDialog(Current.this, "Can not cancel Purchase Order " + ord_num + " due to the below Products being on Sales Orders:" + message);
                }

            }
            catch (SQLException e)
            {
                JOptionPane.showMessageDialog(Current.this, e.getMessage());
            }
            finally
            {
                try
                {
                    con.close();
                }
                catch (Exception e)
                { /* ignored */ }
            }
        }
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        EditMain purchaseOrder = new EditMain(fieldOrderNumber.getText(), desktop);
        desktop.add(purchaseOrder);
        purchaseOrder.show();

        this.dispose();
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnMarkDispatchedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMarkDispatchedActionPerformed
        int selectedOption;
        if (btnMarkDispatched.getText().equals("Mark Dispatched"))
        {
            selectedOption = JOptionPane.showConfirmDialog(null, "Are you sure you want to Mark as Dispatched?", "Mark Dispatched", JOptionPane.YES_NO_OPTION);
        }
        else
        {
            selectedOption = JOptionPane.showConfirmDialog(null, "Are you sure you want to Mark as Undispatched?", "Mark Undispatched", JOptionPane.YES_NO_OPTION);
        }

        if (selectedOption == JOptionPane.YES_OPTION)
        {
            Connection con = db.getConnection();
            try
            {
                Statement statement = con.createStatement();

                if (btnMarkDispatched.getText().equals("Mark Dispatched"))
                {
                    db.writeToLog("MARK DISPATCHED " + fieldOrderNumber.getText());
                    sql = "UPDATE purchase_order SET dispatched = true, dispatched_date = CURRENT_TIMESTAMP WHERE ord_num = '" + fieldOrderNumber.getText() + "'";
                }
                else
                {
                    db.writeToLog("MARK UNDISPATCHED " + fieldOrderNumber.getText());
                    sql = "UPDATE purchase_order SET dispatched = false, dispatched_date = null WHERE ord_num = '" + fieldOrderNumber.getText() + "'";
                }

                statement.executeUpdate(sql);
                db.writeToLog(sql);
                db.writeToLog(seperator);

                JOptionPane.showMessageDialog(Current.this, "State of order has been updated.");
                fieldOrderNumber.setText("");
                fieldName.setText("");
                btnFindActionPerformed(null);
            }
            catch (SQLException e)
            {
                JOptionPane.showMessageDialog(Current.this, e.getMessage());
            }
            finally
            {
                try
                {
                    con.close();
                }
                catch (Exception e)
                { /* ignored */ }
            }
        }
    }//GEN-LAST:event_btnMarkDispatchedActionPerformed

    private void btnMarkDeliveredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMarkDeliveredActionPerformed
        int selectedOption = JOptionPane.showConfirmDialog(null, "Are you sure you want to Mark as Delivered?", "Mark Delivered", JOptionPane.YES_NO_OPTION);
        if (selectedOption == JOptionPane.YES_OPTION)
        {
            boolean mark = true;

            int selectedOption2 = JOptionPane.showConfirmDialog(null, "Are you certain you want to mark this Purchase Order as delivered?\nNo going back once you choose yes...", "Mark Delivered", JOptionPane.YES_NO_OPTION);
            if (selectedOption2 == JOptionPane.NO_OPTION)
            {
                mark = false;
            }

            if (mark)
            {
                Connection con = db.getConnection();
                try
                {
                    String ord_num = fieldOrderNumber.getText();

                    Statement statement = con.createStatement();
                    Statement statement2 = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);

                    db.writeToLog("MARK PO DELIVERED " + ord_num);

                    // UPDATE PURCHASE_SALES_ORDER
                    ArrayList<Pair<Integer, Pair<Integer, Integer>>> prodsOnSales = new ArrayList();
                    ResultSet rs = statement2.executeQuery("SELECT so_num, prod_num, quantity FROM purchase_sales_order WHERE po_num = '" + ord_num + "'");
                    while (rs.next())
                    {
                        int so_num = rs.getInt("so_num");
                        int prod_num = rs.getInt("prod_num");
                        int quantity = rs.getInt("quantity");

                        prodsOnSales.add(new Pair(so_num, new Pair(prod_num, quantity)));
                    }

                    sql = ("DELETE FROM purchase_sales_order WHERE po_num = '" + ord_num + "'");
                    statement.executeUpdate(sql);
                    db.writeToLog(sql);

                    // UPDATE SALES_ORDER_DETAILS
                    for(Pair<Integer, Pair<Integer, Integer>> prodsOnSale : prodsOnSales)
                    {
                        int so_num = prodsOnSale.getKey();
                        int prod_num = prodsOnSale.getValue().getKey();
                        int quantity = prodsOnSale.getValue().getValue();

                        rs = statement2.executeQuery("SELECT fromStock, fromOrder FROM sales_order_details WHERE prod_num = " + prod_num + " AND ord_num = " + so_num);
                        rs.next();

                        int fromStock = rs.getInt("fromStock");
                        int fromOrder = rs.getInt("fromOrder");

                        sql = ("UPDATE sales_order_details SET fromStock = " + (fromStock + quantity) + ", fromOrder = " + (fromOrder - quantity) + " WHERE prod_num = " + prod_num + " AND ord_num = " + so_num);
                        statement.executeUpdate(sql);
                        db.writeToLog(sql);
                    }

                    // UPDATE PURCHASE_ORDER_DETAILS
                    HashMap<Integer, Integer> prodsOnPurchase = new HashMap();
                    rs = statement2.executeQuery("SELECT prod_num, avaliable FROM purchase_order_details WHERE ord_num = '" + ord_num + "'");
                    while (rs.next())
                    {
                        int prod_num = rs.getInt("prod_num");
                        int avaliable = rs.getInt("avaliable");

                        prodsOnPurchase.put(prod_num, avaliable);
                    }

                    sql = ("UPDATE purchase_order_details SET avaliable = 0 WHERE ord_num = '" + ord_num + "'");
                    statement.executeUpdate(sql);
                    db.writeToLog(sql);

                    // UPDATE PRODUCTS
                    for (Map.Entry<Integer, Integer> prodsOnPurch : prodsOnPurchase.entrySet())
                    {
                        int prod_num = prodsOnPurch.getKey();
                        int avaliable = prodsOnPurch.getValue();

                        rs = statement2.executeQuery("SELECT in_stock, in_order FROM products WHERE prod_num = " + prod_num);
                        rs.next();

                        int in_stock = rs.getInt("in_stock");
                        int in_order = rs.getInt("in_order");

                        sql = ("UPDATE products SET in_stock = " + (in_stock + avaliable) + ", in_order = " + (in_order - avaliable) + " WHERE prod_num = " + prod_num);
                        statement.executeUpdate(sql);
                        db.writeToLog(sql);
                    }

                    // UPDATE PURCHASE_ORDER
                    sql = ("UPDATE purchase_order SET delivered = true, del_date = CURRENT_TIMESTAMP, dispatched = true WHERE ord_num = '" + ord_num + "'");
                    statement.executeUpdate(sql);
                    db.writeToLog(sql);

                    db.writeToLog(seperator);
                    fieldOrderNumber.setText("");
                    fieldName.setText("");
                    btnFindActionPerformed(null);
                }
                catch (SQLException e)
                {
                    JOptionPane.showMessageDialog(Current.this, e.getMessage());
                }
                finally
                {
                    try
                    {
                        con.close();
                    }
                    catch (Exception e)
                    { /* ignored */ }
                }
            }
        }
    }//GEN-LAST:event_btnMarkDeliveredActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        fieldOrderNumber.setText("");
        fieldName.setText("");
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnExcelSummaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcelSummaryActionPerformed
        int selectedOption = JOptionPane.showConfirmDialog(null, "Are you sure you want to Create an Excel Version of the Order?", "Excel Summary", JOptionPane.YES_NO_OPTION);
        if (selectedOption == JOptionPane.YES_OPTION)
        {
            String ord_num = String.valueOf(table.getValueAt(table.getSelectedRow(), 0));
            String del_date;
            double price;

            // SQL
            Connection con = db.getConnection();
            Statement statement;
            try
            {
                statement = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
                ResultSet rs;

                rs = statement.executeQuery("SELECT del_date, price FROM purchase_order WHERE ord_num = '" + ord_num + "'");
                rs.next();

                String[] date = rs.getString("del_date").split(" ");
                del_date = date[0];

                price = rs.getDouble("price");

                FileOutputStream fileOut;
                fileOut = new FileOutputStream("S://Purchase Orders/PURCHASE ORDER - " + ord_num + ".xls");

                HSSFWorkbook wb = new HSSFWorkbook();
                HSSFSheet worksheet = wb.createSheet(ord_num);
                CellStyle editableStyle = wb.createCellStyle();
                editableStyle.setLocked(false);

                HSSFRow row = worksheet.createRow((short) 0);
                HSSFCell cell = row.createCell(0);
                cell.setCellValue("Order Number");
                cell = row.createCell(1);
                cell.setCellValue(ord_num);

                row = worksheet.createRow((short) 1);
                cell = row.createCell(0);
                cell.setCellValue("Delivery Date");
                cell = row.createCell(1);
                cell.setCellValue(del_date);

                row = worksheet.createRow((short) 3);
                cell = row.createCell(0);
                cell.setCellValue("Product Code");
                cell = row.createCell(1);
                cell.setCellValue("Quantity");
                cell = row.createCell(2);
                cell.setCellValue("Avaliable");
                cell = row.createCell(3);
                cell.setCellValue("Price");

                int i = 4;
                rs = statement.executeQuery("SELECT products.code, purchase_order_details.quantity, purchase_order_details.avaliable, purchase_order_details.price FROM purchase_order_details JOIN products ON purchase_order_details.prod_num=products.prod_num WHERE purchase_order_details.ord_num = '" + ord_num + "'");
                while (rs.next())
                {
                    String code = rs.getString("code");
                    int quantity = rs.getInt("quantity");
                    int avaliable = rs.getInt("avaliable");
                    String prod_price = rs.getString("price");

                    row = worksheet.createRow((short) i);
                    cell = row.createCell(0);
                    cell.setCellValue(code);
                    cell = row.createCell(1);
                    cell.setCellValue(quantity);
                    cell = row.createCell(2);
                    cell.setCellValue(avaliable);
                    cell = row.createCell(3);
                    cell.setCellValue(prod_price);

                    i++;
                }

                row = worksheet.createRow((short) i + 1);
                cell = row.createCell(0);
                cell.setCellValue("Order Price");
                cell = row.createCell(1);
                cell.setCellValue(price);

                rs = statement.executeQuery("SELECT SUM(quantity) as total FROM purchase_order_details WHERE ord_num = '" + ord_num + "'");
                rs.next();

                row = worksheet.createRow((short) i + 2);
                cell = row.createCell(0);
                cell.setCellValue("Total Units");
                cell = row.createCell(1);
                cell.setCellValue(rs.getInt("total"));

                // Auto Size Columns
                for (int k = 0; k < 2; k++)
                {
                    worksheet.autoSizeColumn(k);
                    worksheet.setDefaultColumnStyle(i + 4, editableStyle);
                }

                wb.write(fileOut);
                fileOut.flush();
                fileOut.close();

                JOptionPane.showMessageDialog(Current.this, "Excel Order Summary Created.\n'PURCHASE ORDER - " + ord_num + ".xls'");

            }

            catch (SQLException | IOException ex)
            {
                Logger.getLogger(Current.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            finally
            {
                try
                {
                    con.close();
                }
                catch (Exception e)
                { /* ignored */ }
            }
        }
    }//GEN-LAST:event_btnExcelSummaryActionPerformed

    private void btnPOStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPOStatusActionPerformed
        int selectedOption = JOptionPane.showConfirmDialog(null, "Are you sure you want to Create an Excel Summary of PO Avaliability?", "Excel Summary", JOptionPane.YES_NO_OPTION);
        if (selectedOption == JOptionPane.YES_OPTION)
        {
            String ord_num = String.valueOf(table.getValueAt(table.getSelectedRow(), 0));

            // SQL
            Connection con = db.getConnection();
            Statement statement;
            try
            {
                FileOutputStream fileOut;
                fileOut = new FileOutputStream("S://Purchase Orders/Purchase Order " + ord_num + " Avaliability.xls");

                HSSFWorkbook wb = new HSSFWorkbook();
                HSSFSheet worksheet = wb.createSheet(ord_num);
                CellStyle editableStyle = wb.createCellStyle();
                editableStyle.setLocked(false);

                HSSFRow row = worksheet.createRow((short) 0);
                HSSFCell cell = row.createCell(0);
                cell.setCellValue("Order Number");
                cell = row.createCell(1);
                cell.setCellValue(ord_num);

                row = worksheet.createRow((short) 2);
                cell = row.createCell(0);
                cell.setCellValue("Product Code");
                cell = row.createCell(1);
                cell.setCellValue("Quantity Ordered");
                cell = row.createCell(2);
                cell.setCellValue("Sold");
                cell = row.createCell(3);
                cell.setCellValue("Avaliable");

                int i = 3;
                statement = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
                ResultSet rs = statement.executeQuery("SELECT products.code, quantity, avaliable FROM purchase_order_details JOIN products ON purchase_order_details.prod_num = products.prod_num WHERE ord_num = '" + ord_num + "'");
                while (rs.next())
                {
                    String code = rs.getString("code");
                    int quantity = rs.getInt("quantity");
                    int avaliable = rs.getInt("avaliable");
                    int sold = quantity - avaliable;

                    row = worksheet.createRow((short) i++);
                    cell = row.createCell(0);
                    cell.setCellValue(code);
                    cell = row.createCell(1);
                    cell.setCellValue(quantity);
                    cell = row.createCell(2);
                    cell.setCellValue(sold);
                    cell = row.createCell(3);
                    cell.setCellValue(avaliable);
                }

                // Auto Size Columns
                for (int k = 0; k < 4; k++)
                {
                    worksheet.autoSizeColumn(k);
                    worksheet.setDefaultColumnStyle(i + 4, editableStyle);
                }

                wb.write(fileOut);
                fileOut.flush();
                fileOut.close();

                JOptionPane.showMessageDialog(Current.this, "Excel Order Summary Created.\n'Purchase Order " + ord_num + " Avaliability.xls'");

            }
            catch (SQLException | IOException ex)
            {
                Logger.getLogger(Current.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            finally
            {
                try
                {
                    con.close();
                }
                catch (Exception e)
                { /* ignored */ }
            }
        }
    }//GEN-LAST:event_btnPOStatusActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnExcelSummary;
    private javax.swing.JButton btnFind;
    private javax.swing.JButton btnMarkDelivered;
    private javax.swing.JButton btnMarkDispatched;
    private javax.swing.JButton btnPOStatus;
    private javax.swing.JButton btnViewSummary;
    private javax.swing.JTextField fieldName;
    private javax.swing.JTextField fieldOrderNumber;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel labelName;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
