/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main.java.report;

import java.io.FileOutputStream;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javafx.util.Pair;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import static javax.swing.JOptionPane.INFORMATION_MESSAGE;
import static javax.swing.JOptionPane.QUESTION_MESSAGE;
import static javax.swing.JOptionPane.WARNING_MESSAGE;
import main.java.Database;
import static main.java.MayfairConstants.ALL_PURCHASE_TEMPLATE;
import static main.java.MayfairConstants.ALL_SALES_TEMPLATE;
import static main.java.MayfairConstants.OUT_OF_STOCK_REPORT_TEMPLATE;
import static main.java.MayfairConstants.PROD_SALES_ORDERS_DIR;
import static main.java.MayfairConstants.PROD_SALES_TEMPLATE;
import static main.java.MayfairConstants.SALES_PURCHASE_ORDERS_DIR;
import static main.java.MayfairConstants.STOCK_REPORTS_DIR;
import static main.java.MayfairConstants.STOCK_REPORT_TEMPLATE;
import static main.java.MayfairConstants.WAREHOUSE_STOCK_REPORT_TEMPLATE;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import static org.apache.poi.ss.usermodel.Font.BOLDWEIGHT_BOLD;

/**
 *
 * @author kian_bryen
 */
public class Reports extends javax.swing.JInternalFrame
{

    private final JDesktopPane desktop;
    private final Database db = new Database();
    private String sql;

    /**
     * Creates new form ViewEditProducts
     *
     * @param pane Desktop Pane
     */
    public Reports(JDesktopPane pane)
    {
        desktop = pane;
        initComponents();
        btnCustomers.setEnabled(false);
        btnCreate.setEnabled(false);
        dateSPO.setEnabled(false);
        dateEPO.setEnabled(false);
        dateSSO.setEnabled(false);
        dateESO.setEnabled(false);
        labelProduct.setEnabled(false);
        btnFind.setEnabled(false);
        comboProducts.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        btnAvailableStockReport = new javax.swing.JRadioButton();
        btnOutOfStockReport = new javax.swing.JRadioButton();
        btnSOMadeProd = new javax.swing.JRadioButton();
        btnPOMadeDate = new javax.swing.JRadioButton();
        btnSOMadeDate = new javax.swing.JRadioButton();
        dateSPO = new com.toedter.calendar.JDateChooser();
        dateEPO = new com.toedter.calendar.JDateChooser();
        dateESO = new com.toedter.calendar.JDateChooser();
        dateSSO = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        labelProduct = new javax.swing.JTextField();
        btnFind = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        comboProducts = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jSeparator5 = new javax.swing.JSeparator();
        jSeparator6 = new javax.swing.JSeparator();
        btnCustomers = new javax.swing.JRadioButton();
        jSeparator7 = new javax.swing.JSeparator();
        btnCreate = new javax.swing.JButton();
        btnWarehouseStockReport = new javax.swing.JRadioButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Reports");
        setPreferredSize(new java.awt.Dimension(630, 600));

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        jLabel1.setText("Reports");

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel4.setText("Products");

        btnAvailableStockReport.setText("Available Stock");
        btnAvailableStockReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAvailableStockReportActionPerformed(evt);
            }
        });

        btnOutOfStockReport.setText("Out of Stock");
        btnOutOfStockReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOutOfStockReportActionPerformed(evt);
            }
        });

        btnSOMadeProd.setText("Sales orders made");
        btnSOMadeProd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSOMadeProdActionPerformed(evt);
            }
        });

        btnPOMadeDate.setText("Purchase orders made");
        btnPOMadeDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPOMadeDateActionPerformed(evt);
            }
        });

        btnSOMadeDate.setText("Sales orders made");
        btnSOMadeDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSOMadeDateActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 2, 10)); // NOI18N
        jLabel6.setText("Start Date");

        jLabel7.setFont(new java.awt.Font("Lucida Grande", 2, 10)); // NOI18N
        jLabel7.setText("End Date");

        btnFind.setText("Find");
        btnFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Lucida Grande", 2, 10)); // NOI18N
        jLabel8.setText("Product Search");

        comboProducts.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboProducts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboProductsActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel5.setText("Customers");

        btnCustomers.setText("Coming soon...");

        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnWarehouseStockReport.setText("Warehouse Stock");
        btnWarehouseStockReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWarehouseStockReportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1)
                            .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnCreate))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(btnAvailableStockReport)
                                    .addComponent(jLabel1))
                                .addGap(0, 460, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addComponent(jSeparator7)
                    .addComponent(jSeparator4)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator5)
                    .addComponent(jSeparator6, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCustomers)
                        .addGap(466, 466, 466))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnWarehouseStockReport)
                            .addComponent(btnOutOfStockReport)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnPOMadeDate)
                                    .addComponent(btnSOMadeDate))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(dateSSO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(dateESO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(dateSPO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel6))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel7)
                                            .addComponent(dateEPO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSOMadeProd)
                                .addGap(43, 43, 43)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(labelProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnFind)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(comboProducts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jLabel5))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAvailableStockReport)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnWarehouseStockReport)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnOutOfStockReport)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnPOMadeDate)
                    .addComponent(dateSPO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateEPO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSOMadeDate)
                    .addComponent(dateSSO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateESO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFind)
                    .addComponent(btnSOMadeProd)
                    .addComponent(comboProducts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCustomers)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 102, Short.MAX_VALUE)
                .addComponent(btnCreate)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void createAvailableStockReport()
    {
        int selectedOption = JOptionPane.showConfirmDialog(null, "Are you sure you want to create an available stock report?", "Available Stock Report", JOptionPane.YES_NO_OPTION);
        if (selectedOption == JOptionPane.YES_OPTION)
        {
            String date = new SimpleDateFormat("dd-MM-yyyy").format(new Date());
            String fileName = STOCK_REPORTS_DIR + "Stock Report " + date + ".xls";
            try (FileOutputStream fileOut = new FileOutputStream(fileName))
            {
                HSSFWorkbook workBook = db.getHSSFWorkbook(STOCK_REPORT_TEMPLATE);
                HSSFSheet sheet = workBook.getSheet("Stock Report");
                
                // Create bold style
                HSSFCellStyle bold = workBook.createCellStyle();
                HSSFFont boldFont = workBook.createFont();
                boldFont.setBoldweight(BOLDWEIGHT_BOLD);
                bold.setFont(boldFont);
                
                int finalCellCount = 0;
                try (Statement statement = db.getConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE))
                {
                    HSSFRow row;
                    int rowCount = 0;
                    HSSFCell cell;
                    int cellCount = 3;
                    
                    // Date row
                    row = sheet.getRow(rowCount++);
                    cell = row.getCell(1);
                    cell.setCellValue(date);

                    // Headings row
                    row = sheet.getRow(rowCount++);
                                        
                    // Each undelivered purchase order becomes a header
                    ResultSet rs = statement.executeQuery("SELECT ord_num FROM purchase_order WHERE delivered = false");
                    ArrayList<String> orderNumbers = new ArrayList();
                    while (rs.next())
                    {
                        String orderNumber = rs.getString("ord_num");
                        orderNumbers.add(orderNumber);
                        
                        cell = row.createCell(cellCount++);
                        cell.setCellValue(orderNumber);
                        cell.setCellStyle(bold);
                    }
                    
                    cell = row.createCell(cellCount);
                    cell.setCellValue("Potential");
                    cell.setCellStyle(bold);
                    finalCellCount = cellCount;
                    
                    rs = statement.executeQuery("SELECT prod_num, code, in_stock FROM products");
                    HashMap<Integer, Pair<String, Integer>> products = new HashMap();
                    while (rs.next())
                    {
                        products.put(rs.getInt("prod_num"), new Pair(rs.getString("code"), rs.getInt("in_stock")));
                    }

                    for (Map.Entry<Integer, Pair<String, Integer>> product : products.entrySet())
                    {
                        int prod_num = product.getKey();
                        String code = product.getValue().getKey();
                        int in_stock = product.getValue().getValue();

                        // Reset cell count 
                        cellCount = 0;
                        row = sheet.createRow(rowCount++);
                        
                        // Cell 1 - prod num
                        cell = row.createCell(cellCount++);
                        cell.setCellValue(prod_num);
                        
                        // Cell 2 - prod code
                        cell = row.createCell(cellCount++);
                        cell.setCellValue(code);
                        
                        // Cell 3 - available
                        cell = row.createCell(cellCount++);
                        cell.setCellValue(in_stock);

                        // Loop through undelivered purchase orders
                        int total = in_stock;
                        for (String orderNumber : orderNumbers)
                        {
                            rs = statement.executeQuery("SELECT avaliable FROM purchase_order_details WHERE prod_num = " + prod_num + " AND ord_num = '" + orderNumber + "'");

                            int avaliable = 0;
                            if (rs.next())
                            {
                                avaliable = rs.getInt("avaliable");
                            }

                            // Cell * - purchase order avaliable
                            cell = row.createCell(cellCount++);
                            cell.setCellValue(avaliable);

                            total = total + avaliable;
                        }
                        
                        // Cell last - total
                        cell = row.createCell(cellCount++);
                        cell.setCellValue(total);
                    }
                }
                catch (SQLException e)
                {
                    JOptionPane.showMessageDialog(Reports.this, e);
                }

                // Auto Size Columns
                for (int i = 0; i < finalCellCount; i++)
                {
                    sheet.autoSizeColumn(i);
                }

                workBook.write(fileOut);
                fileOut.flush();
                fileOut.close();

                JOptionPane.showMessageDialog(Reports.this, "<html> <b>Stock report created successfully.</b> \n<html> <i> " + fileName + " </i>", "Report Created", INFORMATION_MESSAGE);
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(Reports.this, "<html> Error while creating stock report, please try again.\n<html> <i> If error continues to happen please contact Kian. </i>", "Error", ERROR_MESSAGE);
                JOptionPane.showMessageDialog(Reports.this, e.getStackTrace(), "Message for Kian:", ERROR_MESSAGE);
            }
        }
    }
    
    private void createWarehouseStockReport()
    {
        int selectedOption = JOptionPane.showConfirmDialog(null, "Are you sure you want to create a warehouse stock report?", "Warehouse Stock Report", JOptionPane.YES_NO_OPTION);
        if (selectedOption == JOptionPane.YES_OPTION)
        {
            String date = new SimpleDateFormat("dd-MM-yyyy").format(new Date());
            String fileName = STOCK_REPORTS_DIR + "Warehouse Stock Report " + date + ".xls";
            try (FileOutputStream fileOut = new FileOutputStream(fileName))
            {
                HSSFWorkbook workBook = db.getHSSFWorkbook(WAREHOUSE_STOCK_REPORT_TEMPLATE);
                HSSFSheet sheet = workBook.getSheet("Warehouse Stock Report");
                
                // Create bold style
                HSSFCellStyle bold = workBook.createCellStyle();
                HSSFFont boldFont = workBook.createFont();
                boldFont.setBoldweight(BOLDWEIGHT_BOLD);
                bold.setFont(boldFont);
                
                try (Statement statement = db.getConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE))
                {
                    HSSFRow row;
                    int rowCount = 2;
                    HSSFCell cell;
                    
                    // Date row
                    row = sheet.getRow(0);
                    cell = row.getCell(1);
                    cell.setCellValue(date);

                    List<String> prodNums = new ArrayList();
                    ResultSet rs = statement.executeQuery("SELECT prod_num FROM products");
                    while(rs.next())
                    {
                        prodNums.add(rs.getString("prod_num"));
                    }
                    
                    for(String prodNum : prodNums)
                    {
                        rs = statement.executeQuery("SELECT products.prod_num AS prodNum, products.code AS code, (IFNULL(SUM(sales_order_details.fromStock), 0) + products.in_stock) AS warehouseStock FROM sales_order_details LEFT JOIN sales_order ON sales_order_details.ord_num=sales_order.ord_num RIGHT JOIN products ON sales_order_details.prod_num=products.prod_num WHERE sales_order.dispatched = false AND sales_order.delivered = false AND products.prod_num = " + prodNum + " AND sales_order_details.prod_num = " + prodNum);
                        HashMap<Integer, Pair<String, Integer>> products = new HashMap();
                        while (rs.next())
                        {
                            int prod_num = rs.getInt("prodNum");
                            String code = rs.getString("code");
                            int warehouse = rs.getInt("warehouseStock");

                            // Reset cell count 
                            row = sheet.createRow(rowCount++);

                            // Cell 1 - prod num
                            cell = row.createCell(0);
                            cell.setCellValue(prod_num);

                            // Cell 2 - prod code
                            cell = row.createCell(1);
                            cell.setCellValue(code);

                            // Cell 3 - warehouse
                            cell = row.createCell(2);
                            cell.setCellValue(warehouse);
                        }
                    }
                }
                catch (SQLException e)
                {
                    JOptionPane.showMessageDialog(Reports.this, e);
                }

                // Auto Size Columns
                for (int i = 0; i < 3; i++)
                {
                    sheet.autoSizeColumn(i);
                }

                workBook.write(fileOut);
                fileOut.flush();
                fileOut.close();

                JOptionPane.showMessageDialog(Reports.this, "<html> <b>Stock report created successfully.</b> \n<html> <i> " + fileName + " </i>", "Report Created", INFORMATION_MESSAGE);
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(Reports.this, "<html> Error while creating stock report, please try again.\n<html> <i> If error continues to happen please contact Kian. </i>", "Error", ERROR_MESSAGE);
                JOptionPane.showMessageDialog(Reports.this, e.getStackTrace(), "Message for Kian:", ERROR_MESSAGE);
            }
        }
    }
    
    private void createOutOfStockReport()
    {
        int selectedOption = JOptionPane.showConfirmDialog(null, "Are you sure you want to create an out of stock report?", "Out of Stock Report", JOptionPane.YES_NO_OPTION);
        if (selectedOption == JOptionPane.YES_OPTION)
        {
            String date = new SimpleDateFormat("dd-MM-yyyy").format(new Date());
            String fileName = STOCK_REPORTS_DIR + "Out of Stock Report " + date + ".xls";
            try (FileOutputStream fileOut = new FileOutputStream(fileName))
            {
                HSSFWorkbook workBook = db.getHSSFWorkbook(OUT_OF_STOCK_REPORT_TEMPLATE);
                HSSFSheet sheet = workBook.getSheet("Out of Stock Report");
                
                try (Statement statement = db.getConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE))
                {
                    HSSFRow row;
                    int rowCount = 2;
                    HSSFCell cell;
                    
                    // Date row
                    row = sheet.getRow(0);
                    cell = row.getCell(1);
                    cell.setCellValue(date);

                    ResultSet rs = statement.executeQuery("SELECT prod_num, code, in_stock FROM products where in_stock = 0");
                    while (rs.next())
                    {
                        row = sheet.createRow(rowCount++);
                        cell = row.createCell(0);
                        cell.setCellValue(rs.getString("prod_num"));
                        cell = row.createCell(1);
                        cell.setCellValue(rs.getString("code"));
                    }
                }
                catch (SQLException e)
                {
                    JOptionPane.showMessageDialog(Reports.this, e);
                }

                // Auto Size Columns
                for (int i = 0; i < 2; i++)
                {
                    sheet.autoSizeColumn(i);
                }

                workBook.write(fileOut);
                fileOut.flush();
                fileOut.close();

                JOptionPane.showMessageDialog(Reports.this, "<html> <b>Out of Stock report created successfully.</b> \n<html> <i> " + fileName + " </i>", "Report Created", INFORMATION_MESSAGE);
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(Reports.this, "<html> Error while creating out of stock report, please try again.\n<html> <i> If error continues to happen please contact Kian. </i>", "Error", ERROR_MESSAGE);
                JOptionPane.showMessageDialog(Reports.this, e.getStackTrace(), "Message for Kian:", ERROR_MESSAGE);
            }
        }
    }
    
    private void createPurchaseOrderReportByDates()
    {
        int selectedOption = JOptionPane.showConfirmDialog(null, "Are you sure you want to create a purchase orders report?", "Purchase Orders Report", JOptionPane.YES_NO_OPTION);
        if (selectedOption == JOptionPane.YES_OPTION)
        {
            try (Statement statement = db.getConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE))
            {
                SimpleDateFormat df1 = new SimpleDateFormat("dd-MM-yy");
                SimpleDateFormat df2 = new SimpleDateFormat("yyyy-MM-dd");
                Date startDate = dateSPO.getDate();
                Date endDate = dateEPO.getDate();

                ResultSet rs = statement.executeQuery("SELECT products.prod_num, products.code, purchase_order_details.quantity FROM purchase_order_details JOIN purchase_order ON purchase_order_details.ord_num = purchase_order.ord_num JOIN products ON purchase_order_details.prod_num = products.prod_num WHERE del_date >= '" + df2.format(startDate) + "' AND del_date <= '" + df2.format(endDate) + "'");           
                if(rs.isBeforeFirst())
                {
                    String fileName = SALES_PURCHASE_ORDERS_DIR + "Purchase Orders " + df1.format(startDate) + " " + df1.format(endDate) + ".xls";
                    try (FileOutputStream fileOut = new FileOutputStream(fileName))
                    {
                        HSSFWorkbook workBook = db.getHSSFWorkbook(ALL_PURCHASE_TEMPLATE);
                        HSSFSheet sheet = workBook.getSheet("Purchase Orders Made");

                        HSSFRow row;
                        int rowCount = 0;
                        HSSFCell cell;

                        // Start date
                        row = sheet.getRow(rowCount++);
                        cell = row.getCell(5);
                        cell.setCellValue(df1.format(startDate));

                        // End date
                        row = sheet.getRow(rowCount++);
                        cell = row.getCell(5);
                        cell.setCellValue(df1.format(endDate));

                        // Fill table
                        while(rs.next())
                        {
                            // num
                            cell = row.createCell(0);
                            cell.setCellValue(rs.getString("prod_num"));
                            // code
                            cell = row.createCell(1);
                            cell.setCellValue(rs.getString("code"));
                            // quant
                            cell = row.createCell(2);
                            cell.setCellValue(rs.getString("quantity"));

                            row = sheet.createRow(rowCount++);
                        }

                        // Auto Size Columns
                        for (int i = 0; i < 3; i++)
                        {
                            sheet.autoSizeColumn(i);
                        }

                        workBook.write(fileOut);
                        fileOut.flush();
                        fileOut.close();

                        JOptionPane.showMessageDialog(Reports.this, "<html> <b>Purchase orders report created successfully.</b> \n<html> <i> " + fileName + " </i>", "Report Created", INFORMATION_MESSAGE);
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(Reports.this, "<html> No purchase orders made between <b> " + df1.format(startDate) + " </b> and <b> " + df1.format(endDate) + " </b>", "Report not created", INFORMATION_MESSAGE);
                }
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(Reports.this, "<html> Error while creating purchase orders report, please try again.\n<html> <i> If error continues to happen please contact Kian. </i>", "Error", ERROR_MESSAGE);
                JOptionPane.showMessageDialog(Reports.this, e.getStackTrace(), "Message for Kian:", ERROR_MESSAGE);
            }
        }
    }
    
    private void createSalesOrderReportByDates()
    {
        int selectedOption = JOptionPane.showConfirmDialog(null, "Are you sure you want to create a sales orders report?", "Sales Orders Report", JOptionPane.YES_NO_OPTION);
        if (selectedOption == JOptionPane.YES_OPTION)
        {
            try (Statement statement = db.getConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE))
            {
                SimpleDateFormat df1 = new SimpleDateFormat("dd-MM-yy");
                SimpleDateFormat df2 = new SimpleDateFormat("yyyy-MM-dd");
                Date startDate = dateSSO.getDate();
                Date endDate = dateESO.getDate();

                ResultSet rs = statement.executeQuery("SELECT products.prod_num, products.code, sales_order_details.quantity FROM sales_order_details JOIN sales_order ON sales_order_details.ord_num = sales_order.ord_num JOIN products ON sales_order_details.prod_num = products.prod_num WHERE del_date >= '" + df2.format(startDate) + "' AND del_date <= '" + df2.format(endDate) + "'");           
                if(rs.isBeforeFirst())
                {
                    String fileName = SALES_PURCHASE_ORDERS_DIR + "Sales Orders " + df1.format(startDate) + " " + df1.format(endDate) + ".xls";
                    try (FileOutputStream fileOut = new FileOutputStream(fileName))
                    {
                        HSSFWorkbook workBook = db.getHSSFWorkbook(ALL_SALES_TEMPLATE);
                        HSSFSheet sheet = workBook.getSheet("Sales Orders Made");

                        HSSFRow row;
                        int rowCount = 0;
                        HSSFCell cell;

                        // Start date
                        row = sheet.getRow(rowCount++);
                        cell = row.getCell(5);
                        cell.setCellValue(df1.format(startDate));

                        // End date
                        row = sheet.getRow(rowCount++);
                        cell = row.getCell(5);
                        cell.setCellValue(df1.format(endDate));

                        // Fill table
                        while(rs.next())
                        {
                            // num
                            cell = row.createCell(0);
                            cell.setCellValue(rs.getString("prod_num"));
                            // code
                            cell = row.createCell(1);
                            cell.setCellValue(rs.getString("code"));
                            // quant
                            cell = row.createCell(2);
                            cell.setCellValue(rs.getString("quantity"));

                            row = sheet.createRow(rowCount++);
                        }

                        // Auto Size Columns
                        for (int i = 0; i < 3; i++)
                        {
                            sheet.autoSizeColumn(i);
                        }

                        workBook.write(fileOut);
                        fileOut.flush();
                        fileOut.close();

                        JOptionPane.showMessageDialog(Reports.this, "<html> <b>Sales orders report created successfully.</b> \n<html> <i> " + fileName + " </i>", "Report Created", INFORMATION_MESSAGE);
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(Reports.this, "<html> No sales orders made between <b> " + df1.format(startDate) + " </b> and <b> " + df1.format(endDate) + " </b>", "Report not created", INFORMATION_MESSAGE);
                }
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(Reports.this, "<html> Error while creating sales orders report, please try again.\n<html> <i> If error continues to happen please contact Kian. </i>", "Error", ERROR_MESSAGE);
                JOptionPane.showMessageDialog(Reports.this, e.getStackTrace(), "Message for Kian:", ERROR_MESSAGE);
            }
        }
    }
    
    private void createSalesOrderReportByProduct(String prodCode)
    {
        int selectedOption = JOptionPane.showConfirmDialog(null, "Are you sure you want to create a sales orders report?", "Sales Orders Report", JOptionPane.YES_NO_OPTION);
        if (selectedOption == JOptionPane.YES_OPTION)
        {
            try (Statement statement = db.getConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE))
            {
                ResultSet rs = statement.executeQuery("SELECT prod_num FROM products where code = '" + prodCode + "'");
                if(rs.next())
                {
                    String prodNum = rs.getString("prod_num");
                    
                    rs = statement.executeQuery("SELECT sales_order_details.ord_num, sales_order_details.quantity, sales_order.cust_num, customers.name, sales_order.ord_date, sales_order.del_date, sales_order.dispatched, sales_order.delivered FROM sales_order JOIN sales_order_details ON sales_order.ord_num=sales_order_details.ord_num JOIN customers ON sales_order.cust_num=customers.cust_num WHERE sales_order_details.prod_num = " + prodNum);
                    if(rs.isBeforeFirst())  
                    {
                        String fileName = PROD_SALES_ORDERS_DIR + "Sales Orders " + prodCode.replaceAll("/", "") + ".xls";
                        try (FileOutputStream fileOut = new FileOutputStream(fileName))
                        {

                            HSSFWorkbook workBook = db.getHSSFWorkbook(PROD_SALES_TEMPLATE);
                            HSSFSheet sheet = workBook.getSheet("Sales Orders Made");

                            HSSFRow row;
                            int rowCount = 3;
                            HSSFCell cell;

                            // Prod code
                            row = sheet.getRow(0);
                            cell = row.getCell(1);
                            cell.setCellValue(prodCode);

                            // Fill table
                            while(rs.next())
                            {
                                row = sheet.createRow(rowCount++);

                                cell = row.createCell(0);
                                cell.setCellValue(rs.getString("ord_num"));

                                cell = row.createCell(1);
                                cell.setCellValue(rs.getString("name"));
                                cell = row.createCell(2);
                                cell.setCellValue(rs.getString("ord_date"));

                                cell = row.createCell(3);
                                cell.setCellValue(rs.getString("del_date"));

                                cell = row.createCell(4);
                                if (rs.getInt("dispatched") == 1) 
                                {
                                    cell.setCellValue("yes");
                                } 
                                else 
                                {
                                    cell.setCellValue("no");
                                }

                                cell = row.createCell(5);
                                if (rs.getInt("delivered") == 1) 
                                {
                                    cell.setCellValue("yes");
                                } 
                                else 
                                {
                                    cell.setCellValue("no");
                                }

                                cell = row.createCell(6);
                                cell.setCellValue(rs.getString("quantity"));
                            }

                            // Auto Size Columns
                            for (int i = 0; i < 7; i++)
                            {
                                sheet.autoSizeColumn(i);
                            }

                            workBook.write(fileOut);
                            fileOut.flush();
                            fileOut.close();

                            JOptionPane.showMessageDialog(Reports.this, "<html> <b>Sales orders report created successfully.</b> \n<html> <i> " + fileName + " </i>", "Report Created", INFORMATION_MESSAGE);
                        }
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(Reports.this, "<html> No sales orders made for <b> " + prodCode + " </b>", "Report not created", INFORMATION_MESSAGE);
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(Reports.this, "<html>Product does not exist - <b>" + prodCode + "</b> \nPlease select from drop down box", "Unknown Product",WARNING_MESSAGE);
                }
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(Reports.this, "<html> Error while creating sales orders report, please try again.\n<html> <i> If error continues to happen please contact Kian. </i>", "Error", ERROR_MESSAGE);
                JOptionPane.showMessageDialog(Reports.this, e.getStackTrace(), "Message for Kian:", ERROR_MESSAGE);
            }
        }
    }
    
    private void btnAvailableStockReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAvailableStockReportActionPerformed
        btnAvailableStockReport.setSelected(true);
        btnWarehouseStockReport.setSelected(false);
        btnOutOfStockReport.setSelected(false);
        btnPOMadeDate.setSelected(false);
        btnSOMadeDate.setSelected(false);
        btnSOMadeProd.setSelected(false);
        
        dateSPO.setEnabled(false);
        dateEPO.setEnabled(false);
        
        dateSSO.setEnabled(false);
        dateESO.setEnabled(false);
        
        labelProduct.setEnabled(false);
        btnFind.setEnabled(false);
        comboProducts.setEnabled(false);
        
        btnCreate.setEnabled(true);
    }//GEN-LAST:event_btnAvailableStockReportActionPerformed

    private void btnOutOfStockReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutOfStockReportActionPerformed
        btnAvailableStockReport.setSelected(false);
        btnWarehouseStockReport.setSelected(false);
        btnOutOfStockReport.setSelected(true);
        btnPOMadeDate.setSelected(false);
        btnSOMadeDate.setSelected(false);
        btnSOMadeProd.setSelected(false);
        
        dateSPO.setEnabled(false);
        dateEPO.setEnabled(false);
        
        dateSSO.setEnabled(false);
        dateESO.setEnabled(false);
        
        labelProduct.setEnabled(false);
        btnFind.setEnabled(false);
        comboProducts.setEnabled(false);
        
        btnCreate.setEnabled(true);
    }//GEN-LAST:event_btnOutOfStockReportActionPerformed

    private void btnPOMadeDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPOMadeDateActionPerformed
        btnAvailableStockReport.setSelected(false);
        btnWarehouseStockReport.setSelected(false);
        btnOutOfStockReport.setSelected(false);
        btnPOMadeDate.setSelected(true);
        btnSOMadeDate.setSelected(false);
        btnSOMadeProd.setSelected(false);
        
        dateSPO.setEnabled(true);
        dateEPO.setEnabled(true);
        
        dateSSO.setEnabled(false);
        dateESO.setEnabled(false);
        
        labelProduct.setEnabled(false);
        btnFind.setEnabled(false);
        comboProducts.setEnabled(false);
        
        btnCreate.setEnabled(true);
    }//GEN-LAST:event_btnPOMadeDateActionPerformed

    private void btnSOMadeDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSOMadeDateActionPerformed
        btnAvailableStockReport.setSelected(false);
        btnWarehouseStockReport.setSelected(false);
        btnOutOfStockReport.setSelected(false);
        btnPOMadeDate.setSelected(false);
        btnSOMadeDate.setSelected(true);
        btnSOMadeProd.setSelected(false);
        
        dateSPO.setEnabled(false);
        dateEPO.setEnabled(false);
        
        dateSSO.setEnabled(true);
        dateESO.setEnabled(true);
        
        labelProduct.setEnabled(false);
        btnFind.setEnabled(false);
        comboProducts.setEnabled(false);
        
        btnCreate.setEnabled(true);
    }//GEN-LAST:event_btnSOMadeDateActionPerformed

    private void btnSOMadeProdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSOMadeProdActionPerformed
        btnAvailableStockReport.setSelected(false);
        btnWarehouseStockReport.setSelected(false);
        btnOutOfStockReport.setSelected(false);
        btnPOMadeDate.setSelected(false);
        btnSOMadeDate.setSelected(false);
        btnSOMadeProd.setSelected(true);
        
        dateSPO.setEnabled(false);
        dateEPO.setEnabled(false);
        
        dateSSO.setEnabled(false);
        dateESO.setEnabled(false);
        
        labelProduct.setEnabled(true);
        btnFind.setEnabled(true);
        comboProducts.setEnabled(true);
        
        btnCreate.setEnabled(true);
    }//GEN-LAST:event_btnSOMadeProdActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        if(btnAvailableStockReport.isSelected())
        {
            createAvailableStockReport();
        }
        if(btnWarehouseStockReport.isSelected())
        {
            createWarehouseStockReport();
        }
        if(btnOutOfStockReport.isSelected())
        {
            createOutOfStockReport();
        }
        if(btnPOMadeDate.isSelected())
        {
            if(dateSPO.getDate() == null || dateEPO.getDate() == null)
            {
                JOptionPane.showMessageDialog(Reports.this, "Please select start and end date", "Missing information", QUESTION_MESSAGE);
            }
            else
            {
                createPurchaseOrderReportByDates();
            }
        }
        if(btnSOMadeDate.isSelected())
        {
            if(dateSSO.getDate() == null || dateESO.getDate() == null)
            {
                JOptionPane.showMessageDialog(Reports.this, "Please select start and end date", "Missing information", QUESTION_MESSAGE);
            }
            else
            {
                createSalesOrderReportByDates();
            }
        }
        if(btnSOMadeProd.isSelected())
        {
            String prodCode = labelProduct.getText();
            
            if(prodCode.isEmpty())
            {
               JOptionPane.showMessageDialog(Reports.this, "Please select a product", "Missing information", QUESTION_MESSAGE);
            }
            else
            {
                createSalesOrderReportByProduct(prodCode);
            }
        }
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionPerformed
         try (Statement statement = db.getConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE))
        {
            ArrayList<String> products = new ArrayList<>();
            ResultSet rs = statement.executeQuery("SELECT code FROM products WHERE code LIKE '%" + labelProduct.getText() + "%' ORDER BY code ASC");
            while (rs.next())
            {
                products.add(rs.getString("code"));
            }
            
            comboProducts.setModel(new javax.swing.DefaultComboBoxModel(products.toArray()));
        }
        catch (SQLException e) 
        {
            JOptionPane.showMessageDialog(Reports.this, "Error while searching products, please try again.");
            JOptionPane.showMessageDialog(Reports.this, e);
        } 
    }//GEN-LAST:event_btnFindActionPerformed

    private void comboProductsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboProductsActionPerformed
        String product = (String) comboProducts.getSelectedItem();
        labelProduct.setText(product);
    }//GEN-LAST:event_comboProductsActionPerformed

    private void btnWarehouseStockReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWarehouseStockReportActionPerformed
        btnAvailableStockReport.setSelected(false);
        btnWarehouseStockReport.setSelected(true);
        btnOutOfStockReport.setSelected(false);
        btnPOMadeDate.setSelected(false);
        btnSOMadeDate.setSelected(false);
        btnSOMadeProd.setSelected(false);
        
        dateSPO.setEnabled(false);
        dateEPO.setEnabled(false);
        
        dateSSO.setEnabled(false);
        dateESO.setEnabled(false);
        
        labelProduct.setEnabled(false);
        btnFind.setEnabled(false);
        comboProducts.setEnabled(false);
        
        btnCreate.setEnabled(true);
    }//GEN-LAST:event_btnWarehouseStockReportActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton btnAvailableStockReport;
    private javax.swing.JButton btnCreate;
    private javax.swing.JRadioButton btnCustomers;
    private javax.swing.JButton btnFind;
    private javax.swing.JRadioButton btnOutOfStockReport;
    private javax.swing.JRadioButton btnPOMadeDate;
    private javax.swing.JRadioButton btnSOMadeDate;
    private javax.swing.JRadioButton btnSOMadeProd;
    private javax.swing.JRadioButton btnWarehouseStockReport;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox comboProducts;
    private com.toedter.calendar.JDateChooser dateEPO;
    private com.toedter.calendar.JDateChooser dateESO;
    private com.toedter.calendar.JDateChooser dateSPO;
    private com.toedter.calendar.JDateChooser dateSSO;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JTextField labelProduct;
    // End of variables declaration//GEN-END:variables
}
