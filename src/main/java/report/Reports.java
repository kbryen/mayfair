/*
 * Mayfair Stock Control.
 *
 */
package main.java.report;

import main.java.report.xls.AvailableStockReportXls;
import java.io.FileOutputStream;
import java.math.RoundingMode;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javafx.util.Pair;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import static javax.swing.JOptionPane.INFORMATION_MESSAGE;
import static javax.swing.JOptionPane.QUESTION_MESSAGE;
import static javax.swing.JOptionPane.WARNING_MESSAGE;
import main.java.Database;
import static main.java.MayfairStatic.ALL_PURCHASE_TEMPLATE;
import static main.java.MayfairStatic.ALL_SALES_TEMPLATE;
import static main.java.MayfairStatic.CUSTOMERS_TEMPLATE;
import static main.java.MayfairStatic.CUSTOMER_REPORTS_DIR;
import static main.java.MayfairStatic.OUT_OF_STOCK_REPORT_TEMPLATE;
import static main.java.MayfairStatic.PROD_SALES_ORDERS_DIR;
import static main.java.MayfairStatic.PROD_SALES_TEMPLATE;
import static main.java.MayfairStatic.SALES_PURCHASE_ORDERS_DIR;
import static main.java.MayfairStatic.STOCK_REPORTS_DIR;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFDataFormat;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import static org.apache.poi.ss.usermodel.Font.BOLDWEIGHT_BOLD;
import static main.java.MayfairStatic.WHS_REPORT_TEMPLATE;
import main.java.report.xls.DiscontinuedStockReportXls;
import main.java.report.xls.XlsReport;

/**
 *
 * @author kian_bryen
 */
public class Reports extends javax.swing.JInternalFrame
{

    private final JDesktopPane desktop;
    private final Database db = new Database();

    /**
     * Creates new form ViewEditProducts
     *
     * @param pane Desktop Pane
     */
    public Reports(JDesktopPane pane)
    {
        desktop = pane;
        initComponents();
        btnCreate.setEnabled(false);
        dateSPO.setEnabled(false);
        dateEPO.setEnabled(false);
        dateSSO.setEnabled(false);
        dateESO.setEnabled(false);
        dateSR.setEnabled(false);
        dateER.setEnabled(false);
        checkAll.setEnabled(false);
        labelProduct.setEnabled(false);
        btnFindProd.setEnabled(false);
        comboProducts.setEnabled(false);
        labelReference.setEnabled(false);
        btnFindCust.setEnabled(false);
        comboCustomers.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        btnAvailableStockReport = new javax.swing.JRadioButton();
        btnOutOfStockReport = new javax.swing.JRadioButton();
        btnSOMadeProd = new javax.swing.JRadioButton();
        btnPOMadeDate = new javax.swing.JRadioButton();
        btnSOMadeDate = new javax.swing.JRadioButton();
        dateSPO = new com.toedter.calendar.JDateChooser();
        dateEPO = new com.toedter.calendar.JDateChooser();
        dateESO = new com.toedter.calendar.JDateChooser();
        dateSSO = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        labelProduct = new javax.swing.JTextField();
        btnFindProd = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        comboProducts = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jSeparator5 = new javax.swing.JSeparator();
        jSeparator6 = new javax.swing.JSeparator();
        btnAllCustomers = new javax.swing.JRadioButton();
        jSeparator7 = new javax.swing.JSeparator();
        btnCreate = new javax.swing.JButton();
        btnWarehouseStockReport = new javax.swing.JRadioButton();
        dateSR = new com.toedter.calendar.JDateChooser();
        dateER = new com.toedter.calendar.JDateChooser();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        checkAll = new javax.swing.JCheckBox();
        btnCustomers = new javax.swing.JRadioButton();
        btnFindCust = new javax.swing.JButton();
        comboCustomers = new javax.swing.JComboBox();
        labelReference = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        btnDiscontinuedStockReport = new javax.swing.JRadioButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Reports");
        setPreferredSize(new java.awt.Dimension(630, 720));

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        jLabel1.setText("Reports");

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel4.setText("Products");

        btnAvailableStockReport.setText("Available Stock");
        btnAvailableStockReport.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnAvailableStockReportActionPerformed(evt);
            }
        });

        btnOutOfStockReport.setText("Out of Stock");
        btnOutOfStockReport.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnOutOfStockReportActionPerformed(evt);
            }
        });

        btnSOMadeProd.setText("Sales orders made");
        btnSOMadeProd.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnSOMadeProdActionPerformed(evt);
            }
        });

        btnPOMadeDate.setText("Purchase orders made");
        btnPOMadeDate.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnPOMadeDateActionPerformed(evt);
            }
        });

        btnSOMadeDate.setText("Sales orders made");
        btnSOMadeDate.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnSOMadeDateActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 2, 10)); // NOI18N
        jLabel6.setText("Start Date");

        jLabel7.setFont(new java.awt.Font("Lucida Grande", 2, 10)); // NOI18N
        jLabel7.setText("End Date");

        btnFindProd.setText("Find");
        btnFindProd.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnFindProdActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Lucida Grande", 2, 10)); // NOI18N
        jLabel8.setText("Product Search");

        comboProducts.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboProducts.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                comboProductsActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel5.setText("Customers");

        btnAllCustomers.setText("All customers");
        btnAllCustomers.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnAllCustomersActionPerformed(evt);
            }
        });

        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnCreateActionPerformed(evt);
            }
        });

        btnWarehouseStockReport.setText("Warehouse Stock");
        btnWarehouseStockReport.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnWarehouseStockReportActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Lucida Grande", 2, 10)); // NOI18N
        jLabel9.setText("Start Date");

        jLabel10.setFont(new java.awt.Font("Lucida Grande", 2, 10)); // NOI18N
        jLabel10.setText("End Date");

        checkAll.setFont(new java.awt.Font("Lucida Grande", 2, 12)); // NOI18N
        checkAll.setText("All Dates");
        checkAll.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                checkAllActionPerformed(evt);
            }
        });

        btnCustomers.setText("Specific customers");
        btnCustomers.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnCustomersActionPerformed(evt);
            }
        });

        btnFindCust.setText("Find");
        btnFindCust.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnFindCustActionPerformed(evt);
            }
        });

        comboCustomers.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboCustomers.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                comboCustomersActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Lucida Grande", 2, 10)); // NOI18N
        jLabel11.setText("Customer Reference Search");

        btnDiscontinuedStockReport.setText("Discontinued Stock");
        btnDiscontinuedStockReport.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnDiscontinuedStockReportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnCustomers)
                            .addComponent(btnAllCustomers))
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dateSR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(dateER, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(checkAll)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(labelReference, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnFindCust)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(comboCustomers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(53, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator6)
                            .addComponent(jSeparator5)
                            .addComponent(jSeparator4)
                            .addComponent(jSeparator2)
                            .addComponent(jSeparator1)
                            .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnWarehouseStockReport)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnDiscontinuedStockReport))
                                    .addComponent(btnOutOfStockReport)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnPOMadeDate)
                                            .addComponent(btnSOMadeDate))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(dateSSO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(dateESO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(dateSPO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel6))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(jLabel7)
                                                    .addComponent(dateEPO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnSOMadeProd)
                                        .addGap(43, 43, 43)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel8)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(labelProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnFindProd)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(comboProducts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel4)
                                    .addComponent(btnAvailableStockReport)
                                    .addComponent(jLabel1))
                                .addGap(0, 162, Short.MAX_VALUE))
                            .addComponent(jSeparator7, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCreate)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAvailableStockReport)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnWarehouseStockReport)
                    .addComponent(btnDiscontinuedStockReport))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnOutOfStockReport)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnPOMadeDate)
                    .addComponent(dateSPO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateEPO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSOMadeDate)
                    .addComponent(dateSSO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateESO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFindProd)
                    .addComponent(btnSOMadeProd)
                    .addComponent(comboProducts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCustomers)
                    .addComponent(labelReference, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFindCust)
                    .addComponent(comboCustomers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAllCustomers))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10))
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkAll)
                            .addComponent(dateSR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dateER, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 130, Short.MAX_VALUE)
                .addComponent(btnCreate)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void createDiscontinuedStockReport()
    {
        int selectedOption = JOptionPane.showConfirmDialog(null, "Are you sure you want to create a discontinued stock report?", "Discontinued Stock Report", JOptionPane.YES_NO_OPTION);
        if (selectedOption == JOptionPane.YES_OPTION)
        {
            Map<String, Integer> products = new HashMap();
            try (Statement statement = MayfairStatic.getConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE))
            {
                // Get a list of all discontinued products
                ResultSet rs = statement.executeQuery("SELECT code, in_stock "
                        + "FROM products WHERE discon = true");
                while (rs.next())
                {
                    String code = rs.getString("code");
                    int in_stock = rs.getInt("in_stock");
                    products.put(code, in_stock);
                }
            }
            catch (SQLException e)
            {
                JOptionPane.showMessageDialog(Reports.this, e);
            }

            DiscontinuedStockReportXls stockReport = new DiscontinuedStockReportXls();
            stockReport.setLoggingComponent(this);
            stockReport.setReportName("Discontinued Stock Report");
            stockReport.setProducts(products);
            stockReport.populateWorkbook();
            stockReport.save(stockReport.getFilename());
        }
    }

    private void createAvailableStockReport()
    {
        int selectedOption = JOptionPane.showConfirmDialog(null, "Are you sure you want to create an available stock report?", "Available Stock Report", JOptionPane.YES_NO_OPTION);
        if (selectedOption == JOptionPane.YES_OPTION)
        {
            Map<String, Map<String, Integer>> productCounts = new HashMap();
            List<String> purchaseOrders = new ArrayList();
            try (Statement statement = db.getConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE))
            {
                // Get a list of all undelivered po's
                ResultSet rs = statement.executeQuery("SELECT ord_num "
                        + "FROM purchase_order "
                        + "WHERE delivered = false");
                while (rs.next())
                {
                    purchaseOrders.add(rs.getString("ord_num"));
                }

                // Get a list of all products
                Map<Integer, String> prodNumToCode = new HashMap();
                rs = statement.executeQuery("SELECT prod_num, code, in_stock "
                        + "FROM products");
                while (rs.next())
                {
                    int prod_num = rs.getInt("prod_num");
                    String code = rs.getString("code");
                    prodNumToCode.put(prod_num, code);

                    Map<String, Integer> productCount = new HashMap();
                    productCounts.put(code, productCount);
                    int in_stock = rs.getInt("in_stock");
                    productCount.put("In Stock", in_stock);

                    for (String purchaseOrder : purchaseOrders)
                    {
                        productCount.put(purchaseOrder, 0);
                    }
                }

                // Update po avaliability for products
                rs = statement.executeQuery("SELECT purchase_order_details.ord_num, prod_num, avaliable "
                        + "FROM purchase_order_details "
                        + "JOIN purchase_order "
                        + "ON purchase_order_details.ord_num=purchase_order.ord_num "
                        + "WHERE delivered = false");
                while (rs.next())
                {
                    String ord_num = rs.getString("purchase_order_details.ord_num");
                    int prod_num = rs.getInt("prod_num");
                    int avaliable = rs.getInt("avaliable");

                    String code = prodNumToCode.get(prod_num);
                    productCounts.get(code).put(ord_num, avaliable);
                }

                // Calculate totals / out of stocks
                List<String> outOfStocks = new ArrayList();
                for (Map.Entry<String, Map<String, Integer>> products : productCounts.entrySet())
                {
                    String code = products.getKey();
                    Map<String, Integer> counts = products.getValue();

                    int total = 0;
                    for (Integer value : counts.values())
                    {
                        total += value;
                    }

                    if (total != 0)
                    {
                        counts.put("Total", total);
                    }
                    else
                    {
                        outOfStocks.add(code);
                    }
                }

                // Remove out of stocks
                for (String outOfStock : outOfStocks)
                {
                    productCounts.remove(outOfStock);
                }
            }
            catch (SQLException e)
            {
                JOptionPane.showMessageDialog(Reports.this, e);
            }

            AvailableStockReportXls stockReport = new AvailableStockReportXls();
            stockReport.setLoggingComponent(this);
            stockReport.setReportName("Available Stock Report");
            stockReport.setProductCounts(productCounts);
            stockReport.setPurchaseOrders(purchaseOrders);
            stockReport.populateWorkbook();
            stockReport.save(stockReport.getFilename());
        }
    }

    private void createWarehouseStockReport()
    {
        int selectedOption = JOptionPane.showConfirmDialog(null, "Are you sure you want to create a warehouse stock report?", "Warehouse Stock Report", JOptionPane.YES_NO_OPTION);
        if (selectedOption == JOptionPane.YES_OPTION)
        {
            String date = new SimpleDateFormat("dd-MM-yyyy").format(new Date());
            String fileName = STOCK_REPORTS_DIR + "Warehouse Stock Report " + date + ".xls";
            try (FileOutputStream fileOut = new FileOutputStream(fileName))
            {
                HSSFWorkbook workBook = XlsReport.getHSSFWorkbook(WHS_REPORT_TEMPLATE);
                HSSFSheet sheet = workBook.getSheet("Warehouse Stock Report");

                HSSFCellStyle numberStyle = workBook.createCellStyle();
                numberStyle.setDataFormat(HSSFDataFormat.getBuiltinFormat("0"));

                // Create bold style
                HSSFCellStyle bold = workBook.createCellStyle();
                HSSFFont boldFont = workBook.createFont();
                boldFont.setBoldweight(BOLDWEIGHT_BOLD);
                bold.setFont(boldFont);

                try (Statement statement = db.getConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE))
                {
                    HSSFRow row;
                    int rowCount = 2;
                    HSSFCell cell;

                    // Date row
                    row = sheet.getRow(0);
                    cell = row.getCell(1);
                    cell.setCellValue(date);

                    List<String> prodNums = new ArrayList();
                    ResultSet rs = statement.executeQuery("SELECT prod_num FROM products");
                    while (rs.next())
                    {
                        prodNums.add(rs.getString("prod_num"));
                    }

                    for (String prodNum : prodNums)
                    {
                        rs = statement.executeQuery("SELECT products.prod_num AS prodNum, products.code AS code, (IFNULL(SUM(sales_order_details.fromStock), 0) + products.in_stock) AS warehouseStock FROM sales_order_details LEFT JOIN sales_order ON sales_order_details.ord_num=sales_order.ord_num RIGHT JOIN products ON sales_order_details.prod_num=products.prod_num WHERE sales_order.dispatched = false AND sales_order.delivered = false AND products.prod_num = " + prodNum + " AND sales_order_details.prod_num = " + prodNum);
                        HashMap<Integer, Pair<String, Integer>> products = new HashMap();
                        while (rs.next())
                        {
                            int prod_num = rs.getInt("prodNum");
                            String code = rs.getString("code");
                            int warehouse = rs.getInt("warehouseStock");

                            // Reset cell count 
                            row = sheet.createRow(rowCount++);

                            // Cell 1 - prod num
                            cell = row.createCell(0);
                            cell.setCellValue(prod_num);
                            cell.setCellStyle(numberStyle);

                            // Cell 2 - prod code
                            cell = row.createCell(1);
                            cell.setCellValue(code);

                            // Cell 3 - warehouse
                            cell = row.createCell(2);
                            cell.setCellValue(warehouse);
                            cell.setCellStyle(numberStyle);
                        }
                    }
                }
                catch (SQLException e)
                {
                    JOptionPane.showMessageDialog(Reports.this, e);
                }

                // Auto Size Columns
                for (int i = 0; i < 3; i++)
                {
                    sheet.autoSizeColumn(i);
                }

                workBook.write(fileOut);
                fileOut.flush();
                fileOut.close();

                JOptionPane.showMessageDialog(Reports.this, "<html> <b>Stock report created successfully.</b> \n<html> <i> " + fileName + " </i>", "Report Created", INFORMATION_MESSAGE);
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(Reports.this, "<html> Error while creating stock report, please try again.\n<html> <i> If error continues to happen please contact Kian. </i>", "Error", ERROR_MESSAGE);
                JOptionPane.showMessageDialog(Reports.this, e.getStackTrace(), "Message for Kian:", ERROR_MESSAGE);
            }
        }
    }

    private void createOutOfStockReport()
    {
        int selectedOption = JOptionPane.showConfirmDialog(null, "Are you sure you want to create an out of stock report?", "Out of Stock Report", JOptionPane.YES_NO_OPTION);
        if (selectedOption == JOptionPane.YES_OPTION)
        {
            String date = new SimpleDateFormat("dd-MM-yyyy").format(new Date());
            String fileName = STOCK_REPORTS_DIR + "Out of Stock Report " + date + ".xls";
            try (FileOutputStream fileOut = new FileOutputStream(fileName))
            {
                HSSFWorkbook workBook = XlsReport.getHSSFWorkbook(OUT_OF_STOCK_REPORT_TEMPLATE);
                HSSFSheet sheet = workBook.getSheet("Out of Stock Report");

                HSSFCellStyle numberStyle = workBook.createCellStyle();
                numberStyle.setDataFormat(HSSFDataFormat.getBuiltinFormat("0"));

                try (Statement statement = db.getConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE))
                {
                    HSSFRow row;
                    int rowCount = 2;
                    HSSFCell cell;

                    // Date row
                    row = sheet.getRow(0);
                    cell = row.getCell(1);
                    cell.setCellValue(date);

                    ResultSet rs = statement.executeQuery("SELECT prod_num, code FROM products where in_stock = 0");
                    while (rs.next())
                    {
                        row = sheet.createRow(rowCount++);
                        cell = row.createCell(0);
                        cell.setCellValue(rs.getInt("prod_num"));
                        cell.setCellStyle(numberStyle);
                        cell = row.createCell(1);
                        cell.setCellValue(rs.getString("code"));
                    }
                }
                catch (SQLException e)
                {
                    JOptionPane.showMessageDialog(Reports.this, e);
                }

                // Auto Size Columns
                for (int i = 0; i < 2; i++)
                {
                    sheet.autoSizeColumn(i);
                }

                workBook.write(fileOut);
                fileOut.flush();
                fileOut.close();

                JOptionPane.showMessageDialog(Reports.this, "<html> <b>Out of Stock report created successfully.</b> \n<html> <i> " + fileName + " </i>", "Report Created", INFORMATION_MESSAGE);
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(Reports.this, "<html> Error while creating out of stock report, please try again.\n<html> <i> If error continues to happen please contact Kian. </i>", "Error", ERROR_MESSAGE);
                JOptionPane.showMessageDialog(Reports.this, e.getStackTrace(), "Message for Kian:", ERROR_MESSAGE);
            }
        }
    }

    private void createPurchaseOrderReportByDates()
    {
        int selectedOption = JOptionPane.showConfirmDialog(null, "Are you sure you want to create a purchase orders report?", "Purchase Orders Report", JOptionPane.YES_NO_OPTION);
        if (selectedOption == JOptionPane.YES_OPTION)
        {
            try (Statement statement = db.getConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE))
            {
                SimpleDateFormat df1 = new SimpleDateFormat("dd-MM-yy");
                SimpleDateFormat df2 = new SimpleDateFormat("yyyy-MM-dd");
                Date startDate = dateSPO.getDate();
                Date endDate = dateEPO.getDate();

                ResultSet rs = statement.executeQuery("SELECT products.prod_num, products.code, purchase_order_details.quantity FROM purchase_order_details JOIN purchase_order ON purchase_order_details.ord_num = purchase_order.ord_num JOIN products ON purchase_order_details.prod_num = products.prod_num WHERE del_date >= '" + df2.format(startDate) + "' AND del_date <= '" + df2.format(endDate) + "'");
                if (rs.isBeforeFirst())
                {
                    String fileName = SALES_PURCHASE_ORDERS_DIR + "Purchase Orders " + df1.format(startDate) + " " + df1.format(endDate) + ".xls";
                    try (FileOutputStream fileOut = new FileOutputStream(fileName))
                    {
                        HSSFWorkbook workBook = XlsReport.getHSSFWorkbook(ALL_PURCHASE_TEMPLATE);

                        HSSFCellStyle numberStyle = workBook.createCellStyle();
                        numberStyle.setDataFormat(HSSFDataFormat.getBuiltinFormat("0"));

                        HSSFSheet sheet = workBook.getSheet("Purchase Orders Made");

                        HSSFRow row;
                        int rowCount = 0;
                        HSSFCell cell;

                        // Start date
                        row = sheet.getRow(rowCount++);
                        cell = row.getCell(5);
                        cell.setCellValue(df1.format(startDate));

                        // End date
                        row = sheet.getRow(rowCount++);
                        cell = row.getCell(5);
                        cell.setCellValue(df1.format(endDate));

                        // Fill table
                        while (rs.next())
                        {
                            // num
                            cell = row.createCell(0);
                            cell.setCellValue(rs.getInt("prod_num"));
                            cell.setCellStyle(numberStyle);
                            // code
                            cell = row.createCell(1);
                            cell.setCellValue(rs.getString("code"));
                            // quant
                            cell = row.createCell(2);
                            cell.setCellValue(rs.getInt("quantity"));
                            cell.setCellStyle(numberStyle);

                            row = sheet.createRow(rowCount++);
                        }

                        // Auto Size Columns
                        for (int i = 0; i < 3; i++)
                        {
                            sheet.autoSizeColumn(i);
                        }

                        workBook.write(fileOut);
                        fileOut.flush();
                        fileOut.close();

                        JOptionPane.showMessageDialog(Reports.this, "<html> <b>Purchase orders report created successfully.</b> \n<html> <i> " + fileName + " </i>", "Report Created", INFORMATION_MESSAGE);
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(Reports.this, "<html> No purchase orders made between <b> " + df1.format(startDate) + " </b> and <b> " + df1.format(endDate) + " </b>", "Report not created", INFORMATION_MESSAGE);
                }
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(Reports.this, "<html> Error while creating purchase orders report, please try again.\n<html> <i> If error continues to happen please contact Kian. </i>", "Error", ERROR_MESSAGE);
                JOptionPane.showMessageDialog(Reports.this, e.getStackTrace(), "Message for Kian:", ERROR_MESSAGE);
            }
        }
    }

    private void createSalesOrderReportByDates()
    {
        int selectedOption = JOptionPane.showConfirmDialog(null, "Are you sure you want to create a sales orders report?", "Sales Orders Report", JOptionPane.YES_NO_OPTION);
        if (selectedOption == JOptionPane.YES_OPTION)
        {
            try (Statement statement = db.getConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE))
            {
                SimpleDateFormat df1 = new SimpleDateFormat("dd-MM-yy");
                SimpleDateFormat df2 = new SimpleDateFormat("yyyy-MM-dd");
                Date startDate = dateSSO.getDate();
                Date endDate = dateESO.getDate();

                ResultSet rs = statement.executeQuery("SELECT products.prod_num, products.code, sales_order_details.quantity FROM sales_order_details JOIN sales_order ON sales_order_details.ord_num = sales_order.ord_num JOIN products ON sales_order_details.prod_num = products.prod_num WHERE del_date >= '" + df2.format(startDate) + "' AND del_date <= '" + df2.format(endDate) + "'");
                if (rs.isBeforeFirst())
                {
                    String fileName = SALES_PURCHASE_ORDERS_DIR + "Sales Orders " + df1.format(startDate) + " " + df1.format(endDate) + ".xls";
                    try (FileOutputStream fileOut = new FileOutputStream(fileName))
                    {
                        HSSFWorkbook workBook = XlsReport.getHSSFWorkbook(ALL_SALES_TEMPLATE);
                        HSSFSheet sheet = workBook.getSheet("Sales Orders Made");

                        HSSFCellStyle numberStyle = workBook.createCellStyle();
                        numberStyle.setDataFormat(HSSFDataFormat.getBuiltinFormat("0"));

                        HSSFRow row;
                        int rowCount = 0;
                        HSSFCell cell;

                        // Start date
                        row = sheet.getRow(rowCount++);
                        cell = row.getCell(5);
                        cell.setCellValue(df1.format(startDate));

                        // End date
                        row = sheet.getRow(rowCount++);
                        cell = row.getCell(5);
                        cell.setCellValue(df1.format(endDate));

                        // Fill table
                        while (rs.next())
                        {
                            // num
                            cell = row.createCell(0);
                            cell.setCellValue(rs.getInt("prod_num"));
                            cell.setCellStyle(numberStyle);
                            // code
                            cell = row.createCell(1);
                            cell.setCellValue(rs.getString("code"));
                            // quant
                            cell = row.createCell(2);
                            cell.setCellValue(rs.getInt("quantity"));
                            cell.setCellStyle(numberStyle);

                            row = sheet.createRow(rowCount++);
                        }

                        // Auto Size Columns
                        for (int i = 0; i < 3; i++)
                        {
                            sheet.autoSizeColumn(i);
                        }

                        workBook.write(fileOut);
                        fileOut.flush();
                        fileOut.close();

                        JOptionPane.showMessageDialog(Reports.this, "<html> <b>Sales orders report created successfully.</b> \n<html> <i> " + fileName + " </i>", "Report Created", INFORMATION_MESSAGE);
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(Reports.this, "<html> No sales orders made between <b> " + df1.format(startDate) + " </b> and <b> " + df1.format(endDate) + " </b>", "Report not created", INFORMATION_MESSAGE);
                }
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(Reports.this, "<html> Error while creating sales orders report, please try again.\n<html> <i> If error continues to happen please contact Kian. </i>", "Error", ERROR_MESSAGE);
                JOptionPane.showMessageDialog(Reports.this, e.getStackTrace(), "Message for Kian:", ERROR_MESSAGE);
            }
        }
    }

    private void createSalesOrderReportByProduct(String prodCode)
    {
        int selectedOption = JOptionPane.showConfirmDialog(null, "Are you sure you want to create a sales orders report?", "Sales Orders Report", JOptionPane.YES_NO_OPTION);
        if (selectedOption == JOptionPane.YES_OPTION)
        {
            try (Statement statement = db.getConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE))
            {
                ResultSet rs = statement.executeQuery("SELECT prod_num FROM products where code = '" + prodCode + "'");
                if (rs.next())
                {
                    String prodNum = rs.getString("prod_num");

                    rs = statement.executeQuery("SELECT sales_order_details.ord_num, sales_order_details.quantity, sales_order.cust_num, customers.name, sales_order.ord_date, sales_order.del_date, sales_order.dispatched, sales_order.delivered FROM sales_order JOIN sales_order_details ON sales_order.ord_num=sales_order_details.ord_num JOIN customers ON sales_order.cust_num=customers.cust_num WHERE sales_order_details.prod_num = " + prodNum);
                    if (rs.isBeforeFirst())
                    {
                        String fileName = PROD_SALES_ORDERS_DIR + "Sales Orders " + prodCode.replaceAll("/", "") + ".xls";
                        try (FileOutputStream fileOut = new FileOutputStream(fileName))
                        {

                            HSSFWorkbook workBook = XlsReport.getHSSFWorkbook(PROD_SALES_TEMPLATE);
                            HSSFSheet sheet = workBook.getSheet("Sales Orders Made");

                            HSSFCellStyle numberStyle = workBook.createCellStyle();
                            numberStyle.setDataFormat(HSSFDataFormat.getBuiltinFormat("0"));

                            HSSFRow row;
                            int rowCount = 3;
                            HSSFCell cell;

                            // Prod code
                            row = sheet.getRow(0);
                            cell = row.getCell(1);
                            cell.setCellValue(prodCode);

                            // Fill table
                            while (rs.next())
                            {
                                row = sheet.createRow(rowCount++);

                                cell = row.createCell(0);
                                cell.setCellValue(rs.getInt("ord_num"));
                                cell.setCellStyle(numberStyle);

                                cell = row.createCell(1);
                                cell.setCellValue(rs.getString("name"));
                                cell = row.createCell(2);
                                cell.setCellValue(rs.getString("ord_date"));

                                cell = row.createCell(3);
                                cell.setCellValue(rs.getString("del_date"));

                                cell = row.createCell(4);
                                if (rs.getInt("dispatched") == 1)
                                {
                                    cell.setCellValue("yes");
                                }
                                else
                                {
                                    cell.setCellValue("no");
                                }

                                cell = row.createCell(5);
                                if (rs.getInt("delivered") == 1)
                                {
                                    cell.setCellValue("yes");
                                }
                                else
                                {
                                    cell.setCellValue("no");
                                }

                                cell = row.createCell(6);
                                cell.setCellValue(rs.getInt("quantity"));
                                cell.setCellStyle(numberStyle);
                            }

                            // Auto Size Columns
                            for (int i = 0; i < 7; i++)
                            {
                                sheet.autoSizeColumn(i);
                            }

                            workBook.write(fileOut);
                            fileOut.flush();
                            fileOut.close();

                            JOptionPane.showMessageDialog(Reports.this, "<html> <b>Sales orders report created successfully.</b> \n<html> <i> " + fileName + " </i>", "Report Created", INFORMATION_MESSAGE);
                        }
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(Reports.this, "<html> No sales orders made for <b> " + prodCode + " </b>", "Report not created", INFORMATION_MESSAGE);
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(Reports.this, "<html>Product does not exist - <b>" + prodCode + "</b> \nPlease select from drop down box", "Unknown Product", WARNING_MESSAGE);
                }
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(Reports.this, "<html> Error while creating sales orders report, please try again.\n<html> <i> If error continues to happen please contact Kian. </i>", "Error", ERROR_MESSAGE);
                JOptionPane.showMessageDialog(Reports.this, e.getStackTrace(), "Message for Kian:", ERROR_MESSAGE);
            }
        }
    }

    private void createCustomerReport()
    {
        int selectedOption = JOptionPane.showConfirmDialog(null, "Are you sure you want to create a customer report?", "Customer Report", JOptionPane.YES_NO_OPTION);
        if (selectedOption == JOptionPane.YES_OPTION)
        {
            if (!btnCustomers.isSelected())
            {
                JOptionPane.showMessageDialog(Reports.this, "<html><b>WARNING:</b>This report can take up to <b>3 minutes</b> to create.</html>\nPlease do not use the system and ensure no one else is while the report is created.", "Warning", WARNING_MESSAGE);
            }

            try (Statement statement = db.getConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE))
            {
                SimpleDateFormat df1 = new SimpleDateFormat("dd-MM-yy");
                SimpleDateFormat df2 = new SimpleDateFormat("yyyy-MM-dd");
                Date startDate = dateSR.getDate();
                Date endDate = dateER.getDate();

                StringBuilder fileName = new StringBuilder();
                fileName.append(CUSTOMER_REPORTS_DIR).append("Customer Report");

                String whereClauseReference = "";
                if (btnCustomers.isSelected())
                {
                    fileName.append(" - ").append(labelReference.getText());
                    whereClauseReference = " WHERE reference = '" + labelReference.getText() + "'";
                }

                String whereClauseDates = "";
                if (!checkAll.isSelected())
                {
                    fileName.append(" - ").append(df1.format(startDate)).append(" ").append(df1.format(endDate));
                    whereClauseDates = " AND del_date >= '" + df2.format(startDate) + "' AND del_date <= '" + df2.format(endDate) + "'";
                }

                fileName.append(".xls");

                try (FileOutputStream fileOut = new FileOutputStream(fileName.toString()))
                {
                    HSSFWorkbook workBook = XlsReport.getHSSFWorkbook(CUSTOMERS_TEMPLATE);
                    HSSFSheet sheet = workBook.getSheet("Customers");

                    HSSFRow row;
                    HSSFCell cell;

                    // Products
                    int rowCount = 1;
                    Map<Integer, Integer> prodCellIndexes = new HashMap();
                    Map<Integer, String> disconProds = new HashMap();
                    ResultSet rs = statement.executeQuery("SELECT prod_num, code, sales_price, purchase_price, discon FROM products ORDER BY prod_num");
                    while (rs.next())
                    {
                        int prodNum = rs.getInt("prod_num");
                        String code = rs.getString("code");
                        String salesPrice = "£" + rs.getBigDecimal("sales_price").setScale(2, RoundingMode.CEILING).toPlainString();
                        String purchasePrice = "£" + rs.getBigDecimal("purchase_price").setScale(2, RoundingMode.CEILING).toPlainString();
                        boolean discon = rs.getBoolean("discon");

                        if (discon)
                        {
                            disconProds.put(prodNum, code + "," + salesPrice + "," + purchasePrice);
                        }
                        else
                        {
                            prodCellIndexes.put(prodNum, rowCount);

                            row = sheet.createRow(rowCount++);
                            cell = row.createCell(0);
                            cell.setCellValue(prodNum);
                            cell = row.createCell(1);
                            cell.setCellValue(code);
                            cell = row.createCell(2);
                            cell.setCellValue(salesPrice);
                            cell = row.createCell(3);
                            cell.setCellValue(purchasePrice);
                        }
                    }

                    // Discontinuted                  
                    rowCount++;
                    row = sheet.createRow(rowCount++);
                    cell = row.createCell(0);
                    cell.setCellValue("DISCONTINUED");
                    rowCount++;
                    for (Map.Entry<Integer, String> discon : disconProds.entrySet())
                    {
                        int prodNum = discon.getKey();
                        prodCellIndexes.put(prodNum, rowCount);

                        String prod = discon.getValue();
                        row = sheet.createRow(rowCount++);
                        int cellCount = 0;

                        cell = row.createCell(cellCount++);
                        cell.setCellValue(prodNum);
                        for (String info : prod.split(","))
                        {
                            cell = row.createCell(cellCount++);
                            cell.setCellValue(info);
                        }
                    }

                    // Auto Size Columns
                    for (int i = 0; i < 5; i++)
                    {
                        sheet.autoSizeColumn(i);
                    }

                    // Customers
                    row = sheet.getRow(0);
                    HSSFCellStyle rotate = workBook.createCellStyle();
                    rotate.setRotation((short) 90);
                    int columnCount = 5;
                    Map<Integer, Integer> custCellIndexes = new HashMap();
                    rs = statement.executeQuery("SELECT cust_num, name FROM customers" + whereClauseReference + " ORDER BY cust_num");
                    while (rs.next())
                    {
                        int custNum = rs.getInt("cust_num");
                        String name = rs.getString("name");
                        custCellIndexes.put(custNum, columnCount);
                        cell = row.createCell(columnCount++);
                        cell.setCellValue(custNum + " - " + name);
                        cell.setCellStyle(rotate);
                        sheet.autoSizeColumn(columnCount - 1);
                    }

                    // Orders made
                    for (Map.Entry<Integer, Integer> product : prodCellIndexes.entrySet())
                    {
                        int prodNum = product.getKey();
                        int rowNum = product.getValue();
                        int total = 0;
                        for (Map.Entry<Integer, Integer> customer : custCellIndexes.entrySet())
                        {
                            int custNum = customer.getKey();
                            int columnNum = customer.getValue();
                            rs = statement.executeQuery("SELECT SUM(quantity) AS total FROM sales_order_details JOIN sales_order ON sales_order_details.ord_num = sales_order.ord_num WHERE sales_order_details.prod_num = " + prodNum + " AND sales_order.cust_num = " + custNum + whereClauseDates);
                            if (rs.isBeforeFirst())
                            {
                                rs.next();
                                int quantity = rs.getInt("total");
                                if (quantity != 0)
                                {
                                    cell = sheet.getRow(rowNum).createCell(columnNum);
                                    cell.setCellValue(quantity);
                                    total += quantity;
                                }
                            }
                        }
                        cell = sheet.getRow(rowNum).createCell(4);
                        cell.setCellValue(total);
                    }

                    workBook.write(fileOut);
                    fileOut.flush();
                    fileOut.close();

                    JOptionPane.showMessageDialog(Reports.this, "<html> <b>Customer report created successfully.</b> \n<html> <i> " + fileName.toString() + " </i>", "Report Created", INFORMATION_MESSAGE);
                }
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(Reports.this, "<html> Error while creating customer report, please try again.\n<html> <i> If error continues to happen please contact Kian. </i>", "Error", ERROR_MESSAGE);
                JOptionPane.showMessageDialog(Reports.this, e.getStackTrace(), "Message for Kian:", ERROR_MESSAGE);
            }
        }
    }

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        if (btnAvailableStockReport.isSelected())
        {
            createAvailableStockReport();
        }
        if (btnWarehouseStockReport.isSelected())
        {
            createWarehouseStockReport();
        }
        if (btnOutOfStockReport.isSelected())
        {
            createOutOfStockReport();
        }
        if (btnDiscontinuedStockReport.isSelected())
        {
            createDiscontinuedStockReport();
        }
        if (btnPOMadeDate.isSelected())
        {
            if (dateSPO.getDate() == null || dateEPO.getDate() == null)
            {
                JOptionPane.showMessageDialog(Reports.this, "Please select start and end date", "Missing information", QUESTION_MESSAGE);
            }
            else
            {
                createPurchaseOrderReportByDates();
            }
        }
        if (btnSOMadeDate.isSelected())
        {
            if (dateSSO.getDate() == null || dateESO.getDate() == null)
            {
                JOptionPane.showMessageDialog(Reports.this, "Please select start and end date", "Missing information", QUESTION_MESSAGE);
            }
            else
            {
                createSalesOrderReportByDates();
            }
        }
        if (btnSOMadeProd.isSelected())
        {
            String prodCode = labelProduct.getText();

            if (prodCode.isEmpty())
            {
                JOptionPane.showMessageDialog(Reports.this, "Please select a product", "Missing information", QUESTION_MESSAGE);
            }
            else
            {
                createSalesOrderReportByProduct(prodCode);
            }
        }
        if (btnAllCustomers.isSelected())
        {
            if (!checkAll.isSelected() && (dateSR.getDate() == null || dateER.getDate() == null))
            {
                JOptionPane.showMessageDialog(Reports.this, "Please select start and end date or 'All Dates'", "Missing information", QUESTION_MESSAGE);
            }
            else
            {
                createCustomerReport();
            }
        }
        if (btnCustomers.isSelected())
        {
            String reference = labelReference.getText();
            if (!checkAll.isSelected() && (dateSR.getDate() == null || dateER.getDate() == null))
            {
                JOptionPane.showMessageDialog(Reports.this, "Please select start and end date or 'All Dates'", "Missing information", QUESTION_MESSAGE);
            }
            else if (reference.isEmpty())
            {
                JOptionPane.showMessageDialog(Reports.this, "Please select a customer reference", "Missing information", QUESTION_MESSAGE);
            }
            else
            {
                createCustomerReport();
            }
        }
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnAvailableStockReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAvailableStockReportActionPerformed
        btnAvailableStockReport.setSelected(true);
        btnWarehouseStockReport.setSelected(false);
        btnDiscontinuedStockReport.setSelected(false);
        btnOutOfStockReport.setSelected(false);
        btnPOMadeDate.setSelected(false);
        btnSOMadeDate.setSelected(false);
        btnSOMadeProd.setSelected(false);
        btnAllCustomers.setSelected(false);
        btnCustomers.setSelected(false);

        dateSPO.setEnabled(false);
        dateEPO.setEnabled(false);

        dateSSO.setEnabled(false);
        dateESO.setEnabled(false);

        labelProduct.setEnabled(false);
        btnFindProd.setEnabled(false);
        comboProducts.setEnabled(false);

        dateSR.setEnabled(false);
        dateER.setEnabled(false);
        checkAll.setEnabled(false);

        labelReference.setEnabled(false);
        btnFindCust.setEnabled(false);
        comboCustomers.setEnabled(false);

        btnCreate.setEnabled(true);
    }//GEN-LAST:event_btnAvailableStockReportActionPerformed

    private void btnWarehouseStockReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWarehouseStockReportActionPerformed
        btnAvailableStockReport.setSelected(false);
        btnWarehouseStockReport.setSelected(true);
        btnDiscontinuedStockReport.setSelected(false);
        btnOutOfStockReport.setSelected(false);
        btnPOMadeDate.setSelected(false);
        btnSOMadeDate.setSelected(false);
        btnSOMadeProd.setSelected(false);
        btnAllCustomers.setSelected(false);
        btnCustomers.setSelected(false);

        dateSPO.setEnabled(false);
        dateEPO.setEnabled(false);

        dateSSO.setEnabled(false);
        dateESO.setEnabled(false);

        labelProduct.setEnabled(false);
        btnFindProd.setEnabled(false);
        comboProducts.setEnabled(false);

        dateSR.setEnabled(false);
        dateER.setEnabled(false);
        checkAll.setEnabled(false);

        labelReference.setEnabled(false);
        btnFindCust.setEnabled(false);
        comboCustomers.setEnabled(false);

        btnCreate.setEnabled(true);
    }//GEN-LAST:event_btnWarehouseStockReportActionPerformed

    private void btnOutOfStockReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutOfStockReportActionPerformed
        btnAvailableStockReport.setSelected(false);
        btnWarehouseStockReport.setSelected(false);
        btnDiscontinuedStockReport.setSelected(false);
        btnOutOfStockReport.setSelected(true);
        btnPOMadeDate.setSelected(false);
        btnSOMadeDate.setSelected(false);
        btnSOMadeProd.setSelected(false);
        btnAllCustomers.setSelected(false);
        btnCustomers.setSelected(false);

        dateSPO.setEnabled(false);
        dateEPO.setEnabled(false);

        dateSSO.setEnabled(false);
        dateESO.setEnabled(false);

        labelProduct.setEnabled(false);
        btnFindProd.setEnabled(false);
        comboProducts.setEnabled(false);

        dateSR.setEnabled(false);
        dateER.setEnabled(false);
        checkAll.setEnabled(false);

        labelReference.setEnabled(false);
        btnFindCust.setEnabled(false);
        comboCustomers.setEnabled(false);

        btnCreate.setEnabled(true);
    }//GEN-LAST:event_btnOutOfStockReportActionPerformed

    private void btnPOMadeDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPOMadeDateActionPerformed
        btnAvailableStockReport.setSelected(false);
        btnWarehouseStockReport.setSelected(false);
        btnDiscontinuedStockReport.setSelected(false);
        btnOutOfStockReport.setSelected(false);
        btnPOMadeDate.setSelected(true);
        btnSOMadeDate.setSelected(false);
        btnSOMadeProd.setSelected(false);
        btnAllCustomers.setSelected(false);
        btnCustomers.setSelected(false);

        dateSPO.setEnabled(true);
        dateEPO.setEnabled(true);

        dateSSO.setEnabled(false);
        dateESO.setEnabled(false);

        labelProduct.setEnabled(false);
        btnFindProd.setEnabled(false);
        comboProducts.setEnabled(false);

        dateSR.setEnabled(false);
        dateER.setEnabled(false);
        checkAll.setEnabled(false);

        labelReference.setEnabled(false);
        btnFindCust.setEnabled(false);
        comboCustomers.setEnabled(false);

        btnCreate.setEnabled(true);
    }//GEN-LAST:event_btnPOMadeDateActionPerformed

    private void btnSOMadeDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSOMadeDateActionPerformed
        btnAvailableStockReport.setSelected(false);
        btnWarehouseStockReport.setSelected(false);
        btnDiscontinuedStockReport.setSelected(false);
        btnOutOfStockReport.setSelected(false);
        btnPOMadeDate.setSelected(false);
        btnSOMadeDate.setSelected(true);
        btnSOMadeProd.setSelected(false);
        btnAllCustomers.setSelected(false);
        btnCustomers.setSelected(false);

        dateSPO.setEnabled(false);
        dateEPO.setEnabled(false);

        dateSSO.setEnabled(true);
        dateESO.setEnabled(true);

        labelProduct.setEnabled(false);
        btnFindProd.setEnabled(false);
        comboProducts.setEnabled(false);

        dateSR.setEnabled(false);
        dateER.setEnabled(false);
        checkAll.setEnabled(false);

        labelReference.setEnabled(false);
        btnFindCust.setEnabled(false);
        comboCustomers.setEnabled(false);

        btnCreate.setEnabled(true);
    }//GEN-LAST:event_btnSOMadeDateActionPerformed

    private void btnSOMadeProdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSOMadeProdActionPerformed
        btnAvailableStockReport.setSelected(false);
        btnWarehouseStockReport.setSelected(false);
        btnDiscontinuedStockReport.setSelected(false);
        btnOutOfStockReport.setSelected(false);
        btnPOMadeDate.setSelected(false);
        btnSOMadeDate.setSelected(false);
        btnSOMadeProd.setSelected(true);
        btnAllCustomers.setSelected(false);
        btnCustomers.setSelected(false);

        dateSPO.setEnabled(false);
        dateEPO.setEnabled(false);

        dateSSO.setEnabled(false);
        dateESO.setEnabled(false);

        labelProduct.setEnabled(true);
        btnFindProd.setEnabled(true);
        comboProducts.setEnabled(true);

        dateSR.setEnabled(false);
        dateER.setEnabled(false);
        checkAll.setEnabled(false);

        labelReference.setEnabled(false);
        btnFindCust.setEnabled(false);
        comboCustomers.setEnabled(false);

        btnCreate.setEnabled(true);
    }//GEN-LAST:event_btnSOMadeProdActionPerformed

    private void btnFindProdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindProdActionPerformed
        try (Statement statement = db.getConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE))
        {
            ArrayList<String> products = new ArrayList<>();
            ResultSet rs = statement.executeQuery("SELECT code FROM products WHERE code LIKE '%" + labelProduct.getText() + "%' ORDER BY code ASC");
            while (rs.next())
            {
                products.add(rs.getString("code"));
            }

            comboProducts.setModel(new javax.swing.DefaultComboBoxModel(products.toArray()));
        }
        catch (SQLException e)
        {
            JOptionPane.showMessageDialog(Reports.this, "Error while searching products, please try again.");
            JOptionPane.showMessageDialog(Reports.this, e);
        }
    }//GEN-LAST:event_btnFindProdActionPerformed

    private void comboProductsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboProductsActionPerformed
        String product = (String) comboProducts.getSelectedItem();
        labelProduct.setText(product);
    }//GEN-LAST:event_comboProductsActionPerformed

    private void btnAllCustomersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAllCustomersActionPerformed
        btnAvailableStockReport.setSelected(false);
        btnWarehouseStockReport.setSelected(false);
        btnDiscontinuedStockReport.setSelected(false);
        btnOutOfStockReport.setSelected(false);
        btnPOMadeDate.setSelected(false);
        btnSOMadeDate.setSelected(false);
        btnSOMadeProd.setSelected(false);
        btnAllCustomers.setSelected(true);
        btnCustomers.setSelected(false);

        dateSPO.setEnabled(false);
        dateEPO.setEnabled(false);

        dateSSO.setEnabled(false);
        dateESO.setEnabled(false);

        labelProduct.setEnabled(false);
        btnFindProd.setEnabled(false);
        comboProducts.setEnabled(false);

        if (!checkAll.isSelected())
        {
            dateSR.setEnabled(true);
            dateER.setEnabled(true);
        }
        checkAll.setEnabled(true);

        labelReference.setEnabled(false);
        btnFindCust.setEnabled(false);
        comboCustomers.setEnabled(false);

        btnCreate.setEnabled(true);
    }//GEN-LAST:event_btnAllCustomersActionPerformed

    private void checkAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkAllActionPerformed
        if (checkAll.isSelected())
        {
            dateSR.setEnabled(false);
            dateER.setEnabled(false);
        }
        else
        {
            dateSR.setEnabled(true);
            dateER.setEnabled(true);
        }
    }//GEN-LAST:event_checkAllActionPerformed

    private void btnCustomersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCustomersActionPerformed
        btnAvailableStockReport.setSelected(false);
        btnWarehouseStockReport.setSelected(false);
        btnDiscontinuedStockReport.setSelected(false);
        btnOutOfStockReport.setSelected(false);
        btnPOMadeDate.setSelected(false);
        btnSOMadeDate.setSelected(false);
        btnSOMadeProd.setSelected(false);
        btnAllCustomers.setSelected(false);
        btnCustomers.setSelected(true);

        dateSPO.setEnabled(false);
        dateEPO.setEnabled(false);

        dateSSO.setEnabled(false);
        dateESO.setEnabled(false);

        labelProduct.setEnabled(false);
        btnFindProd.setEnabled(false);
        comboProducts.setEnabled(false);

        if (!checkAll.isSelected())
        {
            dateSR.setEnabled(true);
            dateER.setEnabled(true);
        }
        checkAll.setEnabled(true);

        labelReference.setEnabled(true);
        btnFindCust.setEnabled(true);
        comboCustomers.setEnabled(true);

        btnCreate.setEnabled(true);
    }//GEN-LAST:event_btnCustomersActionPerformed

    private void btnFindCustActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindCustActionPerformed
        ArrayList<String> customers = new ArrayList<>();
        try (Statement statement = db.getConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE))
        {
            ResultSet rs = statement.executeQuery("SELECT distinct reference FROM customers WHERE reference LIKE '%" + labelReference.getText() + "%' ORDER BY reference ASC");
            while (rs.next())
            {
                customers.add(rs.getString("reference"));
            }

            comboCustomers.setVisible(true);
            comboCustomers.setModel(new javax.swing.DefaultComboBoxModel(customers.toArray()));
        }
        catch (SQLException e)
        {
            JOptionPane.showMessageDialog(Reports.this, e.getMessage());
        }
    }//GEN-LAST:event_btnFindCustActionPerformed

    private void comboCustomersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCustomersActionPerformed
        labelReference.setText((String) comboCustomers.getSelectedItem());
    }//GEN-LAST:event_comboCustomersActionPerformed

    private void btnDiscontinuedStockReportActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnDiscontinuedStockReportActionPerformed
    {//GEN-HEADEREND:event_btnDiscontinuedStockReportActionPerformed
        btnAvailableStockReport.setSelected(false);
        btnWarehouseStockReport.setSelected(false);
        btnDiscontinuedStockReport.setSelected(true);
        btnOutOfStockReport.setSelected(false);
        btnPOMadeDate.setSelected(false);
        btnSOMadeDate.setSelected(false);
        btnSOMadeProd.setSelected(false);
        btnAllCustomers.setSelected(false);
        btnCustomers.setSelected(false);

        dateSPO.setEnabled(false);
        dateEPO.setEnabled(false);

        dateSSO.setEnabled(false);
        dateESO.setEnabled(false);

        labelProduct.setEnabled(false);
        btnFindProd.setEnabled(false);
        comboProducts.setEnabled(false);

        dateSR.setEnabled(false);
        dateER.setEnabled(false);
        checkAll.setEnabled(false);

        labelReference.setEnabled(false);
        btnFindCust.setEnabled(false);
        comboCustomers.setEnabled(false);

        btnCreate.setEnabled(true);
    }//GEN-LAST:event_btnDiscontinuedStockReportActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton btnAllCustomers;
    private javax.swing.JRadioButton btnAvailableStockReport;
    private javax.swing.JButton btnCreate;
    private javax.swing.JRadioButton btnCustomers;
    private javax.swing.JRadioButton btnDiscontinuedStockReport;
    private javax.swing.JButton btnFindCust;
    private javax.swing.JButton btnFindProd;
    private javax.swing.JRadioButton btnOutOfStockReport;
    private javax.swing.JRadioButton btnPOMadeDate;
    private javax.swing.JRadioButton btnSOMadeDate;
    private javax.swing.JRadioButton btnSOMadeProd;
    private javax.swing.JRadioButton btnWarehouseStockReport;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox checkAll;
    private javax.swing.JComboBox comboCustomers;
    private javax.swing.JComboBox comboProducts;
    private com.toedter.calendar.JDateChooser dateEPO;
    private com.toedter.calendar.JDateChooser dateER;
    private com.toedter.calendar.JDateChooser dateESO;
    private com.toedter.calendar.JDateChooser dateSPO;
    private com.toedter.calendar.JDateChooser dateSR;
    private com.toedter.calendar.JDateChooser dateSSO;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JTextField labelProduct;
    private javax.swing.JTextField labelReference;
    // End of variables declaration//GEN-END:variables
}
