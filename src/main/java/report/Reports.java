/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main.java.report;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javafx.util.Pair;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import main.java.Database;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.usermodel.CellStyle;

/**
 *
 * @author kian_bryen
 */
public class Reports extends javax.swing.JInternalFrame
{

    private final JDesktopPane desktop;
    private final Database db = new Database();
    private String sql;

    /**
     * Creates new form ViewEditProducts
     *
     * @param pane Desktop Pane
     */
    public Reports(JDesktopPane pane)
    {
        desktop = pane;
        initComponents();
        btnCustomers.setEnabled(false);
        btnCreate.setEnabled(false);
        dateSPO.setEnabled(false);
        dateEPO.setEnabled(false);
        dateSSO.setEnabled(false);
        dateESO.setEnabled(false);
        labelProduct.setEnabled(false);
        btnFind.setEnabled(false);
        comboProducts.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        btnAvailableStockReport = new javax.swing.JRadioButton();
        btnOutOfStockReport = new javax.swing.JRadioButton();
        btnSOMadeProd = new javax.swing.JRadioButton();
        btnPOMadeDate = new javax.swing.JRadioButton();
        btnSOMadeDate = new javax.swing.JRadioButton();
        dateSPO = new com.toedter.calendar.JDateChooser();
        dateEPO = new com.toedter.calendar.JDateChooser();
        dateESO = new com.toedter.calendar.JDateChooser();
        dateSSO = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        labelProduct = new javax.swing.JTextField();
        btnFind = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        comboProducts = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jSeparator5 = new javax.swing.JSeparator();
        jSeparator6 = new javax.swing.JSeparator();
        btnCustomers = new javax.swing.JRadioButton();
        jSeparator7 = new javax.swing.JSeparator();
        btnCreate = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Reports");

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        jLabel1.setText("Reports");

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel4.setText("Products");

        btnAvailableStockReport.setText("Available Stock breakdown");
        btnAvailableStockReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAvailableStockReportActionPerformed(evt);
            }
        });

        btnOutOfStockReport.setText("Out of Stock");
        btnOutOfStockReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOutOfStockReportActionPerformed(evt);
            }
        });

        btnSOMadeProd.setText("Sales orders made");
        btnSOMadeProd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSOMadeProdActionPerformed(evt);
            }
        });

        btnPOMadeDate.setText("Purchase orders made");
        btnPOMadeDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPOMadeDateActionPerformed(evt);
            }
        });

        btnSOMadeDate.setText("Sales orders made");
        btnSOMadeDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSOMadeDateActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 2, 13)); // NOI18N
        jLabel6.setText("Start Date");

        jLabel7.setFont(new java.awt.Font("Lucida Grande", 2, 13)); // NOI18N
        jLabel7.setText("End Date");

        btnFind.setText("Find");
        btnFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Lucida Grande", 2, 13)); // NOI18N
        jLabel8.setText("Product Search");

        comboProducts.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboProducts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboProductsActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel5.setText("Customers");

        btnCustomers.setText("Coming soon...");

        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCustomers)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator7)
                            .addComponent(jSeparator4)
                            .addComponent(jSeparator1)
                            .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnCreate))
                            .addComponent(jSeparator5)
                            .addComponent(jSeparator6, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(btnAvailableStockReport)
                                    .addComponent(btnOutOfStockReport)
                                    .addComponent(jLabel1)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnPOMadeDate)
                                            .addComponent(btnSOMadeDate))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(dateSSO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(dateESO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(dateSPO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel6))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(jLabel7)
                                                    .addComponent(dateEPO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnSOMadeProd)
                                        .addGap(43, 43, 43)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel8)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(labelProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnFind)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(comboProducts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addComponent(jLabel5))
                                .addGap(0, 54, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAvailableStockReport)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnOutOfStockReport)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnPOMadeDate)
                            .addComponent(dateSPO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dateEPO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSOMadeDate)
                            .addComponent(dateSSO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dateESO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnFind)
                            .addComponent(btnSOMadeProd)
                            .addComponent(comboProducts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCustomers)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addComponent(btnCreate)
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleName("Reports");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void createAvailableStockReport()
    {
        int selectedOption = JOptionPane.showConfirmDialog(null, "Are you sure you want to create an available stock report?", "Available Stock Report", JOptionPane.YES_NO_OPTION);
        if (selectedOption == JOptionPane.YES_OPTION)
        {
            DateFormat df = new SimpleDateFormat("MM-dd-yy");
            Date d = new Date();
            String date = df.format(d);
            try (FileOutputStream fileOut = new FileOutputStream("S:/Stock Reports/Stock Report " + date + ".xls"))
            {
                HSSFWorkbook wb = new HSSFWorkbook();
                HSSFSheet worksheet = wb.createSheet(date);
                CellStyle editableStyle = wb.createCellStyle();
                editableStyle.setLocked(false);

                // Fonts
                HSSFFont row1font = wb.createFont();
                row1font.setFontHeightInPoints((short) 10);
                row1font.setFontName("Arial");
                row1font.setBold(true);
                row1font.setUnderline(HSSFFont.U_SINGLE);

                HSSFFont row4fontblack = wb.createFont();
                row4fontblack.setFontHeightInPoints((short) 11);
                row4fontblack.setFontName("Calibri");
                row4fontblack.setBold(true);

                // Styles
                HSSFCellStyle style0 = wb.createCellStyle();
                style0.setFont(row1font);

                HSSFCellStyle style1 = wb.createCellStyle();
                style1.setFont(row4fontblack);
                style1.setFillForegroundColor(HSSFColor.GREY_40_PERCENT.index);
                style1.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);

                HSSFRow row = worksheet.createRow(0);
                HSSFCell cell = row.createCell(0);
                cell.setCellValue("Stock Report");
                cell.setCellStyle(style0);

                int rowCount = 3;
                int cellCount = 0;

                try (Statement statement = db.getConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE))
                {
                    ResultSet rs;

                    row = worksheet.createRow(rowCount++);
                    cell = row.createCell(cellCount++);
                    cell.setCellValue("Product Code");
                    cell.setCellStyle(style1);

                    cell = row.createCell(cellCount++);
                    cell.setCellValue("In Stock");
                    cell.setCellStyle(style1);

                    rs = statement.executeQuery("SELECT ord_num FROM purchase_order WHERE delivered = false");
                    ArrayList<String> ord_nums = new ArrayList();
                    while (rs.next())
                    {
                        String ord_num = rs.getString("ord_num");
                        ord_nums.add(ord_num);

                        cell = row.createCell(cellCount++);
                        cell.setCellValue(ord_num);
                        cell.setCellStyle(style1);
                    }
                    
                    cell = row.createCell(cellCount++);
                    cell.setCellValue("Total");
                    cell.setCellStyle(style1);

                    rs = statement.executeQuery("SELECT prod_num, code, in_stock FROM products");
                    HashMap<Integer, Pair<String, Integer>> products = new HashMap();
                    while (rs.next())
                    {
                        products.put(rs.getInt("prod_num"), new Pair(rs.getString("code"), rs.getInt("in_stock")));
                    }

                    for (Map.Entry<Integer, Pair<String, Integer>> product : products.entrySet())
                    {
                        int prod_num = product.getKey();
                        String code = product.getValue().getKey();
                        int in_stock = product.getValue().getValue();

                        cellCount = 0;
                        row = worksheet.createRow(rowCount++);
                        cell = row.createCell(cellCount++);
                        cell.setCellValue(code);
                        cell = row.createCell(cellCount++);
                        cell.setCellValue(in_stock);

                        int total = in_stock;
                        for (String ord_num : ord_nums)
                        {
                            rs = statement.executeQuery("SELECT avaliable FROM purchase_order_details WHERE prod_num = " + prod_num + " AND ord_num = '" + ord_num + "'");

                            int avaliable = 0;
                            if (rs.next())
                            {
                                avaliable = rs.getInt("avaliable");
                            }

                            cell = row.createCell(cellCount++);
                            cell.setCellValue(avaliable);

                            total = total + avaliable;
                        }
                        cell = row.createCell(cellCount++);
                        cell.setCellValue(total);
                    }
                }
                catch (SQLException e)
                {
                    JOptionPane.showMessageDialog(Reports.this, e);
                }

                // Auto Size Columns
                for (int k = 0; k < 2; k++)
                {
                    worksheet.autoSizeColumn(k);
                    worksheet.setDefaultColumnStyle(rowCount, editableStyle);
                }

                wb.write(fileOut);
                fileOut.flush();
                fileOut.close();

                JOptionPane.showMessageDialog(Reports.this, "Stock Report Created.");
            }
            catch (FileNotFoundException e)
            {
                JOptionPane.showMessageDialog(Reports.this, "Error while creating report, please try again.");
                JOptionPane.showMessageDialog(Reports.this, e);
            }
            catch (IOException e)
            {
                JOptionPane.showMessageDialog(Reports.this, "Error while creating report, please try again.");
                JOptionPane.showMessageDialog(Reports.this, e);
            }
        }
    }
    
    private void createOutOfStockReport()
    {
        int selectedOption = JOptionPane.showConfirmDialog(null, "Are you sure you want to create an out of stock report?", "Out of Stock Report", JOptionPane.YES_NO_OPTION);
        if (selectedOption == JOptionPane.YES_OPTION)
        {
            DateFormat df = new SimpleDateFormat("MM-dd-yy");
            Date d = new Date();
            String date = df.format(d);
            try (FileOutputStream fileOut = new FileOutputStream("S:/Stock Reports/Out of Stock Report " + date + ".xls"))
            {
                HSSFWorkbook wb = new HSSFWorkbook();
                HSSFSheet worksheet = wb.createSheet(date);
                CellStyle editableStyle = wb.createCellStyle();
                editableStyle.setLocked(false);

                // Fonts
                HSSFFont row1font = wb.createFont();
                row1font.setFontHeightInPoints((short) 10);
                row1font.setFontName("Arial");
                row1font.setBold(true);
                row1font.setUnderline(HSSFFont.U_SINGLE);

                HSSFFont row4fontblack = wb.createFont();
                row4fontblack.setFontHeightInPoints((short) 11);
                row4fontblack.setFontName("Calibri");
                row4fontblack.setBold(true);

                // Styles
                HSSFCellStyle style0 = wb.createCellStyle();
                style0.setFont(row1font);

                HSSFCellStyle style1 = wb.createCellStyle();
                style1.setFont(row4fontblack);
                style1.setFillForegroundColor(HSSFColor.GREY_40_PERCENT.index);
                style1.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);

                // Row 4
                HSSFRow row4 = worksheet.createRow((short) 3);
                HSSFCell cell1 = row4.createCell(0);
                cell1.setCellValue("Product Code");
                cell1.setCellStyle(style1);

                int i = 4;
                try (Statement statement = db.getConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE))
                {
                    ResultSet rs = statement.executeQuery("SELECT code FROM products WHERE in_stock = 0");

                    // Main Rows
                    while (rs.next())
                    {
                        HSSFRow main = worksheet.createRow((short) i);
                        HSSFCell code = main.createCell(0);
                        code.setCellValue(rs.getString("code"));
                        i++;
                    }
                }
                catch (SQLException e)
                {
                    JOptionPane.showMessageDialog(Reports.this, e.getMessage());
                }
                
                // Auto Size Columns
                for (int k = 0; k < 2; k++)
                {
                    worksheet.autoSizeColumn(k);
                    worksheet.setDefaultColumnStyle(i, editableStyle);
                }

                // Row 1
                HSSFRow row1 = worksheet.createRow((short) 0);
                HSSFCell cell = row1.createCell(0);
                cell.setCellValue("Out of Stock Report");
                cell.setCellStyle(style0);

                wb.write(fileOut);
                fileOut.flush();
                fileOut.close();

                JOptionPane.showMessageDialog(Reports.this, "Out of Stock Report Created.");
            }
            catch (FileNotFoundException e)
            {
                JOptionPane.showMessageDialog(Reports.this, "Error while creating report, please try again.");
                JOptionPane.showMessageDialog(Reports.this, e);
            }
            catch (IOException e)
            {
                JOptionPane.showMessageDialog(Reports.this, "Error while creating report, please try again.");
                JOptionPane.showMessageDialog(Reports.this, e);
            }
        }
    }
    
    private void createPurchaseOrderReportByDates(String startDate, String endDate)
    {
        try (Statement statement = db.getConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE))
        {
            String reportName = JOptionPane.showInputDialog("Please give the report a name \nFor example: Nov 30 - Spring Sales").trim();
            ResultSet rs = statement.executeQuery("SELECT products.code, purchase_order_details.quantity FROM purchase_order_details JOIN purchase_order ON purchase_order_details.ord_num = purchase_order.ord_num JOIN products ON purchase_order_details.prod_num = products.prod_num WHERE del_date >= '" + startDate + "' AND del_date <= '" + endDate + "'");
            
            try (FileWriter writer = new FileWriter("S:/Sales & Orders Reports/" + reportName + ".csv"))
            {
                HashMap<String, Integer> map = new HashMap();
                // 2016-08-26--2016-09-26
                writer.append("Product,Quantity");
                writer.append('\n');

                while (rs.next())
                {
                    String code = rs.getString("code");
                    int quant = rs.getInt("quantity");
                    if (map.containsKey(code))
                    {
                        int num = map.get(code);
                        int newquant = num + quant;

                        map.remove(code);
                        map.put(code, newquant);
                    }
                    else
                    {
                        map.put(code, quant);
                    }
                }

                for (String code : map.keySet())
                {
                    int quant = map.get(code);
                    writer.append(code + "," + String.valueOf(quant) + "\n");
                }

                writer.flush();
            }

            JOptionPane.showMessageDialog(Reports.this, reportName + " Report created.");
        }
        catch (SQLException | FileNotFoundException e)
        {
            JOptionPane.showMessageDialog(Reports.this, "Error while creating report, please try again.");
            JOptionPane.showMessageDialog(Reports.this, e);
        } 
        catch (IOException e) 
        {
            JOptionPane.showMessageDialog(Reports.this, "Error while creating report, please try again.");
            JOptionPane.showMessageDialog(Reports.this, e);
        }
    }
    
    private void createSalesOrderReportByDates(String startDate, String endDate)
    {
        try(Statement statement = db.getConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE))
        {
            String reportName = JOptionPane.showInputDialog("Please give the report a name \nFor example: Nov 30 - Spring Sales").trim();

            ResultSet rs = statement.executeQuery("SELECT products.code, sales_order_details.fromOrder, sales_order_details.fromStock FROM sales_order_details JOIN sales_order ON sales_order_details.ord_num = sales_order.ord_num JOIN products ON sales_order_details.prod_num = products.prod_num WHERE del_date >= '" + startDate + "' AND del_date <= '" + endDate + "'");

            try (FileWriter writer = new FileWriter("S:/Sales & Orders Reports/" + reportName + ".csv"))
            {
                HashMap<String, Integer> map = new HashMap();

                writer.append("Product,Quantity");
                writer.append('\n');

                while (rs.next())
                {
                    String code = rs.getString("code");
                    int quant = rs.getInt("fromOrder") + rs.getInt("fromStock");
                    if (map.containsKey(code))
                    {
                        int num = map.get(code);
                        int newquant = num + quant;

                        map.remove(code);
                        map.put(code, newquant);
                    }
                    else
                    {
                        map.put(code, quant);
                    }
                }

                for (String code : map.keySet())
                {
                    int quant = map.get(code);
                    writer.append(code + "," + String.valueOf(quant) + "\n");
                }

                writer.flush();
            }

            JOptionPane.showMessageDialog(Reports.this, reportName + " Report created.");
        }
        catch (SQLException | FileNotFoundException e)
        {
            JOptionPane.showMessageDialog(Reports.this, "Error while creating report, please try again.");
            JOptionPane.showMessageDialog(Reports.this, e);
        } 
        catch (IOException e) 
        {
            JOptionPane.showMessageDialog(Reports.this, "Error while creating report, please try again.");
            JOptionPane.showMessageDialog(Reports.this, e);
        }
    }
    
    private void createSalesOrderReportByProduct(String prodCode) 
    {
        int selectedOption = JOptionPane.showConfirmDialog(null, "Are you sure you want to create a sales order report for " + prodCode + "?", "Sales Order Report", JOptionPane.YES_NO_OPTION);
        if (selectedOption == JOptionPane.YES_OPTION) 
        {
            try (Statement statement = db.getConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE)) 
            {
                ResultSet rs = statement.executeQuery("SELECT prod_num FROM products where code = '" + prodCode + "'");
                rs.next();
                int prod_num = rs.getInt("prod_num");
                
                try (FileOutputStream fileOut = new FileOutputStream("S:/Order Reports/Order Report - Prod num " + prod_num + ".xls")) 
                {
                    HSSFWorkbook wb = new HSSFWorkbook();
                    HSSFSheet worksheet = wb.createSheet(String.valueOf(prod_num));
                    CellStyle editableStyle = wb.createCellStyle();
                    editableStyle.setLocked(false);

                    HSSFRow row = worksheet.createRow((short) 0);
                    HSSFCell cell = row.createCell(0);
                    cell.setCellValue("Product Code");

                    cell = row.createCell(1);
                    cell.setCellValue(prodCode);

                    row = worksheet.createRow((short) 2);
                    cell = row.createCell(0);
                    cell.setCellValue("Orders");

                    row = worksheet.createRow((short) 3);
                    cell = row.createCell(0);
                    cell.setCellValue("Order Number");
                    cell = row.createCell(1);
                    cell.setCellValue("Customer Name");
                    cell = row.createCell(2);
                    cell.setCellValue("Order Date");
                    cell = row.createCell(3);
                    cell.setCellValue("Delivery Date");
                    cell = row.createCell(4);
                    cell.setCellValue("Dispatched");
                    cell = row.createCell(5);
                    cell.setCellValue("Delivered");
                    cell = row.createCell(6);
                    cell.setCellValue("Quantity");

                    int i = 4;
                    rs = statement.executeQuery("SELECT sales_order_details.ord_num, sales_order_details.quantity, sales_order.cust_num, customers.name, sales_order.ord_date, sales_order.del_date, sales_order.dispatched, sales_order.delivered FROM sales_order JOIN sales_order_details ON sales_order.ord_num=sales_order_details.ord_num JOIN customers ON sales_order.cust_num=customers.cust_num WHERE sales_order_details.prod_num = " + prod_num);
                    while (rs.next()) 
                    {
                        row = worksheet.createRow((short) i);
                        cell = row.createCell(0);
                        cell.setCellValue(rs.getString("ord_num"));
                        cell = row.createCell(1);
                        cell.setCellValue(rs.getString("name"));
                        cell = row.createCell(2);
                        cell.setCellValue(rs.getString("ord_date"));
                        cell = row.createCell(3);
                        cell.setCellValue(rs.getString("del_date"));
                        
                        cell = row.createCell(4);
                        if (rs.getInt("dispatched") == 1) 
                        {
                            cell.setCellValue("yes");
                        } 
                        else 
                        {
                            cell.setCellValue("no");
                        }
                        
                        cell = row.createCell(5);
                        if (rs.getInt("delivered") == 1) 
                        {
                            cell.setCellValue("yes");
                        } 
                        else 
                        {
                            cell.setCellValue("no");
                        }
                        
                        cell = row.createCell(6);
                        cell.setCellValue(rs.getString("quantity"));
                        i++;
                    }

                    // Auto Size Columns
                    for (int k = 0; k < 5; k++) 
                    {
                        worksheet.autoSizeColumn(k);
                        worksheet.setDefaultColumnStyle(i, editableStyle);
                    }

                    wb.write(fileOut);
                    fileOut.flush();
                    fileOut.close();
                }
                
                JOptionPane.showMessageDialog(Reports.this, "Order Report Created.");
            } 
            catch (SQLException | FileNotFoundException e) 
            {
                JOptionPane.showMessageDialog(Reports.this, "Error while creating report, please try again.");
                JOptionPane.showMessageDialog(Reports.this, e);
            } 
            catch (IOException e) 
            {
                JOptionPane.showMessageDialog(Reports.this, "Error while creating report, please try again.");
                JOptionPane.showMessageDialog(Reports.this, e);
            }
        }
    }
    
    private void btnAvailableStockReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAvailableStockReportActionPerformed
        btnAvailableStockReport.setSelected(true);
        btnOutOfStockReport.setSelected(false);
        btnPOMadeDate.setSelected(false);
        btnSOMadeDate.setSelected(false);
        btnSOMadeProd.setSelected(false);
        dateSPO.setEnabled(false);
        dateEPO.setEnabled(false);
        dateSSO.setEnabled(false);
        dateESO.setEnabled(false);
        labelProduct.setEnabled(false);
        btnFind.setEnabled(false);
        comboProducts.setEnabled(false);
        btnCreate.setEnabled(true);
    }//GEN-LAST:event_btnAvailableStockReportActionPerformed

    private void btnOutOfStockReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutOfStockReportActionPerformed
        btnAvailableStockReport.setSelected(false);
        btnOutOfStockReport.setSelected(true);
        btnPOMadeDate.setSelected(false);
        btnSOMadeDate.setSelected(false);
        btnSOMadeProd.setSelected(false);
        dateSPO.setEnabled(false);
        dateEPO.setEnabled(false);
        dateSSO.setEnabled(false);
        dateESO.setEnabled(false);
        labelProduct.setEnabled(false);
        btnFind.setEnabled(false);
        comboProducts.setEnabled(false);
        btnCreate.setEnabled(true);
    }//GEN-LAST:event_btnOutOfStockReportActionPerformed

    private void btnPOMadeDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPOMadeDateActionPerformed
        btnAvailableStockReport.setSelected(false);
        btnOutOfStockReport.setSelected(false);
        btnPOMadeDate.setSelected(true);
        btnSOMadeDate.setSelected(false);
        btnSOMadeProd.setSelected(false);
        dateSPO.setEnabled(true);
        dateEPO.setEnabled(true);
        dateSSO.setEnabled(false);
        dateESO.setEnabled(false);
        labelProduct.setEnabled(false);
        btnFind.setEnabled(false);
        comboProducts.setEnabled(false);
        btnCreate.setEnabled(true);
    }//GEN-LAST:event_btnPOMadeDateActionPerformed

    private void btnSOMadeDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSOMadeDateActionPerformed
        btnAvailableStockReport.setSelected(false);
        btnOutOfStockReport.setSelected(false);
        btnPOMadeDate.setSelected(false);
        btnSOMadeDate.setSelected(true);
        btnSOMadeProd.setSelected(false);
        dateSPO.setEnabled(false);
        dateEPO.setEnabled(false);
        dateSSO.setEnabled(true);
        dateESO.setEnabled(true);
        labelProduct.setEnabled(false);
        btnFind.setEnabled(false);
        comboProducts.setEnabled(false);
        btnCreate.setEnabled(true);
    }//GEN-LAST:event_btnSOMadeDateActionPerformed

    private void btnSOMadeProdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSOMadeProdActionPerformed
        btnAvailableStockReport.setSelected(false);
        btnOutOfStockReport.setSelected(false);
        btnPOMadeDate.setSelected(false);
        btnSOMadeDate.setSelected(false);
        btnSOMadeProd.setSelected(true);
        dateSPO.setEnabled(false);
        dateEPO.setEnabled(false);
        dateSSO.setEnabled(false);
        dateESO.setEnabled(false);
        labelProduct.setEnabled(true);
        btnFind.setEnabled(true);
        comboProducts.setEnabled(true);
        btnCreate.setEnabled(true);
    }//GEN-LAST:event_btnSOMadeProdActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        if(btnAvailableStockReport.isSelected())
        {
            createAvailableStockReport();
        }
        if(btnOutOfStockReport.isSelected())
        {
            createOutOfStockReport();
        }
        if(btnPOMadeDate.isSelected())
        {
            String startDate = ((JTextField) dateSPO.getDateEditor().getUiComponent()).getText();
            String endDate = ((JTextField) dateEPO.getDateEditor().getUiComponent()).getText();
            
            if(startDate.isEmpty() || endDate.isEmpty())
            {
                JOptionPane.showMessageDialog(Reports.this, "Please select start and end date");
            }
            else
            {
                createPurchaseOrderReportByDates(startDate, endDate);
            }
        }
        if(btnSOMadeDate.isSelected())
        {
            String startDate = ((JTextField) dateSSO.getDateEditor().getUiComponent()).getText();
            String endDate = ((JTextField) dateESO.getDateEditor().getUiComponent()).getText();
            
            if(startDate.isEmpty() || endDate.isEmpty())
            {
                JOptionPane.showMessageDialog(Reports.this, "Please select start and end date");
            }
            else
            {
                createSalesOrderReportByDates(startDate, endDate);
            }
        }
        if(btnSOMadeProd.isSelected())
        {
            String prodCode = labelProduct.getText();
            
            if(prodCode.isEmpty())
            {
               JOptionPane.showMessageDialog(Reports.this, "Please select a product");
            }
            else
            {
                createSalesOrderReportByProduct(prodCode);
            }
        }
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionPerformed
         try (Statement statement = db.getConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE))
        {
            ArrayList<String> products = new ArrayList<>();
            ResultSet rs = statement.executeQuery("SELECT code FROM products WHERE code LIKE '%" + labelProduct.getText() + "%' ORDER BY code ASC");
            while (rs.next())
            {
                products.add(rs.getString("code"));
            }
            
            comboProducts.setModel(new javax.swing.DefaultComboBoxModel(products.toArray()));
        }
        catch (SQLException e) 
        {
            JOptionPane.showMessageDialog(Reports.this, "Error while searching products, please try again.");
            JOptionPane.showMessageDialog(Reports.this, e);
        } 
    }//GEN-LAST:event_btnFindActionPerformed

    private void comboProductsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboProductsActionPerformed
        String product = (String) comboProducts.getSelectedItem();
        labelProduct.setText(product);
    }//GEN-LAST:event_comboProductsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton btnAvailableStockReport;
    private javax.swing.JButton btnCreate;
    private javax.swing.JRadioButton btnCustomers;
    private javax.swing.JButton btnFind;
    private javax.swing.JRadioButton btnOutOfStockReport;
    private javax.swing.JRadioButton btnPOMadeDate;
    private javax.swing.JRadioButton btnSOMadeDate;
    private javax.swing.JRadioButton btnSOMadeProd;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox comboProducts;
    private com.toedter.calendar.JDateChooser dateEPO;
    private com.toedter.calendar.JDateChooser dateESO;
    private com.toedter.calendar.JDateChooser dateSPO;
    private com.toedter.calendar.JDateChooser dateSSO;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JTextField labelProduct;
    // End of variables declaration//GEN-END:variables
}
